Shader "Standard" {
Properties {
_Color ("Color", Color) = (1,1,1,1)
_MainTex ("Albedo", 2D) = "white" { }
_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
_Glossiness ("Smoothness", Range(0, 1)) = 0.5
_GlossMapScale ("Smoothness Scale", Range(0, 1)) = 1
[Enum(Metallic Alpha,0,Albedo Alpha,1)] _SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0
_Metallic ("Metallic", Range(0, 1)) = 0
_MetallicGlossMap ("Metallic", 2D) = "white" { }
[ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
[ToggleOff] _GlossyReflections ("Glossy Reflections", Float) = 1
_BumpScale ("Scale", Float) = 1
_BumpMap ("Normal Map", 2D) = "bump" { }
_Parallax ("Height Scale", Range(0.005, 0.08)) = 0.02
_ParallaxMap ("Height Map", 2D) = "black" { }
_OcclusionStrength ("Strength", Range(0, 1)) = 1
_OcclusionMap ("Occlusion", 2D) = "white" { }
_EmissionColor ("Color", Color) = (0,0,0,1)
_EmissionMap ("Emission", 2D) = "white" { }
_DetailMask ("Detail Mask", 2D) = "white" { }
_DetailAlbedoMap ("Detail Albedo x2", 2D) = "grey" { }
_DetailNormalMapScale ("Scale", Float) = 1
_DetailNormalMap ("Normal Map", 2D) = "bump" { }
[Enum(UV0,0,UV1,1)] _UVSec ("UV Set for secondary textures", Float) = 0
_Mode ("__mode", Float) = 0
_SrcBlend ("__src", Float) = 1
_DstBlend ("__dst", Float) = 0
_ZWrite ("__zw", Float) = 1
}
SubShader {
 LOD 300
 Tags { "PerformanceChecks" = "False" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 300
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 60147
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_9 = tmpvar_10;
  mediump float occ_11;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_11 = tmpvar_12;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump float tmpvar_14;
  highp float tmpvar_15;
  highp float smoothness_16;
  smoothness_16 = tmpvar_5;
  tmpvar_15 = (1.0 - smoothness_16);
  tmpvar_14 = tmpvar_15;
  mediump vec4 hdr_17;
  hdr_17 = tmpvar_13;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_18.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  lowp vec4 tmpvar_19;
  tmpvar_19 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_18.w);
  mediump vec4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_5;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    ((hdr_17.x * ((hdr_17.w * 
      (tmpvar_20.w - 1.0)
    ) + 1.0)) * tmpvar_20.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_11 * _OcclusionStrength))
  ) * mix (tmpvar_7, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_22 * tmpvar_7)
  ) * (tmpvar_8 * tmpvar_9)));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  c_1.xyz = color_28;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = c_1.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  c_1.xyz = color_28;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = c_1.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_29.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = c_1;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_5;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_14)
   * tmpvar_7) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * occlusion_14)
   * 
    mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_7 + 
    (specular_24 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  c_1.xyz = color_33;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  c_1.xyz = color_33;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  realtimeShadowAttenuation_2 = tmpvar_12;
  mediump float occ_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_16 = tmpvar_17;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_6;
  tmpvar_20 = (1.0 - smoothness_21);
  tmpvar_19 = tmpvar_20;
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_18;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_23.w = ((tmpvar_19 * (1.7 - 
    (0.7 * tmpvar_19)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((
    ((hdr_22.x * ((hdr_22.w * 
      (tmpvar_25.w - 1.0)
    ) + 1.0)) * tmpvar_25.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_16 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_27 * tmpvar_8)
  ) * (
    (tmpvar_9 * realtimeShadowAttenuation_2)
   * tmpvar_10)));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_2 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_19;
  occlusion_19 = ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength));
  highp vec4 tmpvar_20;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_6;
  tmpvar_22 = (1.0 - smoothness_23);
  tmpvar_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_20;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_25.w = ((tmpvar_21 * (1.7 - 
    (0.7 * tmpvar_21)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  mediump float tmpvar_28;
  tmpvar_28 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_6;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_19)
   * tmpvar_8) + (
    (((hdr_24.x * (
      (hdr_24.w * (tmpvar_27.w - 1.0))
     + 1.0)) * tmpvar_27.xyz) * occlusion_19)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_29 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_2)
   * tmpvar_11)));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_9 = tmpvar_10;
  mediump float occ_11;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_11 = tmpvar_12;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump float tmpvar_14;
  highp float tmpvar_15;
  highp float smoothness_16;
  smoothness_16 = tmpvar_5;
  tmpvar_15 = (1.0 - smoothness_16);
  tmpvar_14 = tmpvar_15;
  mediump vec4 hdr_17;
  hdr_17 = tmpvar_13;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_18.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  lowp vec4 tmpvar_19;
  tmpvar_19 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_18.w);
  mediump vec4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_5;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    ((hdr_17.x * ((hdr_17.w * 
      (tmpvar_20.w - 1.0)
    ) + 1.0)) * tmpvar_20.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_11 * _OcclusionStrength))
  ) * mix (tmpvar_7, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_22 * tmpvar_7)
  ) * (tmpvar_8 * tmpvar_9)));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  c_1.xyz = color_28;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = c_1.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  c_1.xyz = color_28;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = c_1.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_29.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = c_1;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_5;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_14)
   * tmpvar_7) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * occlusion_14)
   * 
    mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_7 + 
    (specular_24 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  c_1.xyz = color_33;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  c_1.xyz = color_33;
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  realtimeShadowAttenuation_2 = tmpvar_12;
  mediump float occ_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_16 = tmpvar_17;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_6;
  tmpvar_20 = (1.0 - smoothness_21);
  tmpvar_19 = tmpvar_20;
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_18;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_23.w = ((tmpvar_19 * (1.7 - 
    (0.7 * tmpvar_19)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((
    ((hdr_22.x * ((hdr_22.w * 
      (tmpvar_25.w - 1.0)
    ) + 1.0)) * tmpvar_25.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_16 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_27 * tmpvar_8)
  ) * (
    (tmpvar_9 * realtimeShadowAttenuation_2)
   * tmpvar_10)));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_2 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_19;
  occlusion_19 = ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength));
  highp vec4 tmpvar_20;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_6;
  tmpvar_22 = (1.0 - smoothness_23);
  tmpvar_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_20;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_25.w = ((tmpvar_21 * (1.7 - 
    (0.7 * tmpvar_21)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  mediump float tmpvar_28;
  tmpvar_28 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_6;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_19)
   * tmpvar_8) + (
    (((hdr_24.x * (
      (hdr_24.w * (tmpvar_27.w - 1.0))
     + 1.0)) * tmpvar_27.xyz) * occlusion_19)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_29 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_2)
   * tmpvar_11)));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_1;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_28, vec3(tmpvar_51));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_28, vec3(tmpvar_51));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_29.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = c_1;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  highp float tmpvar_57;
  tmpvar_57 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_57));
  mediump vec4 xlat_varoutput_58;
  xlat_varoutput_58.xyz = c_1.xyz;
  xlat_varoutput_58.w = 1.0;
  gl_FragData[0] = xlat_varoutput_58;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  highp float tmpvar_57;
  tmpvar_57 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_57));
  mediump vec4 xlat_varoutput_58;
  xlat_varoutput_58.xyz = c_1.xyz;
  xlat_varoutput_58.w = 1.0;
  gl_FragData[0] = xlat_varoutput_58;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  highp float tmpvar_56;
  tmpvar_56 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_33, vec3(tmpvar_56));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  ambientOrLightmapUV_20.xyz = (x1_21 + (unity_SHC.xyz * (
    (normalWorld_19.x * normalWorld_19.x)
   - 
    (normalWorld_19.y * normalWorld_19.y)
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  highp float tmpvar_56;
  tmpvar_56 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_33, vec3(tmpvar_56));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = c_1;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = c_1;
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_1;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_28, vec3(tmpvar_51));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  highp float tmpvar_51;
  tmpvar_51 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_28, vec3(tmpvar_51));
  mediump vec4 xlat_varoutput_52;
  xlat_varoutput_52.xyz = c_1.xyz;
  xlat_varoutput_52.w = 1.0;
  gl_FragData[0] = xlat_varoutput_52;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_29.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = c_1;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = tmpvar_30.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  highp float tmpvar_57;
  tmpvar_57 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_57));
  mediump vec4 xlat_varoutput_58;
  xlat_varoutput_58.xyz = c_1.xyz;
  xlat_varoutput_58.w = 1.0;
  gl_FragData[0] = xlat_varoutput_58;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_33 + (tmpvar_56.xyz * _EmissionColor.xyz));
  highp float tmpvar_57;
  tmpvar_57 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_57));
  mediump vec4 xlat_varoutput_58;
  xlat_varoutput_58.xyz = c_1.xyz;
  xlat_varoutput_58.w = 1.0;
  gl_FragData[0] = xlat_varoutput_58;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float occ_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_13 = tmpvar_14;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_15;
  occlusion_15 = ((1.0 - _OcclusionStrength) + (occ_13 * _OcclusionStrength));
  highp vec4 tmpvar_16;
  tmpvar_16 = unity_SpecCube0_HDR;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_6;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_16;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_21.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump float tmpvar_24;
  tmpvar_24 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_6;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_15)
   * tmpvar_8) + (
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * occlusion_15)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_25 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  highp float tmpvar_56;
  tmpvar_56 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_33, vec3(tmpvar_56));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec3 x1_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_36.x = dot (unity_SHBr, tmpvar_37);
  x1_36.y = dot (unity_SHBg, tmpvar_37);
  x1_36.z = dot (unity_SHBb, tmpvar_37);
  ambientOrLightmapUV_20.xyz = ((ambientOrLightmapUV_20.xyz * (
    (ambientOrLightmapUV_20.xyz * ((ambientOrLightmapUV_20.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_36 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  mediump float occlusion_14;
  occlusion_14 = ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength));
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_16;
  worldViewDir_16 = -(tmpvar_10);
  mediump vec3 Normal_17;
  Normal_17 = tmpvar_9;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  highp float smoothness_20;
  smoothness_20 = tmpvar_4;
  tmpvar_19 = (1.0 - smoothness_20);
  tmpvar_18 = tmpvar_19;
  mediump vec3 I_21;
  I_21 = -(worldViewDir_16);
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_9;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x_26;
  x_26.x = dot (unity_SHAr, tmpvar_25);
  x_26.y = dot (unity_SHAg, tmpvar_25);
  x_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_23 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_26)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_14);
  mediump vec3 tmpvar_27;
  tmpvar_27 = (I_21 - (2.0 * (
    dot (Normal_17, I_21)
   * Normal_17)));
  mediump vec4 hdr_28;
  hdr_28 = tmpvar_15;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = ((tmpvar_18 * (1.7 - 
    (0.7 * tmpvar_18)
  )) * 6.0);
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_27, tmpvar_29.w);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  tmpvar_24 = (((hdr_28.x * 
    ((hdr_28.w * (tmpvar_31.w - 1.0)) + 1.0)
  ) * tmpvar_31.xyz) * occlusion_14);
  highp vec3 viewDir_32;
  viewDir_32 = -(tmpvar_10);
  mediump vec3 color_33;
  mediump float surfaceReduction_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (_WorldSpaceLightPos0.xyz + viewDir_32);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_9, tmpvar_39), 0.0, 1.0);
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, viewDir_32), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_4;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_38 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_38;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_37 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_50;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_51;
  surfaceReduction_34 = (1.0 - ((roughness_37 * perceptualRoughness_38) * 0.28));
  mediump float x_52;
  x_52 = (1.0 - tmpvar_44);
  mediump vec3 tmpvar_53;
  tmpvar_53 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_52 * x_52) * (x_52 * x_52))));
  highp vec3 tmpvar_54;
  tmpvar_54 = (((
    ((tmpvar_6 + (tmpvar_51 * tmpvar_7)) * tmpvar_11)
   * tmpvar_41) + (tmpvar_23 * tmpvar_6)) + ((surfaceReduction_34 * tmpvar_24) * tmpvar_53));
  color_33 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = color_33;
  c_1.w = tmpvar_55.w;
  highp float tmpvar_56;
  tmpvar_56 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_33, vec3(tmpvar_56));
  mediump vec4 xlat_varoutput_57;
  xlat_varoutput_57.xyz = c_1.xyz;
  xlat_varoutput_57.w = 1.0;
  gl_FragData[0] = xlat_varoutput_57;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = c_1;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = c_1;
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float occ_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_14;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_22, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_21 = (((hdr_23.x * 
    ((hdr_23.w * (tmpvar_26.w - 1.0)) + 1.0)
  ) * tmpvar_26.xyz) * ((1.0 - _OcclusionStrength) + (occ_12 * _OcclusionStrength)));
  highp vec3 viewDir_27;
  viewDir_27 = -(tmpvar_10);
  mediump vec3 color_28;
  mediump float surfaceReduction_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (_WorldSpaceLightPos0.xyz + viewDir_27);
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_9, tmpvar_34), 0.0, 1.0);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (dot (tmpvar_9, viewDir_27), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  highp float tmpvar_41;
  highp float smoothness_42;
  smoothness_42 = tmpvar_4;
  tmpvar_41 = (1.0 - smoothness_42);
  perceptualRoughness_33 = tmpvar_41;
  highp float tmpvar_43;
  highp float perceptualRoughness_44;
  perceptualRoughness_44 = perceptualRoughness_33;
  tmpvar_43 = (perceptualRoughness_44 * perceptualRoughness_44);
  roughness_32 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_45;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_46;
  tmpvar_46 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_46;
  surfaceReduction_29 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_47;
  x_47 = (1.0 - tmpvar_39);
  mediump vec3 tmpvar_48;
  tmpvar_48 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_47 * x_47) * (x_47 * x_47))));
  highp vec3 tmpvar_49;
  tmpvar_49 = (((
    (tmpvar_6 + (tmpvar_46 * tmpvar_7))
   * tmpvar_11) * tmpvar_36) + ((surfaceReduction_29 * tmpvar_21) * tmpvar_48));
  color_28 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_28;
  c_1.w = tmpvar_50.w;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_28 + (tmpvar_51.xyz * _EmissionColor.xyz));
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
}
}
 Pass {
  Name "FORWARD_DELTA"
  LOD 300
  Tags { "LIGHTMODE" = "FORWARDADD" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 81374
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_19;
  highp float specularTerm_20;
  highp float a2_21;
  mediump float roughness_22;
  mediump float perceptualRoughness_23;
  highp vec3 tmpvar_24;
  highp vec3 inVec_25;
  inVec_25 = (tmpvar_16 - normalize(xlv_TEXCOORD1));
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_9, tmpvar_24), 0.0, 1.0);
  highp float tmpvar_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  tmpvar_29 = (1.0 - smoothness_30);
  perceptualRoughness_23 = tmpvar_29;
  highp float tmpvar_31;
  highp float perceptualRoughness_32;
  perceptualRoughness_32 = perceptualRoughness_23;
  tmpvar_31 = (perceptualRoughness_32 * perceptualRoughness_32);
  roughness_22 = tmpvar_31;
  mediump float tmpvar_33;
  tmpvar_33 = (roughness_22 * roughness_22);
  a2_21 = tmpvar_33;
  specularTerm_20 = ((roughness_22 / (
    (max (0.32, clamp (dot (tmpvar_16, tmpvar_24), 0.0, 1.0)) * (1.5 + roughness_22))
   * 
    (((tmpvar_28 * tmpvar_28) * (a2_21 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_34;
  tmpvar_34 = clamp (specularTerm_20, 0.0, 100.0);
  specularTerm_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_7 + 
    (tmpvar_34 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_26);
  color_19 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = color_19;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_19;
  highp float specularTerm_20;
  highp float a2_21;
  mediump float roughness_22;
  mediump float perceptualRoughness_23;
  highp vec3 tmpvar_24;
  highp vec3 inVec_25;
  inVec_25 = (tmpvar_16 - normalize(xlv_TEXCOORD1));
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_9, tmpvar_24), 0.0, 1.0);
  highp float tmpvar_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  tmpvar_29 = (1.0 - smoothness_30);
  perceptualRoughness_23 = tmpvar_29;
  highp float tmpvar_31;
  highp float perceptualRoughness_32;
  perceptualRoughness_32 = perceptualRoughness_23;
  tmpvar_31 = (perceptualRoughness_32 * perceptualRoughness_32);
  roughness_22 = tmpvar_31;
  mediump float tmpvar_33;
  tmpvar_33 = (roughness_22 * roughness_22);
  a2_21 = tmpvar_33;
  specularTerm_20 = ((roughness_22 / (
    (max (0.32, clamp (dot (tmpvar_16, tmpvar_24), 0.0, 1.0)) * (1.5 + roughness_22))
   * 
    (((tmpvar_28 * tmpvar_28) * (a2_21 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_34;
  tmpvar_34 = clamp (specularTerm_20, 0.0, 100.0);
  specularTerm_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_7 + 
    (tmpvar_34 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_26);
  color_19 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = color_19;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * tmpvar_6) * (tmpvar_6 * tmpvar_6));
  mediump float specular_8;
  highp float smoothness_9;
  smoothness_9 = tmpvar_4;
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_7;
  tmpvar_10.y = (1.0 - smoothness_9);
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (unity_NHxRoughness, tmpvar_10).w * 16.0);
  specular_8 = tmpvar_11;
  c_1 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_8 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * _LightColor0.xyz);
  c_1 = (c_1 * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0));
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = c_1;
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8.x = xlv_TEXCOORD2.w;
  tmpvar_8.y = xlv_TEXCOORD2_1.w;
  tmpvar_8.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_9;
  lightDir_9 = tmpvar_8;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump vec3 color_11;
  highp float specularTerm_12;
  highp float a2_13;
  mediump float roughness_14;
  mediump float perceptualRoughness_15;
  highp vec3 tmpvar_16;
  highp vec3 inVec_17;
  inVec_17 = (lightDir_9 - normalize(xlv_TEXCOORD1));
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, lightDir_9), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_7, tmpvar_16), 0.0, 1.0);
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_3;
  tmpvar_21 = (1.0 - smoothness_22);
  perceptualRoughness_15 = tmpvar_21;
  highp float tmpvar_23;
  highp float perceptualRoughness_24;
  perceptualRoughness_24 = perceptualRoughness_15;
  tmpvar_23 = (perceptualRoughness_24 * perceptualRoughness_24);
  roughness_14 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (roughness_14 * roughness_14);
  a2_13 = tmpvar_25;
  specularTerm_12 = ((roughness_14 / (
    (max (0.32, clamp (dot (lightDir_9, tmpvar_16), 0.0, 1.0)) * (1.5 + roughness_14))
   * 
    (((tmpvar_20 * tmpvar_20) * (a2_13 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_26;
  tmpvar_26 = clamp (specularTerm_12, 0.0, 100.0);
  specularTerm_12 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (((tmpvar_5 + 
    (tmpvar_26 * tmpvar_6)
  ) * tmpvar_10) * tmpvar_18);
  color_11 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = color_11;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  tmpvar_5 = (tmpvar_4 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8.x = xlv_TEXCOORD2.w;
  tmpvar_8.y = xlv_TEXCOORD2_1.w;
  tmpvar_8.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_9;
  lightDir_9 = tmpvar_8;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump vec3 color_11;
  highp float specularTerm_12;
  highp float a2_13;
  mediump float roughness_14;
  mediump float perceptualRoughness_15;
  highp vec3 tmpvar_16;
  highp vec3 inVec_17;
  inVec_17 = (lightDir_9 - normalize(xlv_TEXCOORD1));
  tmpvar_16 = (inVec_17 * inversesqrt(max (0.001, 
    dot (inVec_17, inVec_17)
  )));
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, lightDir_9), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_7, tmpvar_16), 0.0, 1.0);
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_3;
  tmpvar_21 = (1.0 - smoothness_22);
  perceptualRoughness_15 = tmpvar_21;
  highp float tmpvar_23;
  highp float perceptualRoughness_24;
  perceptualRoughness_24 = perceptualRoughness_15;
  tmpvar_23 = (perceptualRoughness_24 * perceptualRoughness_24);
  roughness_14 = tmpvar_23;
  mediump float tmpvar_25;
  tmpvar_25 = (roughness_14 * roughness_14);
  a2_13 = tmpvar_25;
  specularTerm_12 = ((roughness_14 / (
    (max (0.32, clamp (dot (lightDir_9, tmpvar_16), 0.0, 1.0)) * (1.5 + roughness_14))
   * 
    (((tmpvar_20 * tmpvar_20) * (a2_13 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_26;
  tmpvar_26 = clamp (specularTerm_12, 0.0, 100.0);
  specularTerm_12 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (((tmpvar_5 + 
    (tmpvar_26 * tmpvar_6)
  ) * tmpvar_10) * tmpvar_18);
  color_11 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = color_11;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_15 = tmpvar_16.w;
  lowp float tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_17 = tmpvar_18.w;
  highp float tmpvar_19;
  tmpvar_19 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_15) * tmpvar_17);
  atten_1 = tmpvar_19;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_3;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10);
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_11 = tmpvar_12.w;
  lowp float tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_13 = tmpvar_14.w;
  highp float tmpvar_15;
  tmpvar_15 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_11) * tmpvar_13);
  atten_1 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = xlv_TEXCOORD2.w;
  tmpvar_16.y = xlv_TEXCOORD2_1.w;
  tmpvar_16.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_17;
  lightDir_17 = tmpvar_16;
  mediump float atten_18;
  atten_18 = atten_1;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = _LightColor0.xyz;
  highp vec3 n_21;
  n_21 = lightDir_17;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(n_21);
  tmpvar_20 = tmpvar_22;
  tmpvar_19 = (tmpvar_19 * atten_18);
  mediump vec3 color_23;
  highp float specularTerm_24;
  highp float a2_25;
  mediump float roughness_26;
  mediump float perceptualRoughness_27;
  highp vec3 tmpvar_28;
  highp vec3 inVec_29;
  inVec_29 = (tmpvar_20 - normalize(xlv_TEXCOORD1));
  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
    dot (inVec_29, inVec_29)
  )));
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_20), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_9, tmpvar_28), 0.0, 1.0);
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  perceptualRoughness_27 = tmpvar_33;
  highp float tmpvar_35;
  highp float perceptualRoughness_36;
  perceptualRoughness_36 = perceptualRoughness_27;
  tmpvar_35 = (perceptualRoughness_36 * perceptualRoughness_36);
  roughness_26 = tmpvar_35;
  mediump float tmpvar_37;
  tmpvar_37 = (roughness_26 * roughness_26);
  a2_25 = tmpvar_37;
  specularTerm_24 = ((roughness_26 / (
    (max (0.32, clamp (dot (tmpvar_20, tmpvar_28), 0.0, 1.0)) * (1.5 + roughness_26))
   * 
    (((tmpvar_32 * tmpvar_32) * (a2_25 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_38;
  tmpvar_38 = clamp (specularTerm_24, 0.0, 100.0);
  specularTerm_24 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (((tmpvar_7 + 
    (tmpvar_38 * tmpvar_8)
  ) * tmpvar_19) * tmpvar_30);
  color_23 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = color_23;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10);
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_11 = tmpvar_12.w;
  lowp float tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_13 = tmpvar_14.w;
  highp float tmpvar_15;
  tmpvar_15 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_11) * tmpvar_13);
  atten_1 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = xlv_TEXCOORD2.w;
  tmpvar_16.y = xlv_TEXCOORD2_1.w;
  tmpvar_16.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_17;
  lightDir_17 = tmpvar_16;
  mediump float atten_18;
  atten_18 = atten_1;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_19 = _LightColor0.xyz;
  highp vec3 n_21;
  n_21 = lightDir_17;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(n_21);
  tmpvar_20 = tmpvar_22;
  tmpvar_19 = (tmpvar_19 * atten_18);
  mediump vec3 color_23;
  highp float specularTerm_24;
  highp float a2_25;
  mediump float roughness_26;
  mediump float perceptualRoughness_27;
  highp vec3 tmpvar_28;
  highp vec3 inVec_29;
  inVec_29 = (tmpvar_20 - normalize(xlv_TEXCOORD1));
  tmpvar_28 = (inVec_29 * inversesqrt(max (0.001, 
    dot (inVec_29, inVec_29)
  )));
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_20), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_9, tmpvar_28), 0.0, 1.0);
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  perceptualRoughness_27 = tmpvar_33;
  highp float tmpvar_35;
  highp float perceptualRoughness_36;
  perceptualRoughness_36 = perceptualRoughness_27;
  tmpvar_35 = (perceptualRoughness_36 * perceptualRoughness_36);
  roughness_26 = tmpvar_35;
  mediump float tmpvar_37;
  tmpvar_37 = (roughness_26 * roughness_26);
  a2_25 = tmpvar_37;
  specularTerm_24 = ((roughness_26 / (
    (max (0.32, clamp (dot (tmpvar_20, tmpvar_28), 0.0, 1.0)) * (1.5 + roughness_26))
   * 
    (((tmpvar_32 * tmpvar_32) * (a2_25 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_38;
  tmpvar_38 = clamp (specularTerm_24, 0.0, 100.0);
  specularTerm_24 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (((tmpvar_7 + 
    (tmpvar_38 * tmpvar_8)
  ) * tmpvar_19) * tmpvar_30);
  color_23 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = color_23;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_19;
  highp float specularTerm_20;
  highp float a2_21;
  mediump float roughness_22;
  mediump float perceptualRoughness_23;
  highp vec3 tmpvar_24;
  highp vec3 inVec_25;
  inVec_25 = (tmpvar_16 - normalize(xlv_TEXCOORD1));
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_9, tmpvar_24), 0.0, 1.0);
  highp float tmpvar_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  tmpvar_29 = (1.0 - smoothness_30);
  perceptualRoughness_23 = tmpvar_29;
  highp float tmpvar_31;
  highp float perceptualRoughness_32;
  perceptualRoughness_32 = perceptualRoughness_23;
  tmpvar_31 = (perceptualRoughness_32 * perceptualRoughness_32);
  roughness_22 = tmpvar_31;
  mediump float tmpvar_33;
  tmpvar_33 = (roughness_22 * roughness_22);
  a2_21 = tmpvar_33;
  specularTerm_20 = ((roughness_22 / (
    (max (0.32, clamp (dot (tmpvar_16, tmpvar_24), 0.0, 1.0)) * (1.5 + roughness_22))
   * 
    (((tmpvar_28 * tmpvar_28) * (a2_21 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_34;
  tmpvar_34 = clamp (specularTerm_20, 0.0, 100.0);
  specularTerm_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_7 + 
    (tmpvar_34 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_26);
  color_19 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = color_19;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_10).xyz;
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_1;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_15 = _LightColor0.xyz;
  highp vec3 n_17;
  n_17 = lightDir_13;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(n_17);
  tmpvar_16 = tmpvar_18;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_19;
  highp float specularTerm_20;
  highp float a2_21;
  mediump float roughness_22;
  mediump float perceptualRoughness_23;
  highp vec3 tmpvar_24;
  highp vec3 inVec_25;
  inVec_25 = (tmpvar_16 - normalize(xlv_TEXCOORD1));
  tmpvar_24 = (inVec_25 * inversesqrt(max (0.001, 
    dot (inVec_25, inVec_25)
  )));
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_9, tmpvar_16), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_9, tmpvar_24), 0.0, 1.0);
  highp float tmpvar_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  tmpvar_29 = (1.0 - smoothness_30);
  perceptualRoughness_23 = tmpvar_29;
  highp float tmpvar_31;
  highp float perceptualRoughness_32;
  perceptualRoughness_32 = perceptualRoughness_23;
  tmpvar_31 = (perceptualRoughness_32 * perceptualRoughness_32);
  roughness_22 = tmpvar_31;
  mediump float tmpvar_33;
  tmpvar_33 = (roughness_22 * roughness_22);
  a2_21 = tmpvar_33;
  specularTerm_20 = ((roughness_22 / (
    (max (0.32, clamp (dot (tmpvar_16, tmpvar_24), 0.0, 1.0)) * (1.5 + roughness_22))
   * 
    (((tmpvar_28 * tmpvar_28) * (a2_21 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_34;
  tmpvar_34 = clamp (specularTerm_20, 0.0, 100.0);
  specularTerm_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (((tmpvar_7 + 
    (tmpvar_34 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_26);
  color_19 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = color_19;
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = tmpvar_36.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_13).xy).w;
  atten_1 = tmpvar_14;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = c_2;
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  highp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_9).xy).w;
  atten_1 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * atten_13);
  mediump vec3 color_15;
  highp float specularTerm_16;
  highp float a2_17;
  mediump float roughness_18;
  mediump float perceptualRoughness_19;
  highp vec3 tmpvar_20;
  highp vec3 inVec_21;
  inVec_21 = (lightDir_12 - normalize(xlv_TEXCOORD1));
  tmpvar_20 = (inVec_21 * inversesqrt(max (0.001, 
    dot (inVec_21, inVec_21)
  )));
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, lightDir_12), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_8, tmpvar_20), 0.0, 1.0);
  highp float tmpvar_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_4;
  tmpvar_25 = (1.0 - smoothness_26);
  perceptualRoughness_19 = tmpvar_25;
  highp float tmpvar_27;
  highp float perceptualRoughness_28;
  perceptualRoughness_28 = perceptualRoughness_19;
  tmpvar_27 = (perceptualRoughness_28 * perceptualRoughness_28);
  roughness_18 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = (roughness_18 * roughness_18);
  a2_17 = tmpvar_29;
  specularTerm_16 = ((roughness_18 / (
    (max (0.32, clamp (dot (lightDir_12, tmpvar_20), 0.0, 1.0)) * (1.5 + roughness_18))
   * 
    (((tmpvar_24 * tmpvar_24) * (a2_17 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_30;
  tmpvar_30 = clamp (specularTerm_16, 0.0, 100.0);
  specularTerm_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (((tmpvar_6 + 
    (tmpvar_30 * tmpvar_7)
  ) * tmpvar_14) * tmpvar_22);
  color_15 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = color_15;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  highp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_9).xy).w;
  atten_1 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * atten_13);
  mediump vec3 color_15;
  highp float specularTerm_16;
  highp float a2_17;
  mediump float roughness_18;
  mediump float perceptualRoughness_19;
  highp vec3 tmpvar_20;
  highp vec3 inVec_21;
  inVec_21 = (lightDir_12 - normalize(xlv_TEXCOORD1));
  tmpvar_20 = (inVec_21 * inversesqrt(max (0.001, 
    dot (inVec_21, inVec_21)
  )));
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, lightDir_12), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_8, tmpvar_20), 0.0, 1.0);
  highp float tmpvar_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_4;
  tmpvar_25 = (1.0 - smoothness_26);
  perceptualRoughness_19 = tmpvar_25;
  highp float tmpvar_27;
  highp float perceptualRoughness_28;
  perceptualRoughness_28 = perceptualRoughness_19;
  tmpvar_27 = (perceptualRoughness_28 * perceptualRoughness_28);
  roughness_18 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = (roughness_18 * roughness_18);
  a2_17 = tmpvar_29;
  specularTerm_16 = ((roughness_18 / (
    (max (0.32, clamp (dot (lightDir_12, tmpvar_20), 0.0, 1.0)) * (1.5 + roughness_18))
   * 
    (((tmpvar_24 * tmpvar_24) * (a2_17 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_30;
  tmpvar_30 = clamp (specularTerm_16, 0.0, 100.0);
  specularTerm_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (((tmpvar_6 + 
    (tmpvar_30 * tmpvar_7)
  ) * tmpvar_14) * tmpvar_22);
  color_15 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = color_15;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, tmpvar_18);
  mediump float tmpvar_21;
  if ((tmpvar_20.x < (tmpvar_18.z / tmpvar_18.w))) {
    tmpvar_21 = _LightShadowData.x;
  } else {
    tmpvar_21 = 1.0;
  };
  tmpvar_19 = tmpvar_21;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_22 = tmpvar_23.w;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_24 = tmpvar_25.w;
  highp float tmpvar_26;
  tmpvar_26 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_22) * tmpvar_24) * shadow_2);
  atten_1 = tmpvar_26;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_4;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, tmpvar_19);
  mediump float tmpvar_22;
  if ((tmpvar_21.x < (tmpvar_19.z / tmpvar_19.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  tmpvar_20 = tmpvar_22;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_23;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_24 = tmpvar_25.w;
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_26 = tmpvar_27.w;
  highp float tmpvar_28;
  tmpvar_28 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_24) * tmpvar_26) * shadow_2);
  atten_1 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29.x = xlv_TEXCOORD2.w;
  tmpvar_29.y = xlv_TEXCOORD2_1.w;
  tmpvar_29.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_30;
  lightDir_30 = tmpvar_29;
  mediump float atten_31;
  atten_31 = atten_1;
  mediump vec3 tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_32 = _LightColor0.xyz;
  highp vec3 n_34;
  n_34 = lightDir_30;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  tmpvar_33 = tmpvar_35;
  tmpvar_32 = (tmpvar_32 * atten_31);
  mediump vec3 color_36;
  highp float specularTerm_37;
  highp float a2_38;
  mediump float roughness_39;
  mediump float perceptualRoughness_40;
  highp vec3 tmpvar_41;
  highp vec3 inVec_42;
  inVec_42 = (tmpvar_33 - tmpvar_10);
  tmpvar_41 = (inVec_42 * inversesqrt(max (0.001, 
    dot (inVec_42, inVec_42)
  )));
  mediump float tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  tmpvar_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, tmpvar_41), 0.0, 1.0);
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_5;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_40 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_40;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_39 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_39 * roughness_39);
  a2_38 = tmpvar_50;
  specularTerm_37 = ((roughness_39 / (
    (max (0.32, clamp (dot (tmpvar_33, tmpvar_41), 0.0, 1.0)) * (1.5 + roughness_39))
   * 
    (((tmpvar_45 * tmpvar_45) * (a2_38 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_37, 0.0, 100.0);
  specularTerm_37 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_7 + 
    (tmpvar_51 * tmpvar_8)
  ) * tmpvar_32) * tmpvar_43);
  color_36 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = color_36;
  mediump vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = tmpvar_53.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, tmpvar_19);
  mediump float tmpvar_22;
  if ((tmpvar_21.x < (tmpvar_19.z / tmpvar_19.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  tmpvar_20 = tmpvar_22;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_23;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_24 = tmpvar_25.w;
  lowp float tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_26 = tmpvar_27.w;
  highp float tmpvar_28;
  tmpvar_28 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_24) * tmpvar_26) * shadow_2);
  atten_1 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29.x = xlv_TEXCOORD2.w;
  tmpvar_29.y = xlv_TEXCOORD2_1.w;
  tmpvar_29.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_30;
  lightDir_30 = tmpvar_29;
  mediump float atten_31;
  atten_31 = atten_1;
  mediump vec3 tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_32 = _LightColor0.xyz;
  highp vec3 n_34;
  n_34 = lightDir_30;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  tmpvar_33 = tmpvar_35;
  tmpvar_32 = (tmpvar_32 * atten_31);
  mediump vec3 color_36;
  highp float specularTerm_37;
  highp float a2_38;
  mediump float roughness_39;
  mediump float perceptualRoughness_40;
  highp vec3 tmpvar_41;
  highp vec3 inVec_42;
  inVec_42 = (tmpvar_33 - tmpvar_10);
  tmpvar_41 = (inVec_42 * inversesqrt(max (0.001, 
    dot (inVec_42, inVec_42)
  )));
  mediump float tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  tmpvar_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_9, tmpvar_41), 0.0, 1.0);
  highp float tmpvar_46;
  highp float smoothness_47;
  smoothness_47 = tmpvar_5;
  tmpvar_46 = (1.0 - smoothness_47);
  perceptualRoughness_40 = tmpvar_46;
  highp float tmpvar_48;
  highp float perceptualRoughness_49;
  perceptualRoughness_49 = perceptualRoughness_40;
  tmpvar_48 = (perceptualRoughness_49 * perceptualRoughness_49);
  roughness_39 = tmpvar_48;
  mediump float tmpvar_50;
  tmpvar_50 = (roughness_39 * roughness_39);
  a2_38 = tmpvar_50;
  specularTerm_37 = ((roughness_39 / (
    (max (0.32, clamp (dot (tmpvar_33, tmpvar_41), 0.0, 1.0)) * (1.5 + roughness_39))
   * 
    (((tmpvar_45 * tmpvar_45) * (a2_38 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_51;
  tmpvar_51 = clamp (specularTerm_37, 0.0, 100.0);
  specularTerm_37 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (((tmpvar_7 + 
    (tmpvar_51 * tmpvar_8)
  ) * tmpvar_32) * tmpvar_43);
  color_36 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = color_36;
  mediump vec4 xlat_varoutput_54;
  xlat_varoutput_54.xyz = tmpvar_53.xyz;
  xlat_varoutput_54.w = 1.0;
  gl_FragData[0] = xlat_varoutput_54;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 shadowVals_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_18.xyz / tmpvar_18.w);
  shadowVals_20.x = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_20.y = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_20.z = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_20.w = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_20, tmpvar_21.zzzz);
  mediump vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  mediump float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  mediump float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_19 = tmpvar_29;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_2);
  atten_1 = tmpvar_34;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_4;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 shadowVals_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_19.xyz / tmpvar_19.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  mediump vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  mediump float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  mediump float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_20 = tmpvar_30;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_31;
  tmpvar_31 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_2);
  atten_1 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37.x = xlv_TEXCOORD2.w;
  tmpvar_37.y = xlv_TEXCOORD2_1.w;
  tmpvar_37.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_38;
  lightDir_38 = tmpvar_37;
  mediump float atten_39;
  atten_39 = atten_1;
  mediump vec3 tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_40 = _LightColor0.xyz;
  highp vec3 n_42;
  n_42 = lightDir_38;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(n_42);
  tmpvar_41 = tmpvar_43;
  tmpvar_40 = (tmpvar_40 * atten_39);
  mediump vec3 color_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (tmpvar_41 - tmpvar_10);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_9, tmpvar_41), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_9, tmpvar_49), 0.0, 1.0);
  highp float tmpvar_54;
  highp float smoothness_55;
  smoothness_55 = tmpvar_5;
  tmpvar_54 = (1.0 - smoothness_55);
  perceptualRoughness_48 = tmpvar_54;
  highp float tmpvar_56;
  highp float perceptualRoughness_57;
  perceptualRoughness_57 = perceptualRoughness_48;
  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
  roughness_47 = tmpvar_56;
  mediump float tmpvar_58;
  tmpvar_58 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_58;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (tmpvar_41, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_59;
  tmpvar_59 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (((tmpvar_7 + 
    (tmpvar_59 * tmpvar_8)
  ) * tmpvar_40) * tmpvar_51);
  color_44 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = color_44;
  mediump vec4 xlat_varoutput_62;
  xlat_varoutput_62.xyz = tmpvar_61.xyz;
  xlat_varoutput_62.w = 1.0;
  gl_FragData[0] = xlat_varoutput_62;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_WorldToShadow[0] * tmpvar_18);
  lowp float tmpvar_20;
  highp vec4 shadowVals_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_19.xyz / tmpvar_19.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  mediump vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  mediump float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  mediump float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_20 = tmpvar_30;
  realtimeShadowAttenuation_13 = tmpvar_20;
  mediump float tmpvar_31;
  tmpvar_31 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  shadow_2 = tmpvar_31;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTexture0, ((tmpvar_12.xy / tmpvar_12.w) + 0.5));
  tmpvar_32 = tmpvar_33.w;
  lowp float tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_LightTextureB0, vec2(dot (tmpvar_12.xyz, tmpvar_12.xyz)));
  tmpvar_34 = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = (((
    float((tmpvar_12.z > 0.0))
   * tmpvar_32) * tmpvar_34) * shadow_2);
  atten_1 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37.x = xlv_TEXCOORD2.w;
  tmpvar_37.y = xlv_TEXCOORD2_1.w;
  tmpvar_37.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_38;
  lightDir_38 = tmpvar_37;
  mediump float atten_39;
  atten_39 = atten_1;
  mediump vec3 tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_40 = _LightColor0.xyz;
  highp vec3 n_42;
  n_42 = lightDir_38;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(n_42);
  tmpvar_41 = tmpvar_43;
  tmpvar_40 = (tmpvar_40 * atten_39);
  mediump vec3 color_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (tmpvar_41 - tmpvar_10);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_9, tmpvar_41), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_9, tmpvar_49), 0.0, 1.0);
  highp float tmpvar_54;
  highp float smoothness_55;
  smoothness_55 = tmpvar_5;
  tmpvar_54 = (1.0 - smoothness_55);
  perceptualRoughness_48 = tmpvar_54;
  highp float tmpvar_56;
  highp float perceptualRoughness_57;
  perceptualRoughness_57 = perceptualRoughness_48;
  tmpvar_56 = (perceptualRoughness_57 * perceptualRoughness_57);
  roughness_47 = tmpvar_56;
  mediump float tmpvar_58;
  tmpvar_58 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_58;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (tmpvar_41, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_59;
  tmpvar_59 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (((tmpvar_7 + 
    (tmpvar_59 * tmpvar_8)
  ) * tmpvar_40) * tmpvar_51);
  color_44 = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = color_44;
  mediump vec4 xlat_varoutput_62;
  xlat_varoutput_62.xyz = tmpvar_61.xyz;
  xlat_varoutput_62.w = 1.0;
  gl_FragData[0] = xlat_varoutput_62;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_13 = tmpvar_15;
  atten_1 = realtimeShadowAttenuation_13;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_2;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_9 = tmpvar_15;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_1;
  mediump vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_24 = (tmpvar_24 * atten_23);
  mediump vec3 color_25;
  highp float specularTerm_26;
  highp float a2_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_22 - normalize(xlv_TEXCOORD1));
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_8, lightDir_22), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_8, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  tmpvar_35 = (1.0 - smoothness_36);
  perceptualRoughness_29 = tmpvar_35;
  highp float tmpvar_37;
  highp float perceptualRoughness_38;
  perceptualRoughness_38 = perceptualRoughness_29;
  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
  roughness_28 = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = (roughness_28 * roughness_28);
  a2_27 = tmpvar_39;
  specularTerm_26 = ((roughness_28 / (
    (max (0.32, clamp (dot (lightDir_22, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
   * 
    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_40;
  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
  specularTerm_26 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (((tmpvar_6 + 
    (tmpvar_40 * tmpvar_7)
  ) * tmpvar_24) * tmpvar_32);
  color_25 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = color_25;
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_9 = tmpvar_15;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_1;
  mediump vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_24 = (tmpvar_24 * atten_23);
  mediump vec3 color_25;
  highp float specularTerm_26;
  highp float a2_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_22 - normalize(xlv_TEXCOORD1));
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_8, lightDir_22), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_8, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  tmpvar_35 = (1.0 - smoothness_36);
  perceptualRoughness_29 = tmpvar_35;
  highp float tmpvar_37;
  highp float perceptualRoughness_38;
  perceptualRoughness_38 = perceptualRoughness_29;
  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
  roughness_28 = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = (roughness_28 * roughness_28);
  a2_27 = tmpvar_39;
  specularTerm_26 = ((roughness_28 / (
    (max (0.32, clamp (dot (lightDir_22, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
   * 
    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_40;
  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
  specularTerm_26 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (((tmpvar_6 + 
    (tmpvar_40 * tmpvar_7)
  ) * tmpvar_24) * tmpvar_32);
  color_25 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = color_25;
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_15 = tmpvar_17;
  shadow_2 = realtimeShadowAttenuation_15;
  highp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_14).xy).w * shadow_2);
  atten_1 = tmpvar_22;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = c_3;
  mediump vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_11 = tmpvar_17;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_1;
  mediump vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_27 = (tmpvar_27 * atten_26);
  mediump vec3 color_28;
  highp float specularTerm_29;
  highp float a2_30;
  mediump float roughness_31;
  mediump float perceptualRoughness_32;
  highp vec3 tmpvar_33;
  highp vec3 inVec_34;
  inVec_34 = (lightDir_25 - normalize(xlv_TEXCOORD1));
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, lightDir_25), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  perceptualRoughness_32 = tmpvar_38;
  highp float tmpvar_40;
  highp float perceptualRoughness_41;
  perceptualRoughness_41 = perceptualRoughness_32;
  tmpvar_40 = (perceptualRoughness_41 * perceptualRoughness_41);
  roughness_31 = tmpvar_40;
  mediump float tmpvar_42;
  tmpvar_42 = (roughness_31 * roughness_31);
  a2_30 = tmpvar_42;
  specularTerm_29 = ((roughness_31 / (
    (max (0.32, clamp (dot (lightDir_25, tmpvar_33), 0.0, 1.0)) * (1.5 + roughness_31))
   * 
    (((tmpvar_37 * tmpvar_37) * (a2_30 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_43;
  tmpvar_43 = clamp (specularTerm_29, 0.0, 100.0);
  specularTerm_29 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (((tmpvar_7 + 
    (tmpvar_43 * tmpvar_8)
  ) * tmpvar_27) * tmpvar_35);
  color_28 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = color_28;
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_11 = tmpvar_17;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_1;
  mediump vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_27 = (tmpvar_27 * atten_26);
  mediump vec3 color_28;
  highp float specularTerm_29;
  highp float a2_30;
  mediump float roughness_31;
  mediump float perceptualRoughness_32;
  highp vec3 tmpvar_33;
  highp vec3 inVec_34;
  inVec_34 = (lightDir_25 - normalize(xlv_TEXCOORD1));
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, lightDir_25), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  perceptualRoughness_32 = tmpvar_38;
  highp float tmpvar_40;
  highp float perceptualRoughness_41;
  perceptualRoughness_41 = perceptualRoughness_32;
  tmpvar_40 = (perceptualRoughness_41 * perceptualRoughness_41);
  roughness_31 = tmpvar_40;
  mediump float tmpvar_42;
  tmpvar_42 = (roughness_31 * roughness_31);
  a2_30 = tmpvar_42;
  specularTerm_29 = ((roughness_31 / (
    (max (0.32, clamp (dot (lightDir_25, tmpvar_33), 0.0, 1.0)) * (1.5 + roughness_31))
   * 
    (((tmpvar_37 * tmpvar_37) * (a2_30 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_43;
  tmpvar_43 = clamp (specularTerm_29, 0.0, 100.0);
  specularTerm_29 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (((tmpvar_7 + 
    (tmpvar_43 * tmpvar_8)
  ) * tmpvar_27) * tmpvar_35);
  color_28 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = color_28;
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  mediump vec3 color_33;
  highp float specularTerm_34;
  highp float a2_35;
  mediump float roughness_36;
  mediump float perceptualRoughness_37;
  highp vec3 tmpvar_38;
  highp vec3 inVec_39;
  inVec_39 = (tmpvar_30 - tmpvar_10);
  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
    dot (inVec_39, inVec_39)
  )));
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  tmpvar_40 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, tmpvar_38), 0.0, 1.0);
  highp float tmpvar_43;
  highp float smoothness_44;
  smoothness_44 = tmpvar_5;
  tmpvar_43 = (1.0 - smoothness_44);
  perceptualRoughness_37 = tmpvar_43;
  highp float tmpvar_45;
  highp float perceptualRoughness_46;
  perceptualRoughness_46 = perceptualRoughness_37;
  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
  roughness_36 = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = (roughness_36 * roughness_36);
  a2_35 = tmpvar_47;
  specularTerm_34 = ((roughness_36 / (
    (max (0.32, clamp (dot (tmpvar_30, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
   * 
    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_48;
  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
  specularTerm_34 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_7 + 
    (tmpvar_48 * tmpvar_8)
  ) * tmpvar_29) * tmpvar_40);
  color_33 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_33;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = tmpvar_50.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  mediump vec3 color_33;
  highp float specularTerm_34;
  highp float a2_35;
  mediump float roughness_36;
  mediump float perceptualRoughness_37;
  highp vec3 tmpvar_38;
  highp vec3 inVec_39;
  inVec_39 = (tmpvar_30 - tmpvar_10);
  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
    dot (inVec_39, inVec_39)
  )));
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  tmpvar_40 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, tmpvar_38), 0.0, 1.0);
  highp float tmpvar_43;
  highp float smoothness_44;
  smoothness_44 = tmpvar_5;
  tmpvar_43 = (1.0 - smoothness_44);
  perceptualRoughness_37 = tmpvar_43;
  highp float tmpvar_45;
  highp float perceptualRoughness_46;
  perceptualRoughness_46 = perceptualRoughness_37;
  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
  roughness_36 = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = (roughness_36 * roughness_36);
  a2_35 = tmpvar_47;
  specularTerm_34 = ((roughness_36 / (
    (max (0.32, clamp (dot (tmpvar_30, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
   * 
    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_48;
  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
  specularTerm_34 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_7 + 
    (tmpvar_48 * tmpvar_8)
  ) * tmpvar_29) * tmpvar_40);
  color_33 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_33;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = tmpvar_50.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = (vec_16 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_19.xyz, 0.0);
  tmpvar_20 = tmpvar_21;
  shadowVals_17.x = dot (tmpvar_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 0.0;
  tmpvar_22.xyz = (vec_16 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_22.xyz, 0.0);
  tmpvar_23 = tmpvar_24;
  shadowVals_17.y = dot (tmpvar_23, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = (vec_16 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
  tmpvar_26 = tmpvar_27;
  shadowVals_17.z = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_16 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_17.w = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  shadow_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_39;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = c_4;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  mediump vec3 color_48;
  highp float specularTerm_49;
  highp float a2_50;
  mediump float roughness_51;
  mediump float perceptualRoughness_52;
  highp vec3 tmpvar_53;
  highp vec3 inVec_54;
  inVec_54 = (tmpvar_45 - tmpvar_10);
  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
    dot (inVec_54, inVec_54)
  )));
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_9, tmpvar_53), 0.0, 1.0);
  highp float tmpvar_58;
  highp float smoothness_59;
  smoothness_59 = tmpvar_5;
  tmpvar_58 = (1.0 - smoothness_59);
  perceptualRoughness_52 = tmpvar_58;
  highp float tmpvar_60;
  highp float perceptualRoughness_61;
  perceptualRoughness_61 = perceptualRoughness_52;
  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
  roughness_51 = tmpvar_60;
  mediump float tmpvar_62;
  tmpvar_62 = (roughness_51 * roughness_51);
  a2_50 = tmpvar_62;
  specularTerm_49 = ((roughness_51 / (
    (max (0.32, clamp (dot (tmpvar_45, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
   * 
    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_63;
  tmpvar_63 = clamp (specularTerm_49, 0.0, 100.0);
  specularTerm_49 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (((tmpvar_7 + 
    (tmpvar_63 * tmpvar_8)
  ) * tmpvar_44) * tmpvar_55);
  color_48 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_48;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (_LightTexture0, vec2(dot (tmpvar_12, tmpvar_12))).w * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  mediump vec3 color_48;
  highp float specularTerm_49;
  highp float a2_50;
  mediump float roughness_51;
  mediump float perceptualRoughness_52;
  highp vec3 tmpvar_53;
  highp vec3 inVec_54;
  inVec_54 = (tmpvar_45 - tmpvar_10);
  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
    dot (inVec_54, inVec_54)
  )));
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_9, tmpvar_53), 0.0, 1.0);
  highp float tmpvar_58;
  highp float smoothness_59;
  smoothness_59 = tmpvar_5;
  tmpvar_58 = (1.0 - smoothness_59);
  perceptualRoughness_52 = tmpvar_58;
  highp float tmpvar_60;
  highp float perceptualRoughness_61;
  perceptualRoughness_61 = perceptualRoughness_52;
  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
  roughness_51 = tmpvar_60;
  mediump float tmpvar_62;
  tmpvar_62 = (roughness_51 * roughness_51);
  a2_50 = tmpvar_62;
  specularTerm_49 = ((roughness_51 / (
    (max (0.32, clamp (dot (tmpvar_45, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
   * 
    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_63;
  tmpvar_63 = clamp (specularTerm_49, 0.0, 100.0);
  specularTerm_49 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (((tmpvar_7 + 
    (tmpvar_63 * tmpvar_8)
  ) * tmpvar_44) * tmpvar_55);
  color_48 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_48;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  mediump vec3 color_33;
  highp float specularTerm_34;
  highp float a2_35;
  mediump float roughness_36;
  mediump float perceptualRoughness_37;
  highp vec3 tmpvar_38;
  highp vec3 inVec_39;
  inVec_39 = (tmpvar_30 - tmpvar_10);
  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
    dot (inVec_39, inVec_39)
  )));
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  tmpvar_40 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, tmpvar_38), 0.0, 1.0);
  highp float tmpvar_43;
  highp float smoothness_44;
  smoothness_44 = tmpvar_5;
  tmpvar_43 = (1.0 - smoothness_44);
  perceptualRoughness_37 = tmpvar_43;
  highp float tmpvar_45;
  highp float perceptualRoughness_46;
  perceptualRoughness_46 = perceptualRoughness_37;
  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
  roughness_36 = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = (roughness_36 * roughness_36);
  a2_35 = tmpvar_47;
  specularTerm_34 = ((roughness_36 / (
    (max (0.32, clamp (dot (tmpvar_30, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
   * 
    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_48;
  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
  specularTerm_34 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_7 + 
    (tmpvar_48 * tmpvar_8)
  ) * tmpvar_29) * tmpvar_40);
  color_33 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_33;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = tmpvar_50.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureCube (_ShadowMapTexture, vec_17);
  highp vec4 vals_21;
  vals_21 = tmpvar_20;
  highp float tmpvar_22;
  tmpvar_22 = dot (vals_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_18 = tmpvar_22;
  mediump float tmpvar_23;
  if ((shadowVal_18 < mydist_19)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((tmpvar_23 + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26.x = xlv_TEXCOORD2.w;
  tmpvar_26.y = xlv_TEXCOORD2_1.w;
  tmpvar_26.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_27;
  lightDir_27 = tmpvar_26;
  mediump float atten_28;
  atten_28 = atten_1;
  mediump vec3 tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_29 = _LightColor0.xyz;
  highp vec3 n_31;
  n_31 = lightDir_27;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(n_31);
  tmpvar_30 = tmpvar_32;
  tmpvar_29 = (tmpvar_29 * atten_28);
  mediump vec3 color_33;
  highp float specularTerm_34;
  highp float a2_35;
  mediump float roughness_36;
  mediump float perceptualRoughness_37;
  highp vec3 tmpvar_38;
  highp vec3 inVec_39;
  inVec_39 = (tmpvar_30 - tmpvar_10);
  tmpvar_38 = (inVec_39 * inversesqrt(max (0.001, 
    dot (inVec_39, inVec_39)
  )));
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (dot (tmpvar_9, tmpvar_30), 0.0, 1.0);
  tmpvar_40 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_9, tmpvar_38), 0.0, 1.0);
  highp float tmpvar_43;
  highp float smoothness_44;
  smoothness_44 = tmpvar_5;
  tmpvar_43 = (1.0 - smoothness_44);
  perceptualRoughness_37 = tmpvar_43;
  highp float tmpvar_45;
  highp float perceptualRoughness_46;
  perceptualRoughness_46 = perceptualRoughness_37;
  tmpvar_45 = (perceptualRoughness_46 * perceptualRoughness_46);
  roughness_36 = tmpvar_45;
  mediump float tmpvar_47;
  tmpvar_47 = (roughness_36 * roughness_36);
  a2_35 = tmpvar_47;
  specularTerm_34 = ((roughness_36 / (
    (max (0.32, clamp (dot (tmpvar_30, tmpvar_38), 0.0, 1.0)) * (1.5 + roughness_36))
   * 
    (((tmpvar_42 * tmpvar_42) * (a2_35 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_48;
  tmpvar_48 = clamp (specularTerm_34, 0.0, 100.0);
  specularTerm_34 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (((tmpvar_7 + 
    (tmpvar_48 * tmpvar_8)
  ) * tmpvar_29) * tmpvar_40);
  color_33 = tmpvar_49;
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = color_33;
  mediump vec4 xlat_varoutput_51;
  xlat_varoutput_51.xyz = tmpvar_50.xyz;
  xlat_varoutput_51.w = 1.0;
  gl_FragData[0] = xlat_varoutput_51;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = (vec_16 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_19.xyz, 0.0);
  tmpvar_20 = tmpvar_21;
  shadowVals_17.x = dot (tmpvar_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 0.0;
  tmpvar_22.xyz = (vec_16 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_22.xyz, 0.0);
  tmpvar_23 = tmpvar_24;
  shadowVals_17.y = dot (tmpvar_23, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = (vec_16 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
  tmpvar_26 = tmpvar_27;
  shadowVals_17.z = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_16 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_17.w = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  shadow_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_39;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = c_4;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  mediump vec3 color_48;
  highp float specularTerm_49;
  highp float a2_50;
  mediump float roughness_51;
  mediump float perceptualRoughness_52;
  highp vec3 tmpvar_53;
  highp vec3 inVec_54;
  inVec_54 = (tmpvar_45 - tmpvar_10);
  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
    dot (inVec_54, inVec_54)
  )));
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_9, tmpvar_53), 0.0, 1.0);
  highp float tmpvar_58;
  highp float smoothness_59;
  smoothness_59 = tmpvar_5;
  tmpvar_58 = (1.0 - smoothness_59);
  perceptualRoughness_52 = tmpvar_58;
  highp float tmpvar_60;
  highp float perceptualRoughness_61;
  perceptualRoughness_61 = perceptualRoughness_52;
  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
  roughness_51 = tmpvar_60;
  mediump float tmpvar_62;
  tmpvar_62 = (roughness_51 * roughness_51);
  a2_50 = tmpvar_62;
  specularTerm_49 = ((roughness_51 / (
    (max (0.32, clamp (dot (tmpvar_45, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
   * 
    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_63;
  tmpvar_63 = clamp (specularTerm_49, 0.0, 100.0);
  specularTerm_49 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (((tmpvar_7 + 
    (tmpvar_63 * tmpvar_8)
  ) * tmpvar_44) * tmpvar_55);
  color_48 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_48;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_12;
  tmpvar_12 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec3 vec_17;
  vec_17 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_18;
  highp float mydist_19;
  mydist_19 = ((sqrt(
    dot (vec_17, vec_17)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = (vec_17 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_20.xyz, 0.0);
  tmpvar_21 = tmpvar_22;
  shadowVals_18.x = dot (tmpvar_21, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = (vec_17 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_23.xyz, 0.0);
  tmpvar_24 = tmpvar_25;
  shadowVals_18.y = dot (tmpvar_24, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 0.0;
  tmpvar_26.xyz = (vec_17 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_26.xyz, 0.0);
  tmpvar_27 = tmpvar_28;
  shadowVals_18.z = dot (tmpvar_27, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_29;
  tmpvar_29.w = 0.0;
  tmpvar_29.xyz = (vec_17 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_29.xyz, 0.0);
  tmpvar_30 = tmpvar_31;
  shadowVals_18.w = dot (tmpvar_30, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_32;
  tmpvar_32 = lessThan (shadowVals_18, vec4(mydist_19));
  mediump vec4 tmpvar_33;
  tmpvar_33 = _LightShadowData.xxxx;
  mediump float tmpvar_34;
  if (tmpvar_32.x) {
    tmpvar_34 = tmpvar_33.x;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_32.y) {
    tmpvar_35 = tmpvar_33.y;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_32.z) {
    tmpvar_36 = tmpvar_33.z;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_32.w) {
    tmpvar_37 = tmpvar_33.w;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump vec4 tmpvar_38;
  tmpvar_38.x = tmpvar_34;
  tmpvar_38.y = tmpvar_35;
  tmpvar_38.z = tmpvar_36;
  tmpvar_38.w = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = clamp ((dot (tmpvar_38, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_15), 0.0, 1.0);
  shadow_2 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_12, tmpvar_12))).w * textureCube (_LightTexture0, tmpvar_12).w) * shadow_2);
  atten_1 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41.x = xlv_TEXCOORD2.w;
  tmpvar_41.y = xlv_TEXCOORD2_1.w;
  tmpvar_41.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_42;
  lightDir_42 = tmpvar_41;
  mediump float atten_43;
  atten_43 = atten_1;
  mediump vec3 tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_44 = _LightColor0.xyz;
  highp vec3 n_46;
  n_46 = lightDir_42;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(n_46);
  tmpvar_45 = tmpvar_47;
  tmpvar_44 = (tmpvar_44 * atten_43);
  mediump vec3 color_48;
  highp float specularTerm_49;
  highp float a2_50;
  mediump float roughness_51;
  mediump float perceptualRoughness_52;
  highp vec3 tmpvar_53;
  highp vec3 inVec_54;
  inVec_54 = (tmpvar_45 - tmpvar_10);
  tmpvar_53 = (inVec_54 * inversesqrt(max (0.001, 
    dot (inVec_54, inVec_54)
  )));
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (tmpvar_9, tmpvar_45), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_9, tmpvar_53), 0.0, 1.0);
  highp float tmpvar_58;
  highp float smoothness_59;
  smoothness_59 = tmpvar_5;
  tmpvar_58 = (1.0 - smoothness_59);
  perceptualRoughness_52 = tmpvar_58;
  highp float tmpvar_60;
  highp float perceptualRoughness_61;
  perceptualRoughness_61 = perceptualRoughness_52;
  tmpvar_60 = (perceptualRoughness_61 * perceptualRoughness_61);
  roughness_51 = tmpvar_60;
  mediump float tmpvar_62;
  tmpvar_62 = (roughness_51 * roughness_51);
  a2_50 = tmpvar_62;
  specularTerm_49 = ((roughness_51 / (
    (max (0.32, clamp (dot (tmpvar_45, tmpvar_53), 0.0, 1.0)) * (1.5 + roughness_51))
   * 
    (((tmpvar_57 * tmpvar_57) * (a2_50 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_63;
  tmpvar_63 = clamp (specularTerm_49, 0.0, 100.0);
  specularTerm_49 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (((tmpvar_7 + 
    (tmpvar_63 * tmpvar_8)
  ) * tmpvar_44) * tmpvar_55);
  color_48 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_48;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = tmpvar_65.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp float tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w;
  atten_2 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = xlv_TEXCOORD2.w;
  tmpvar_13.y = xlv_TEXCOORD2_1.w;
  tmpvar_13.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_14;
  lightDir_14 = tmpvar_13;
  mediump float atten_15;
  atten_15 = atten_2;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = _LightColor0.xyz;
  highp vec3 n_18;
  n_18 = lightDir_14;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(n_18);
  tmpvar_17 = tmpvar_19;
  tmpvar_16 = (tmpvar_16 * atten_15);
  mediump vec3 color_20;
  highp float specularTerm_21;
  highp float a2_22;
  mediump float roughness_23;
  mediump float perceptualRoughness_24;
  highp vec3 tmpvar_25;
  highp vec3 inVec_26;
  inVec_26 = (tmpvar_17 - normalize(xlv_TEXCOORD1));
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_10, tmpvar_17), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_25), 0.0, 1.0);
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  perceptualRoughness_24 = tmpvar_30;
  highp float tmpvar_32;
  highp float perceptualRoughness_33;
  perceptualRoughness_33 = perceptualRoughness_24;
  tmpvar_32 = (perceptualRoughness_33 * perceptualRoughness_33);
  roughness_23 = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = (roughness_23 * roughness_23);
  a2_22 = tmpvar_34;
  specularTerm_21 = ((roughness_23 / (
    (max (0.32, clamp (dot (tmpvar_17, tmpvar_25), 0.0, 1.0)) * (1.5 + roughness_23))
   * 
    (((tmpvar_29 * tmpvar_29) * (a2_22 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_35;
  tmpvar_35 = clamp (specularTerm_21, 0.0, 100.0);
  specularTerm_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (((tmpvar_8 + 
    (tmpvar_35 * tmpvar_9)
  ) * tmpvar_16) * tmpvar_27);
  color_20 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = color_20;
  c_1.w = tmpvar_37.w;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_20 * vec3(tmpvar_38));
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp float tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w;
  atten_2 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = xlv_TEXCOORD2.w;
  tmpvar_13.y = xlv_TEXCOORD2_1.w;
  tmpvar_13.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_14;
  lightDir_14 = tmpvar_13;
  mediump float atten_15;
  atten_15 = atten_2;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = _LightColor0.xyz;
  highp vec3 n_18;
  n_18 = lightDir_14;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(n_18);
  tmpvar_17 = tmpvar_19;
  tmpvar_16 = (tmpvar_16 * atten_15);
  mediump vec3 color_20;
  highp float specularTerm_21;
  highp float a2_22;
  mediump float roughness_23;
  mediump float perceptualRoughness_24;
  highp vec3 tmpvar_25;
  highp vec3 inVec_26;
  inVec_26 = (tmpvar_17 - normalize(xlv_TEXCOORD1));
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_10, tmpvar_17), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_25), 0.0, 1.0);
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  perceptualRoughness_24 = tmpvar_30;
  highp float tmpvar_32;
  highp float perceptualRoughness_33;
  perceptualRoughness_33 = perceptualRoughness_24;
  tmpvar_32 = (perceptualRoughness_33 * perceptualRoughness_33);
  roughness_23 = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = (roughness_23 * roughness_23);
  a2_22 = tmpvar_34;
  specularTerm_21 = ((roughness_23 / (
    (max (0.32, clamp (dot (tmpvar_17, tmpvar_25), 0.0, 1.0)) * (1.5 + roughness_23))
   * 
    (((tmpvar_29 * tmpvar_29) * (a2_22 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_35;
  tmpvar_35 = clamp (specularTerm_21, 0.0, 100.0);
  specularTerm_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (((tmpvar_8 + 
    (tmpvar_35 * tmpvar_9)
  ) * tmpvar_16) * tmpvar_27);
  color_20 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = color_20;
  c_1.w = tmpvar_37.w;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_20 * vec3(tmpvar_38));
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_18;
  tmpvar_18 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * tmpvar_6) * (tmpvar_6 * tmpvar_6));
  mediump float specular_8;
  highp float smoothness_9;
  smoothness_9 = tmpvar_4;
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_7;
  tmpvar_10.y = (1.0 - smoothness_9);
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (unity_NHxRoughness, tmpvar_10).w * 16.0);
  specular_8 = tmpvar_11;
  c_1 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_8 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * _LightColor0.xyz);
  c_1 = (c_1 * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0));
  c_1 = (c_1 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = c_1;
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_10;
  lightDir_10 = tmpvar_9;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump vec3 color_12;
  highp float specularTerm_13;
  highp float a2_14;
  mediump float roughness_15;
  mediump float perceptualRoughness_16;
  highp vec3 tmpvar_17;
  highp vec3 inVec_18;
  inVec_18 = (lightDir_10 - normalize(xlv_TEXCOORD1));
  tmpvar_17 = (inVec_18 * inversesqrt(max (0.001, 
    dot (inVec_18, inVec_18)
  )));
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_8, lightDir_10), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_17), 0.0, 1.0);
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_4;
  tmpvar_22 = (1.0 - smoothness_23);
  perceptualRoughness_16 = tmpvar_22;
  highp float tmpvar_24;
  highp float perceptualRoughness_25;
  perceptualRoughness_25 = perceptualRoughness_16;
  tmpvar_24 = (perceptualRoughness_25 * perceptualRoughness_25);
  roughness_15 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (roughness_15 * roughness_15);
  a2_14 = tmpvar_26;
  specularTerm_13 = ((roughness_15 / (
    (max (0.32, clamp (dot (lightDir_10, tmpvar_17), 0.0, 1.0)) * (1.5 + roughness_15))
   * 
    (((tmpvar_21 * tmpvar_21) * (a2_14 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_27;
  tmpvar_27 = clamp (specularTerm_13, 0.0, 100.0);
  specularTerm_13 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (((tmpvar_6 + 
    (tmpvar_27 * tmpvar_7)
  ) * tmpvar_11) * tmpvar_19);
  color_12 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = color_12;
  c_1.w = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_12 * vec3(tmpvar_30));
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_10;
  lightDir_10 = tmpvar_9;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump vec3 color_12;
  highp float specularTerm_13;
  highp float a2_14;
  mediump float roughness_15;
  mediump float perceptualRoughness_16;
  highp vec3 tmpvar_17;
  highp vec3 inVec_18;
  inVec_18 = (lightDir_10 - normalize(xlv_TEXCOORD1));
  tmpvar_17 = (inVec_18 * inversesqrt(max (0.001, 
    dot (inVec_18, inVec_18)
  )));
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_8, lightDir_10), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_17), 0.0, 1.0);
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_4;
  tmpvar_22 = (1.0 - smoothness_23);
  perceptualRoughness_16 = tmpvar_22;
  highp float tmpvar_24;
  highp float perceptualRoughness_25;
  perceptualRoughness_25 = perceptualRoughness_16;
  tmpvar_24 = (perceptualRoughness_25 * perceptualRoughness_25);
  roughness_15 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = (roughness_15 * roughness_15);
  a2_14 = tmpvar_26;
  specularTerm_13 = ((roughness_15 / (
    (max (0.32, clamp (dot (lightDir_10, tmpvar_17), 0.0, 1.0)) * (1.5 + roughness_15))
   * 
    (((tmpvar_21 * tmpvar_21) * (a2_14 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_27;
  tmpvar_27 = clamp (specularTerm_13, 0.0, 100.0);
  specularTerm_13 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = (((tmpvar_6 + 
    (tmpvar_27 * tmpvar_7)
  ) * tmpvar_11) * tmpvar_19);
  color_12 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = color_12;
  c_1.w = tmpvar_29.w;
  highp float tmpvar_30;
  tmpvar_30 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_12 * vec3(tmpvar_30));
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_15 = tmpvar_16.w;
  lowp float tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_17 = tmpvar_18.w;
  highp float tmpvar_19;
  tmpvar_19 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_15) * tmpvar_17);
  atten_1 = tmpvar_19;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_3;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11);
  lowp float tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_12 = tmpvar_13.w;
  lowp float tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_14 = tmpvar_15.w;
  highp float tmpvar_16;
  tmpvar_16 = ((float(
    (lightCoord_3.z > 0.0)
  ) * tmpvar_12) * tmpvar_14);
  atten_2 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = xlv_TEXCOORD2.w;
  tmpvar_17.y = xlv_TEXCOORD2_1.w;
  tmpvar_17.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_18;
  lightDir_18 = tmpvar_17;
  mediump float atten_19;
  atten_19 = atten_2;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = _LightColor0.xyz;
  highp vec3 n_22;
  n_22 = lightDir_18;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(n_22);
  tmpvar_21 = tmpvar_23;
  tmpvar_20 = (tmpvar_20 * atten_19);
  mediump vec3 color_24;
  highp float specularTerm_25;
  highp float a2_26;
  mediump float roughness_27;
  mediump float perceptualRoughness_28;
  highp vec3 tmpvar_29;
  highp vec3 inVec_30;
  inVec_30 = (tmpvar_21 - normalize(xlv_TEXCOORD1));
  tmpvar_29 = (inVec_30 * inversesqrt(max (0.001, 
    dot (inVec_30, inVec_30)
  )));
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_10, tmpvar_21), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_10, tmpvar_29), 0.0, 1.0);
  highp float tmpvar_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_6;
  tmpvar_34 = (1.0 - smoothness_35);
  perceptualRoughness_28 = tmpvar_34;
  highp float tmpvar_36;
  highp float perceptualRoughness_37;
  perceptualRoughness_37 = perceptualRoughness_28;
  tmpvar_36 = (perceptualRoughness_37 * perceptualRoughness_37);
  roughness_27 = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = (roughness_27 * roughness_27);
  a2_26 = tmpvar_38;
  specularTerm_25 = ((roughness_27 / (
    (max (0.32, clamp (dot (tmpvar_21, tmpvar_29), 0.0, 1.0)) * (1.5 + roughness_27))
   * 
    (((tmpvar_33 * tmpvar_33) * (a2_26 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_39;
  tmpvar_39 = clamp (specularTerm_25, 0.0, 100.0);
  specularTerm_25 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = (((tmpvar_8 + 
    (tmpvar_39 * tmpvar_9)
  ) * tmpvar_20) * tmpvar_31);
  color_24 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_24;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_24 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11);
  lowp float tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_12 = tmpvar_13.w;
  lowp float tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_14 = tmpvar_15.w;
  highp float tmpvar_16;
  tmpvar_16 = ((float(
    (lightCoord_3.z > 0.0)
  ) * tmpvar_12) * tmpvar_14);
  atten_2 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = xlv_TEXCOORD2.w;
  tmpvar_17.y = xlv_TEXCOORD2_1.w;
  tmpvar_17.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_18;
  lightDir_18 = tmpvar_17;
  mediump float atten_19;
  atten_19 = atten_2;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_20 = _LightColor0.xyz;
  highp vec3 n_22;
  n_22 = lightDir_18;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(n_22);
  tmpvar_21 = tmpvar_23;
  tmpvar_20 = (tmpvar_20 * atten_19);
  mediump vec3 color_24;
  highp float specularTerm_25;
  highp float a2_26;
  mediump float roughness_27;
  mediump float perceptualRoughness_28;
  highp vec3 tmpvar_29;
  highp vec3 inVec_30;
  inVec_30 = (tmpvar_21 - normalize(xlv_TEXCOORD1));
  tmpvar_29 = (inVec_30 * inversesqrt(max (0.001, 
    dot (inVec_30, inVec_30)
  )));
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_10, tmpvar_21), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_10, tmpvar_29), 0.0, 1.0);
  highp float tmpvar_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_6;
  tmpvar_34 = (1.0 - smoothness_35);
  perceptualRoughness_28 = tmpvar_34;
  highp float tmpvar_36;
  highp float perceptualRoughness_37;
  perceptualRoughness_37 = perceptualRoughness_28;
  tmpvar_36 = (perceptualRoughness_37 * perceptualRoughness_37);
  roughness_27 = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = (roughness_27 * roughness_27);
  a2_26 = tmpvar_38;
  specularTerm_25 = ((roughness_27 / (
    (max (0.32, clamp (dot (tmpvar_21, tmpvar_29), 0.0, 1.0)) * (1.5 + roughness_27))
   * 
    (((tmpvar_33 * tmpvar_33) * (a2_26 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_39;
  tmpvar_39 = clamp (specularTerm_25, 0.0, 100.0);
  specularTerm_25 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = (((tmpvar_8 + 
    (tmpvar_39 * tmpvar_9)
  ) * tmpvar_20) * tmpvar_31);
  color_24 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_24;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_24 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w);
  atten_2 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = xlv_TEXCOORD2.w;
  tmpvar_13.y = xlv_TEXCOORD2_1.w;
  tmpvar_13.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_14;
  lightDir_14 = tmpvar_13;
  mediump float atten_15;
  atten_15 = atten_2;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = _LightColor0.xyz;
  highp vec3 n_18;
  n_18 = lightDir_14;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(n_18);
  tmpvar_17 = tmpvar_19;
  tmpvar_16 = (tmpvar_16 * atten_15);
  mediump vec3 color_20;
  highp float specularTerm_21;
  highp float a2_22;
  mediump float roughness_23;
  mediump float perceptualRoughness_24;
  highp vec3 tmpvar_25;
  highp vec3 inVec_26;
  inVec_26 = (tmpvar_17 - normalize(xlv_TEXCOORD1));
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_10, tmpvar_17), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_25), 0.0, 1.0);
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  perceptualRoughness_24 = tmpvar_30;
  highp float tmpvar_32;
  highp float perceptualRoughness_33;
  perceptualRoughness_33 = perceptualRoughness_24;
  tmpvar_32 = (perceptualRoughness_33 * perceptualRoughness_33);
  roughness_23 = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = (roughness_23 * roughness_23);
  a2_22 = tmpvar_34;
  specularTerm_21 = ((roughness_23 / (
    (max (0.32, clamp (dot (tmpvar_17, tmpvar_25), 0.0, 1.0)) * (1.5 + roughness_23))
   * 
    (((tmpvar_29 * tmpvar_29) * (a2_22 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_35;
  tmpvar_35 = clamp (specularTerm_21, 0.0, 100.0);
  specularTerm_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (((tmpvar_8 + 
    (tmpvar_35 * tmpvar_9)
  ) * tmpvar_16) * tmpvar_27);
  color_20 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = color_20;
  c_1.w = tmpvar_37.w;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_20 * vec3(tmpvar_38));
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w);
  atten_2 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = xlv_TEXCOORD2.w;
  tmpvar_13.y = xlv_TEXCOORD2_1.w;
  tmpvar_13.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_14;
  lightDir_14 = tmpvar_13;
  mediump float atten_15;
  atten_15 = atten_2;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_16 = _LightColor0.xyz;
  highp vec3 n_18;
  n_18 = lightDir_14;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(n_18);
  tmpvar_17 = tmpvar_19;
  tmpvar_16 = (tmpvar_16 * atten_15);
  mediump vec3 color_20;
  highp float specularTerm_21;
  highp float a2_22;
  mediump float roughness_23;
  mediump float perceptualRoughness_24;
  highp vec3 tmpvar_25;
  highp vec3 inVec_26;
  inVec_26 = (tmpvar_17 - normalize(xlv_TEXCOORD1));
  tmpvar_25 = (inVec_26 * inversesqrt(max (0.001, 
    dot (inVec_26, inVec_26)
  )));
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_10, tmpvar_17), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_25), 0.0, 1.0);
  highp float tmpvar_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_6;
  tmpvar_30 = (1.0 - smoothness_31);
  perceptualRoughness_24 = tmpvar_30;
  highp float tmpvar_32;
  highp float perceptualRoughness_33;
  perceptualRoughness_33 = perceptualRoughness_24;
  tmpvar_32 = (perceptualRoughness_33 * perceptualRoughness_33);
  roughness_23 = tmpvar_32;
  mediump float tmpvar_34;
  tmpvar_34 = (roughness_23 * roughness_23);
  a2_22 = tmpvar_34;
  specularTerm_21 = ((roughness_23 / (
    (max (0.32, clamp (dot (tmpvar_17, tmpvar_25), 0.0, 1.0)) * (1.5 + roughness_23))
   * 
    (((tmpvar_29 * tmpvar_29) * (a2_22 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_35;
  tmpvar_35 = clamp (specularTerm_21, 0.0, 100.0);
  specularTerm_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (((tmpvar_8 + 
    (tmpvar_35 * tmpvar_9)
  ) * tmpvar_16) * tmpvar_27);
  color_20 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = color_20;
  c_1.w = tmpvar_37.w;
  highp float tmpvar_38;
  tmpvar_38 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_20 * vec3(tmpvar_38));
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_18;
  tmpvar_18 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_13).xy).w;
  atten_1 = tmpvar_14;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_2 = (c_2 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = c_2;
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  highp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w;
  atten_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_2;
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_16;
  highp float specularTerm_17;
  highp float a2_18;
  mediump float roughness_19;
  mediump float perceptualRoughness_20;
  highp vec3 tmpvar_21;
  highp vec3 inVec_22;
  inVec_22 = (lightDir_13 - normalize(xlv_TEXCOORD1));
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_9, lightDir_13), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_9, tmpvar_21), 0.0, 1.0);
  highp float tmpvar_26;
  highp float smoothness_27;
  smoothness_27 = tmpvar_5;
  tmpvar_26 = (1.0 - smoothness_27);
  perceptualRoughness_20 = tmpvar_26;
  highp float tmpvar_28;
  highp float perceptualRoughness_29;
  perceptualRoughness_29 = perceptualRoughness_20;
  tmpvar_28 = (perceptualRoughness_29 * perceptualRoughness_29);
  roughness_19 = tmpvar_28;
  mediump float tmpvar_30;
  tmpvar_30 = (roughness_19 * roughness_19);
  a2_18 = tmpvar_30;
  specularTerm_17 = ((roughness_19 / (
    (max (0.32, clamp (dot (lightDir_13, tmpvar_21), 0.0, 1.0)) * (1.5 + roughness_19))
   * 
    (((tmpvar_25 * tmpvar_25) * (a2_18 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_31;
  tmpvar_31 = clamp (specularTerm_17, 0.0, 100.0);
  specularTerm_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (((tmpvar_7 + 
    (tmpvar_31 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_23);
  color_16 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = color_16;
  c_1.w = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_16 * vec3(tmpvar_34));
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = c_1.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 n_14;
  n_14 = (tmpvar_8.xyz - _WorldSpaceCameraPos);
  tmpvar_13 = n_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  highp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w;
  atten_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12.x = xlv_TEXCOORD2.w;
  tmpvar_12.y = xlv_TEXCOORD2_1.w;
  tmpvar_12.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_13;
  lightDir_13 = tmpvar_12;
  mediump float atten_14;
  atten_14 = atten_2;
  mediump vec3 tmpvar_15;
  tmpvar_15 = _LightColor0.xyz;
  tmpvar_15 = (tmpvar_15 * atten_14);
  mediump vec3 color_16;
  highp float specularTerm_17;
  highp float a2_18;
  mediump float roughness_19;
  mediump float perceptualRoughness_20;
  highp vec3 tmpvar_21;
  highp vec3 inVec_22;
  inVec_22 = (lightDir_13 - normalize(xlv_TEXCOORD1));
  tmpvar_21 = (inVec_22 * inversesqrt(max (0.001, 
    dot (inVec_22, inVec_22)
  )));
  mediump float tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_9, lightDir_13), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_9, tmpvar_21), 0.0, 1.0);
  highp float tmpvar_26;
  highp float smoothness_27;
  smoothness_27 = tmpvar_5;
  tmpvar_26 = (1.0 - smoothness_27);
  perceptualRoughness_20 = tmpvar_26;
  highp float tmpvar_28;
  highp float perceptualRoughness_29;
  perceptualRoughness_29 = perceptualRoughness_20;
  tmpvar_28 = (perceptualRoughness_29 * perceptualRoughness_29);
  roughness_19 = tmpvar_28;
  mediump float tmpvar_30;
  tmpvar_30 = (roughness_19 * roughness_19);
  a2_18 = tmpvar_30;
  specularTerm_17 = ((roughness_19 / (
    (max (0.32, clamp (dot (lightDir_13, tmpvar_21), 0.0, 1.0)) * (1.5 + roughness_19))
   * 
    (((tmpvar_25 * tmpvar_25) * (a2_18 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_31;
  tmpvar_31 = clamp (specularTerm_17, 0.0, 100.0);
  specularTerm_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (((tmpvar_7 + 
    (tmpvar_31 * tmpvar_8)
  ) * tmpvar_15) * tmpvar_23);
  color_16 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = color_16;
  c_1.w = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_16 * vec3(tmpvar_34));
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = c_1.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, tmpvar_18);
  mediump float tmpvar_21;
  if ((tmpvar_20.x < (tmpvar_18.z / tmpvar_18.w))) {
    tmpvar_21 = _LightShadowData.x;
  } else {
    tmpvar_21 = 1.0;
  };
  tmpvar_19 = tmpvar_21;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_22 = tmpvar_23.w;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_24 = tmpvar_25.w;
  highp float tmpvar_26;
  tmpvar_26 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_22) * tmpvar_24) * shadow_2);
  atten_1 = tmpvar_26;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_4;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  realtimeShadowAttenuation_14 = 1.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_WorldToShadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, tmpvar_20);
  mediump float tmpvar_23;
  if ((tmpvar_22.x < (tmpvar_20.z / tmpvar_20.w))) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  tmpvar_21 = tmpvar_23;
  realtimeShadowAttenuation_14 = tmpvar_21;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  shadow_3 = tmpvar_24;
  lowp float tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((tmpvar_13.xy / tmpvar_13.w) + 0.5));
  tmpvar_25 = tmpvar_26.w;
  lowp float tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (tmpvar_13.xyz, tmpvar_13.xyz)));
  tmpvar_27 = tmpvar_28.w;
  highp float tmpvar_29;
  tmpvar_29 = (((
    float((tmpvar_13.z > 0.0))
   * tmpvar_25) * tmpvar_27) * shadow_3);
  atten_2 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30.x = xlv_TEXCOORD2.w;
  tmpvar_30.y = xlv_TEXCOORD2_1.w;
  tmpvar_30.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_31;
  lightDir_31 = tmpvar_30;
  mediump float atten_32;
  atten_32 = atten_2;
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = _LightColor0.xyz;
  highp vec3 n_35;
  n_35 = lightDir_31;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(n_35);
  tmpvar_34 = tmpvar_36;
  tmpvar_33 = (tmpvar_33 * atten_32);
  mediump vec3 color_37;
  highp float specularTerm_38;
  highp float a2_39;
  mediump float roughness_40;
  mediump float perceptualRoughness_41;
  highp vec3 tmpvar_42;
  highp vec3 inVec_43;
  inVec_43 = (tmpvar_34 - tmpvar_11);
  tmpvar_42 = (inVec_43 * inversesqrt(max (0.001, 
    dot (inVec_43, inVec_43)
  )));
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (tmpvar_10, tmpvar_42), 0.0, 1.0);
  highp float tmpvar_47;
  highp float smoothness_48;
  smoothness_48 = tmpvar_6;
  tmpvar_47 = (1.0 - smoothness_48);
  perceptualRoughness_41 = tmpvar_47;
  highp float tmpvar_49;
  highp float perceptualRoughness_50;
  perceptualRoughness_50 = perceptualRoughness_41;
  tmpvar_49 = (perceptualRoughness_50 * perceptualRoughness_50);
  roughness_40 = tmpvar_49;
  mediump float tmpvar_51;
  tmpvar_51 = (roughness_40 * roughness_40);
  a2_39 = tmpvar_51;
  specularTerm_38 = ((roughness_40 / (
    (max (0.32, clamp (dot (tmpvar_34, tmpvar_42), 0.0, 1.0)) * (1.5 + roughness_40))
   * 
    (((tmpvar_46 * tmpvar_46) * (a2_39 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_52;
  tmpvar_52 = clamp (specularTerm_38, 0.0, 100.0);
  specularTerm_38 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (((tmpvar_8 + 
    (tmpvar_52 * tmpvar_9)
  ) * tmpvar_33) * tmpvar_44);
  color_37 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = color_37;
  c_1.w = tmpvar_54.w;
  highp float tmpvar_55;
  tmpvar_55 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_37 * vec3(tmpvar_55));
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  realtimeShadowAttenuation_14 = 1.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_WorldToShadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, tmpvar_20);
  mediump float tmpvar_23;
  if ((tmpvar_22.x < (tmpvar_20.z / tmpvar_20.w))) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  tmpvar_21 = tmpvar_23;
  realtimeShadowAttenuation_14 = tmpvar_21;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  shadow_3 = tmpvar_24;
  lowp float tmpvar_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((tmpvar_13.xy / tmpvar_13.w) + 0.5));
  tmpvar_25 = tmpvar_26.w;
  lowp float tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (tmpvar_13.xyz, tmpvar_13.xyz)));
  tmpvar_27 = tmpvar_28.w;
  highp float tmpvar_29;
  tmpvar_29 = (((
    float((tmpvar_13.z > 0.0))
   * tmpvar_25) * tmpvar_27) * shadow_3);
  atten_2 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30.x = xlv_TEXCOORD2.w;
  tmpvar_30.y = xlv_TEXCOORD2_1.w;
  tmpvar_30.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_31;
  lightDir_31 = tmpvar_30;
  mediump float atten_32;
  atten_32 = atten_2;
  mediump vec3 tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_33 = _LightColor0.xyz;
  highp vec3 n_35;
  n_35 = lightDir_31;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(n_35);
  tmpvar_34 = tmpvar_36;
  tmpvar_33 = (tmpvar_33 * atten_32);
  mediump vec3 color_37;
  highp float specularTerm_38;
  highp float a2_39;
  mediump float roughness_40;
  mediump float perceptualRoughness_41;
  highp vec3 tmpvar_42;
  highp vec3 inVec_43;
  inVec_43 = (tmpvar_34 - tmpvar_11);
  tmpvar_42 = (inVec_43 * inversesqrt(max (0.001, 
    dot (inVec_43, inVec_43)
  )));
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (tmpvar_10, tmpvar_42), 0.0, 1.0);
  highp float tmpvar_47;
  highp float smoothness_48;
  smoothness_48 = tmpvar_6;
  tmpvar_47 = (1.0 - smoothness_48);
  perceptualRoughness_41 = tmpvar_47;
  highp float tmpvar_49;
  highp float perceptualRoughness_50;
  perceptualRoughness_50 = perceptualRoughness_41;
  tmpvar_49 = (perceptualRoughness_50 * perceptualRoughness_50);
  roughness_40 = tmpvar_49;
  mediump float tmpvar_51;
  tmpvar_51 = (roughness_40 * roughness_40);
  a2_39 = tmpvar_51;
  specularTerm_38 = ((roughness_40 / (
    (max (0.32, clamp (dot (tmpvar_34, tmpvar_42), 0.0, 1.0)) * (1.5 + roughness_40))
   * 
    (((tmpvar_46 * tmpvar_46) * (a2_39 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_52;
  tmpvar_52 = clamp (specularTerm_38, 0.0, 100.0);
  specularTerm_38 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (((tmpvar_8 + 
    (tmpvar_52 * tmpvar_9)
  ) * tmpvar_33) * tmpvar_44);
  color_37 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = color_37;
  c_1.w = tmpvar_54.w;
  highp float tmpvar_55;
  tmpvar_55 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_37 * vec3(tmpvar_55));
  mediump vec4 xlat_varoutput_56;
  xlat_varoutput_56.xyz = c_1.xyz;
  xlat_varoutput_56.w = 1.0;
  gl_FragData[0] = xlat_varoutput_56;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 shadowVals_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_18.xyz / tmpvar_18.w);
  shadowVals_20.x = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_20.y = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_20.z = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_20.w = texture2D (_ShadowMapTexture, (tmpvar_21.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_20, tmpvar_21.zzzz);
  mediump vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  mediump float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  mediump float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_19 = tmpvar_29;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_30 = tmpvar_31.w;
  lowp float tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_32 = tmpvar_33.w;
  highp float tmpvar_34;
  tmpvar_34 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_30) * tmpvar_32) * shadow_2);
  atten_1 = tmpvar_34;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_4;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  realtimeShadowAttenuation_14 = 1.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_WorldToShadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  highp vec4 shadowVals_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_20.xyz / tmpvar_20.w);
  shadowVals_22.x = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_22.y = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_22.z = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_22.w = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_22, tmpvar_23.zzzz);
  mediump vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  mediump float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_21 = tmpvar_31;
  realtimeShadowAttenuation_14 = tmpvar_21;
  mediump float tmpvar_32;
  tmpvar_32 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  shadow_3 = tmpvar_32;
  lowp float tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightTexture0, ((tmpvar_13.xy / tmpvar_13.w) + 0.5));
  tmpvar_33 = tmpvar_34.w;
  lowp float tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_LightTextureB0, vec2(dot (tmpvar_13.xyz, tmpvar_13.xyz)));
  tmpvar_35 = tmpvar_36.w;
  highp float tmpvar_37;
  tmpvar_37 = (((
    float((tmpvar_13.z > 0.0))
   * tmpvar_33) * tmpvar_35) * shadow_3);
  atten_2 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38.x = xlv_TEXCOORD2.w;
  tmpvar_38.y = xlv_TEXCOORD2_1.w;
  tmpvar_38.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_39;
  lightDir_39 = tmpvar_38;
  mediump float atten_40;
  atten_40 = atten_2;
  mediump vec3 tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_41 = _LightColor0.xyz;
  highp vec3 n_43;
  n_43 = lightDir_39;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(n_43);
  tmpvar_42 = tmpvar_44;
  tmpvar_41 = (tmpvar_41 * atten_40);
  mediump vec3 color_45;
  highp float specularTerm_46;
  highp float a2_47;
  mediump float roughness_48;
  mediump float perceptualRoughness_49;
  highp vec3 tmpvar_50;
  highp vec3 inVec_51;
  inVec_51 = (tmpvar_42 - tmpvar_11);
  tmpvar_50 = (inVec_51 * inversesqrt(max (0.001, 
    dot (inVec_51, inVec_51)
  )));
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_42), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (dot (tmpvar_10, tmpvar_50), 0.0, 1.0);
  highp float tmpvar_55;
  highp float smoothness_56;
  smoothness_56 = tmpvar_6;
  tmpvar_55 = (1.0 - smoothness_56);
  perceptualRoughness_49 = tmpvar_55;
  highp float tmpvar_57;
  highp float perceptualRoughness_58;
  perceptualRoughness_58 = perceptualRoughness_49;
  tmpvar_57 = (perceptualRoughness_58 * perceptualRoughness_58);
  roughness_48 = tmpvar_57;
  mediump float tmpvar_59;
  tmpvar_59 = (roughness_48 * roughness_48);
  a2_47 = tmpvar_59;
  specularTerm_46 = ((roughness_48 / (
    (max (0.32, clamp (dot (tmpvar_42, tmpvar_50), 0.0, 1.0)) * (1.5 + roughness_48))
   * 
    (((tmpvar_54 * tmpvar_54) * (a2_47 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_60;
  tmpvar_60 = clamp (specularTerm_46, 0.0, 100.0);
  specularTerm_46 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (((tmpvar_8 + 
    (tmpvar_60 * tmpvar_9)
  ) * tmpvar_41) * tmpvar_52);
  color_45 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = color_45;
  c_1.w = tmpvar_62.w;
  highp float tmpvar_63;
  tmpvar_63 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_45 * vec3(tmpvar_63));
  mediump vec4 xlat_varoutput_64;
  xlat_varoutput_64.xyz = c_1.xyz;
  xlat_varoutput_64.w = 1.0;
  gl_FragData[0] = xlat_varoutput_64;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_14;
  highp vec4 v_15;
  v_15.x = unity_MatrixV[0].z;
  v_15.y = unity_MatrixV[1].z;
  v_15.z = unity_MatrixV[2].z;
  v_15.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_15.xyz), sqrt(dot (tmpvar_16, tmpvar_16)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  realtimeShadowAttenuation_14 = 1.0;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_WorldToShadow[0] * tmpvar_19);
  lowp float tmpvar_21;
  highp vec4 shadowVals_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_20.xyz / tmpvar_20.w);
  shadowVals_22.x = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_22.y = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_22.z = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_22.w = texture2D (_ShadowMapTexture, (tmpvar_23.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_22, tmpvar_23.zzzz);
  mediump vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  mediump float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  mediump float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  mediump float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  mediump float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  mediump float tmpvar_31;
  tmpvar_31 = dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_21 = tmpvar_31;
  realtimeShadowAttenuation_14 = tmpvar_21;
  mediump float tmpvar_32;
  tmpvar_32 = clamp ((realtimeShadowAttenuation_14 + tmpvar_17), 0.0, 1.0);
  shadow_3 = tmpvar_32;
  lowp float tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_LightTexture0, ((tmpvar_13.xy / tmpvar_13.w) + 0.5));
  tmpvar_33 = tmpvar_34.w;
  lowp float tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_LightTextureB0, vec2(dot (tmpvar_13.xyz, tmpvar_13.xyz)));
  tmpvar_35 = tmpvar_36.w;
  highp float tmpvar_37;
  tmpvar_37 = (((
    float((tmpvar_13.z > 0.0))
   * tmpvar_33) * tmpvar_35) * shadow_3);
  atten_2 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38.x = xlv_TEXCOORD2.w;
  tmpvar_38.y = xlv_TEXCOORD2_1.w;
  tmpvar_38.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_39;
  lightDir_39 = tmpvar_38;
  mediump float atten_40;
  atten_40 = atten_2;
  mediump vec3 tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_41 = _LightColor0.xyz;
  highp vec3 n_43;
  n_43 = lightDir_39;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(n_43);
  tmpvar_42 = tmpvar_44;
  tmpvar_41 = (tmpvar_41 * atten_40);
  mediump vec3 color_45;
  highp float specularTerm_46;
  highp float a2_47;
  mediump float roughness_48;
  mediump float perceptualRoughness_49;
  highp vec3 tmpvar_50;
  highp vec3 inVec_51;
  inVec_51 = (tmpvar_42 - tmpvar_11);
  tmpvar_50 = (inVec_51 * inversesqrt(max (0.001, 
    dot (inVec_51, inVec_51)
  )));
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_42), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = clamp (dot (tmpvar_10, tmpvar_50), 0.0, 1.0);
  highp float tmpvar_55;
  highp float smoothness_56;
  smoothness_56 = tmpvar_6;
  tmpvar_55 = (1.0 - smoothness_56);
  perceptualRoughness_49 = tmpvar_55;
  highp float tmpvar_57;
  highp float perceptualRoughness_58;
  perceptualRoughness_58 = perceptualRoughness_49;
  tmpvar_57 = (perceptualRoughness_58 * perceptualRoughness_58);
  roughness_48 = tmpvar_57;
  mediump float tmpvar_59;
  tmpvar_59 = (roughness_48 * roughness_48);
  a2_47 = tmpvar_59;
  specularTerm_46 = ((roughness_48 / (
    (max (0.32, clamp (dot (tmpvar_42, tmpvar_50), 0.0, 1.0)) * (1.5 + roughness_48))
   * 
    (((tmpvar_54 * tmpvar_54) * (a2_47 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_60;
  tmpvar_60 = clamp (specularTerm_46, 0.0, 100.0);
  specularTerm_46 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (((tmpvar_8 + 
    (tmpvar_60 * tmpvar_9)
  ) * tmpvar_41) * tmpvar_52);
  color_45 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = color_45;
  c_1.w = tmpvar_62.w;
  highp float tmpvar_63;
  tmpvar_63 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_45 * vec3(tmpvar_63));
  mediump vec4 xlat_varoutput_64;
  xlat_varoutput_64.xyz = c_1.xyz;
  xlat_varoutput_64.w = 1.0;
  gl_FragData[0] = xlat_varoutput_64;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_19;
  tmpvar_19 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_19;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_13 = tmpvar_15;
  atten_1 = realtimeShadowAttenuation_13;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_2 = (c_2 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_2;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_16;
  highp vec4 shadowCoord_17;
  shadowCoord_17 = (unity_WorldToShadow[0] * tmpvar_15);
  highp float lightShadowDataX_18;
  mediump float tmpvar_19;
  tmpvar_19 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2D (_ShadowMapTexture, shadowCoord_17.xy).x > shadowCoord_17.z)), lightShadowDataX_18);
  tmpvar_16 = tmpvar_20;
  realtimeShadowAttenuation_10 = tmpvar_16;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22.x = xlv_TEXCOORD2.w;
  tmpvar_22.y = xlv_TEXCOORD2_1.w;
  tmpvar_22.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_23;
  lightDir_23 = tmpvar_22;
  mediump float atten_24;
  atten_24 = atten_2;
  mediump vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_25 = (tmpvar_25 * atten_24);
  mediump vec3 color_26;
  highp float specularTerm_27;
  highp float a2_28;
  mediump float roughness_29;
  mediump float perceptualRoughness_30;
  highp vec3 tmpvar_31;
  highp vec3 inVec_32;
  inVec_32 = (lightDir_23 - normalize(xlv_TEXCOORD1));
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, lightDir_23), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_9, tmpvar_31), 0.0, 1.0);
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_5;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_30 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_30;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_29 = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = (roughness_29 * roughness_29);
  a2_28 = tmpvar_40;
  specularTerm_27 = ((roughness_29 / (
    (max (0.32, clamp (dot (lightDir_23, tmpvar_31), 0.0, 1.0)) * (1.5 + roughness_29))
   * 
    (((tmpvar_35 * tmpvar_35) * (a2_28 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_41;
  tmpvar_41 = clamp (specularTerm_27, 0.0, 100.0);
  specularTerm_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (((tmpvar_7 + 
    (tmpvar_41 * tmpvar_8)
  ) * tmpvar_25) * tmpvar_33);
  color_26 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_26;
  c_1.w = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_26 * vec3(tmpvar_44));
  mediump vec4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = c_1.xyz;
  xlat_varoutput_45.w = 1.0;
  gl_FragData[0] = xlat_varoutput_45;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_16;
  highp vec4 shadowCoord_17;
  shadowCoord_17 = (unity_WorldToShadow[0] * tmpvar_15);
  highp float lightShadowDataX_18;
  mediump float tmpvar_19;
  tmpvar_19 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2D (_ShadowMapTexture, shadowCoord_17.xy).x > shadowCoord_17.z)), lightShadowDataX_18);
  tmpvar_16 = tmpvar_20;
  realtimeShadowAttenuation_10 = tmpvar_16;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22.x = xlv_TEXCOORD2.w;
  tmpvar_22.y = xlv_TEXCOORD2_1.w;
  tmpvar_22.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_23;
  lightDir_23 = tmpvar_22;
  mediump float atten_24;
  atten_24 = atten_2;
  mediump vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_25 = (tmpvar_25 * atten_24);
  mediump vec3 color_26;
  highp float specularTerm_27;
  highp float a2_28;
  mediump float roughness_29;
  mediump float perceptualRoughness_30;
  highp vec3 tmpvar_31;
  highp vec3 inVec_32;
  inVec_32 = (lightDir_23 - normalize(xlv_TEXCOORD1));
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, lightDir_23), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_9, tmpvar_31), 0.0, 1.0);
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_5;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_30 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_30;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_29 = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = (roughness_29 * roughness_29);
  a2_28 = tmpvar_40;
  specularTerm_27 = ((roughness_29 / (
    (max (0.32, clamp (dot (lightDir_23, tmpvar_31), 0.0, 1.0)) * (1.5 + roughness_29))
   * 
    (((tmpvar_35 * tmpvar_35) * (a2_28 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_41;
  tmpvar_41 = clamp (specularTerm_27, 0.0, 100.0);
  specularTerm_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (((tmpvar_7 + 
    (tmpvar_41 * tmpvar_8)
  ) * tmpvar_25) * tmpvar_33);
  color_26 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_26;
  c_1.w = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_26 * vec3(tmpvar_44));
  mediump vec4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = c_1.xyz;
  xlat_varoutput_45.w = 1.0;
  gl_FragData[0] = xlat_varoutput_45;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_19;
  tmpvar_19 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_19;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_15 = tmpvar_17;
  shadow_2 = realtimeShadowAttenuation_15;
  highp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_14).xy).w * shadow_2);
  atten_1 = tmpvar_22;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = c_3;
  mediump vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_12;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_18;
  highp vec4 shadowCoord_19;
  shadowCoord_19 = (unity_WorldToShadow[0] * tmpvar_17);
  highp float lightShadowDataX_20;
  mediump float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2D (_ShadowMapTexture, shadowCoord_19.xy).x > shadowCoord_19.z)), lightShadowDataX_20);
  tmpvar_18 = tmpvar_22;
  realtimeShadowAttenuation_12 = tmpvar_18;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_12 + tmpvar_15), 0.0, 1.0);
  shadow_3 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_11).xy).w * shadow_3);
  atten_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.x = xlv_TEXCOORD2.w;
  tmpvar_25.y = xlv_TEXCOORD2_1.w;
  tmpvar_25.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_26;
  lightDir_26 = tmpvar_25;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_28 = (tmpvar_28 * atten_27);
  mediump vec3 color_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (lightDir_26 - normalize(xlv_TEXCOORD1));
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_10, lightDir_26), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  highp float tmpvar_39;
  highp float smoothness_40;
  smoothness_40 = tmpvar_6;
  tmpvar_39 = (1.0 - smoothness_40);
  perceptualRoughness_33 = tmpvar_39;
  highp float tmpvar_41;
  highp float perceptualRoughness_42;
  perceptualRoughness_42 = perceptualRoughness_33;
  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
  roughness_32 = tmpvar_41;
  mediump float tmpvar_43;
  tmpvar_43 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_43;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (lightDir_26, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_44;
  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (((tmpvar_8 + 
    (tmpvar_44 * tmpvar_9)
  ) * tmpvar_28) * tmpvar_36);
  color_29 = tmpvar_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = color_29;
  c_1.w = tmpvar_46.w;
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_29 * vec3(tmpvar_47));
  mediump vec4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = c_1.xyz;
  xlat_varoutput_48.w = 1.0;
  gl_FragData[0] = xlat_varoutput_48;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_12;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_18;
  highp vec4 shadowCoord_19;
  shadowCoord_19 = (unity_WorldToShadow[0] * tmpvar_17);
  highp float lightShadowDataX_20;
  mediump float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2D (_ShadowMapTexture, shadowCoord_19.xy).x > shadowCoord_19.z)), lightShadowDataX_20);
  tmpvar_18 = tmpvar_22;
  realtimeShadowAttenuation_12 = tmpvar_18;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_12 + tmpvar_15), 0.0, 1.0);
  shadow_3 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_11).xy).w * shadow_3);
  atten_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.x = xlv_TEXCOORD2.w;
  tmpvar_25.y = xlv_TEXCOORD2_1.w;
  tmpvar_25.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_26;
  lightDir_26 = tmpvar_25;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_28 = (tmpvar_28 * atten_27);
  mediump vec3 color_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (lightDir_26 - normalize(xlv_TEXCOORD1));
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_10, lightDir_26), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  highp float tmpvar_39;
  highp float smoothness_40;
  smoothness_40 = tmpvar_6;
  tmpvar_39 = (1.0 - smoothness_40);
  perceptualRoughness_33 = tmpvar_39;
  highp float tmpvar_41;
  highp float perceptualRoughness_42;
  perceptualRoughness_42 = perceptualRoughness_33;
  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
  roughness_32 = tmpvar_41;
  mediump float tmpvar_43;
  tmpvar_43 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_43;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (lightDir_26, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_44;
  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (((tmpvar_8 + 
    (tmpvar_44 * tmpvar_9)
  ) * tmpvar_28) * tmpvar_36);
  color_29 = tmpvar_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = color_29;
  c_1.w = tmpvar_46.w;
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_29 * vec3(tmpvar_47));
  mediump vec4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = c_1.xyz;
  xlat_varoutput_48.w = 1.0;
  gl_FragData[0] = xlat_varoutput_48;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureCube (_ShadowMapTexture, vec_18);
  highp vec4 vals_22;
  vals_22 = tmpvar_21;
  highp float tmpvar_23;
  tmpvar_23 = dot (vals_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_19 = tmpvar_23;
  mediump float tmpvar_24;
  if ((shadowVal_19 < mydist_20)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_24 + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTexture0, vec2(dot (tmpvar_13, tmpvar_13))).w * shadow_3);
  atten_2 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.x = xlv_TEXCOORD2.w;
  tmpvar_27.y = xlv_TEXCOORD2_1.w;
  tmpvar_27.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_28;
  lightDir_28 = tmpvar_27;
  mediump float atten_29;
  atten_29 = atten_2;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_30 = _LightColor0.xyz;
  highp vec3 n_32;
  n_32 = lightDir_28;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(n_32);
  tmpvar_31 = tmpvar_33;
  tmpvar_30 = (tmpvar_30 * atten_29);
  mediump vec3 color_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (tmpvar_31 - tmpvar_11);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_10, tmpvar_31), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_10, tmpvar_39), 0.0, 1.0);
  highp float tmpvar_44;
  highp float smoothness_45;
  smoothness_45 = tmpvar_6;
  tmpvar_44 = (1.0 - smoothness_45);
  perceptualRoughness_38 = tmpvar_44;
  highp float tmpvar_46;
  highp float perceptualRoughness_47;
  perceptualRoughness_47 = perceptualRoughness_38;
  tmpvar_46 = (perceptualRoughness_47 * perceptualRoughness_47);
  roughness_37 = tmpvar_46;
  mediump float tmpvar_48;
  tmpvar_48 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_48;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (tmpvar_31, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_49;
  tmpvar_49 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_8 + 
    (tmpvar_49 * tmpvar_9)
  ) * tmpvar_30) * tmpvar_41);
  color_34 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_34;
  c_1.w = tmpvar_51.w;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_34 * vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureCube (_ShadowMapTexture, vec_18);
  highp vec4 vals_22;
  vals_22 = tmpvar_21;
  highp float tmpvar_23;
  tmpvar_23 = dot (vals_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_19 = tmpvar_23;
  mediump float tmpvar_24;
  if ((shadowVal_19 < mydist_20)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_24 + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (_LightTexture0, vec2(dot (tmpvar_13, tmpvar_13))).w * shadow_3);
  atten_2 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.x = xlv_TEXCOORD2.w;
  tmpvar_27.y = xlv_TEXCOORD2_1.w;
  tmpvar_27.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_28;
  lightDir_28 = tmpvar_27;
  mediump float atten_29;
  atten_29 = atten_2;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_30 = _LightColor0.xyz;
  highp vec3 n_32;
  n_32 = lightDir_28;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(n_32);
  tmpvar_31 = tmpvar_33;
  tmpvar_30 = (tmpvar_30 * atten_29);
  mediump vec3 color_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (tmpvar_31 - tmpvar_11);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_10, tmpvar_31), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_10, tmpvar_39), 0.0, 1.0);
  highp float tmpvar_44;
  highp float smoothness_45;
  smoothness_45 = tmpvar_6;
  tmpvar_44 = (1.0 - smoothness_45);
  perceptualRoughness_38 = tmpvar_44;
  highp float tmpvar_46;
  highp float perceptualRoughness_47;
  perceptualRoughness_47 = perceptualRoughness_38;
  tmpvar_46 = (perceptualRoughness_47 * perceptualRoughness_47);
  roughness_37 = tmpvar_46;
  mediump float tmpvar_48;
  tmpvar_48 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_48;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (tmpvar_31, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_49;
  tmpvar_49 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_8 + 
    (tmpvar_49 * tmpvar_9)
  ) * tmpvar_30) * tmpvar_41);
  color_34 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_34;
  c_1.w = tmpvar_51.w;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_34 * vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = (vec_16 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_19.xyz, 0.0);
  tmpvar_20 = tmpvar_21;
  shadowVals_17.x = dot (tmpvar_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 0.0;
  tmpvar_22.xyz = (vec_16 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_22.xyz, 0.0);
  tmpvar_23 = tmpvar_24;
  shadowVals_17.y = dot (tmpvar_23, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = (vec_16 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
  tmpvar_26 = tmpvar_27;
  shadowVals_17.z = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_16 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_17.w = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  shadow_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_39;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = c_4;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = (vec_18 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_21.xyz, 0.0);
  tmpvar_22 = tmpvar_23;
  shadowVals_19.x = dot (tmpvar_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 0.0;
  tmpvar_24.xyz = (vec_18 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_24.xyz, 0.0);
  tmpvar_25 = tmpvar_26;
  shadowVals_19.y = dot (tmpvar_25, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_27;
  tmpvar_27.w = 0.0;
  tmpvar_27.xyz = (vec_18 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
  tmpvar_28 = tmpvar_29;
  shadowVals_19.z = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (vec_18 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
  tmpvar_31 = tmpvar_32;
  shadowVals_19.w = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_19, vec4(mydist_20));
  mediump vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  mediump float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  mediump vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = clamp ((dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (texture2D (_LightTexture0, vec2(dot (tmpvar_13, tmpvar_13))).w * shadow_3);
  atten_2 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42.x = xlv_TEXCOORD2.w;
  tmpvar_42.y = xlv_TEXCOORD2_1.w;
  tmpvar_42.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_43;
  lightDir_43 = tmpvar_42;
  mediump float atten_44;
  atten_44 = atten_2;
  mediump vec3 tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_45 = _LightColor0.xyz;
  highp vec3 n_47;
  n_47 = lightDir_43;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(n_47);
  tmpvar_46 = tmpvar_48;
  tmpvar_45 = (tmpvar_45 * atten_44);
  mediump vec3 color_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (tmpvar_46 - tmpvar_11);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, tmpvar_46), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  highp float tmpvar_59;
  highp float smoothness_60;
  smoothness_60 = tmpvar_6;
  tmpvar_59 = (1.0 - smoothness_60);
  perceptualRoughness_53 = tmpvar_59;
  highp float tmpvar_61;
  highp float perceptualRoughness_62;
  perceptualRoughness_62 = perceptualRoughness_53;
  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
  roughness_52 = tmpvar_61;
  mediump float tmpvar_63;
  tmpvar_63 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_63;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (tmpvar_46, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_64;
  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_8 + 
    (tmpvar_64 * tmpvar_9)
  ) * tmpvar_45) * tmpvar_56);
  color_49 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = color_49;
  c_1.w = tmpvar_66.w;
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_49 * vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = (vec_18 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_21.xyz, 0.0);
  tmpvar_22 = tmpvar_23;
  shadowVals_19.x = dot (tmpvar_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 0.0;
  tmpvar_24.xyz = (vec_18 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_24.xyz, 0.0);
  tmpvar_25 = tmpvar_26;
  shadowVals_19.y = dot (tmpvar_25, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_27;
  tmpvar_27.w = 0.0;
  tmpvar_27.xyz = (vec_18 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
  tmpvar_28 = tmpvar_29;
  shadowVals_19.z = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (vec_18 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
  tmpvar_31 = tmpvar_32;
  shadowVals_19.w = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_19, vec4(mydist_20));
  mediump vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  mediump float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  mediump vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = clamp ((dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = (texture2D (_LightTexture0, vec2(dot (tmpvar_13, tmpvar_13))).w * shadow_3);
  atten_2 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42.x = xlv_TEXCOORD2.w;
  tmpvar_42.y = xlv_TEXCOORD2_1.w;
  tmpvar_42.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_43;
  lightDir_43 = tmpvar_42;
  mediump float atten_44;
  atten_44 = atten_2;
  mediump vec3 tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_45 = _LightColor0.xyz;
  highp vec3 n_47;
  n_47 = lightDir_43;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(n_47);
  tmpvar_46 = tmpvar_48;
  tmpvar_45 = (tmpvar_45 * atten_44);
  mediump vec3 color_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (tmpvar_46 - tmpvar_11);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, tmpvar_46), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  highp float tmpvar_59;
  highp float smoothness_60;
  smoothness_60 = tmpvar_6;
  tmpvar_59 = (1.0 - smoothness_60);
  perceptualRoughness_53 = tmpvar_59;
  highp float tmpvar_61;
  highp float perceptualRoughness_62;
  perceptualRoughness_62 = perceptualRoughness_53;
  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
  roughness_52 = tmpvar_61;
  mediump float tmpvar_63;
  tmpvar_63 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_63;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (tmpvar_46, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_64;
  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_8 + 
    (tmpvar_64 * tmpvar_9)
  ) * tmpvar_45) * tmpvar_56);
  color_49 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = color_49;
  c_1.w = tmpvar_66.w;
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_49 * vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureCube (_ShadowMapTexture, vec_18);
  highp vec4 vals_22;
  vals_22 = tmpvar_21;
  highp float tmpvar_23;
  tmpvar_23 = dot (vals_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_19 = tmpvar_23;
  mediump float tmpvar_24;
  if ((shadowVal_19 < mydist_20)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_24 + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_13, tmpvar_13))).w * textureCube (_LightTexture0, tmpvar_13).w) * shadow_3);
  atten_2 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.x = xlv_TEXCOORD2.w;
  tmpvar_27.y = xlv_TEXCOORD2_1.w;
  tmpvar_27.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_28;
  lightDir_28 = tmpvar_27;
  mediump float atten_29;
  atten_29 = atten_2;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_30 = _LightColor0.xyz;
  highp vec3 n_32;
  n_32 = lightDir_28;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(n_32);
  tmpvar_31 = tmpvar_33;
  tmpvar_30 = (tmpvar_30 * atten_29);
  mediump vec3 color_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (tmpvar_31 - tmpvar_11);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_10, tmpvar_31), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_10, tmpvar_39), 0.0, 1.0);
  highp float tmpvar_44;
  highp float smoothness_45;
  smoothness_45 = tmpvar_6;
  tmpvar_44 = (1.0 - smoothness_45);
  perceptualRoughness_38 = tmpvar_44;
  highp float tmpvar_46;
  highp float perceptualRoughness_47;
  perceptualRoughness_47 = perceptualRoughness_38;
  tmpvar_46 = (perceptualRoughness_47 * perceptualRoughness_47);
  roughness_37 = tmpvar_46;
  mediump float tmpvar_48;
  tmpvar_48 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_48;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (tmpvar_31, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_49;
  tmpvar_49 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_8 + 
    (tmpvar_49 * tmpvar_9)
  ) * tmpvar_30) * tmpvar_41);
  color_34 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_34;
  c_1.w = tmpvar_51.w;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_34 * vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureCube (_ShadowMapTexture, vec_18);
  highp vec4 vals_22;
  vals_22 = tmpvar_21;
  highp float tmpvar_23;
  tmpvar_23 = dot (vals_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_19 = tmpvar_23;
  mediump float tmpvar_24;
  if ((shadowVal_19 < mydist_20)) {
    tmpvar_24 = _LightShadowData.x;
  } else {
    tmpvar_24 = 1.0;
  };
  mediump float tmpvar_25;
  tmpvar_25 = clamp ((tmpvar_24 + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_13, tmpvar_13))).w * textureCube (_LightTexture0, tmpvar_13).w) * shadow_3);
  atten_2 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27.x = xlv_TEXCOORD2.w;
  tmpvar_27.y = xlv_TEXCOORD2_1.w;
  tmpvar_27.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_28;
  lightDir_28 = tmpvar_27;
  mediump float atten_29;
  atten_29 = atten_2;
  mediump vec3 tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_30 = _LightColor0.xyz;
  highp vec3 n_32;
  n_32 = lightDir_28;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(n_32);
  tmpvar_31 = tmpvar_33;
  tmpvar_30 = (tmpvar_30 * atten_29);
  mediump vec3 color_34;
  highp float specularTerm_35;
  highp float a2_36;
  mediump float roughness_37;
  mediump float perceptualRoughness_38;
  highp vec3 tmpvar_39;
  highp vec3 inVec_40;
  inVec_40 = (tmpvar_31 - tmpvar_11);
  tmpvar_39 = (inVec_40 * inversesqrt(max (0.001, 
    dot (inVec_40, inVec_40)
  )));
  mediump float tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_10, tmpvar_31), 0.0, 1.0);
  tmpvar_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (dot (tmpvar_10, tmpvar_39), 0.0, 1.0);
  highp float tmpvar_44;
  highp float smoothness_45;
  smoothness_45 = tmpvar_6;
  tmpvar_44 = (1.0 - smoothness_45);
  perceptualRoughness_38 = tmpvar_44;
  highp float tmpvar_46;
  highp float perceptualRoughness_47;
  perceptualRoughness_47 = perceptualRoughness_38;
  tmpvar_46 = (perceptualRoughness_47 * perceptualRoughness_47);
  roughness_37 = tmpvar_46;
  mediump float tmpvar_48;
  tmpvar_48 = (roughness_37 * roughness_37);
  a2_36 = tmpvar_48;
  specularTerm_35 = ((roughness_37 / (
    (max (0.32, clamp (dot (tmpvar_31, tmpvar_39), 0.0, 1.0)) * (1.5 + roughness_37))
   * 
    (((tmpvar_43 * tmpvar_43) * (a2_36 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_49;
  tmpvar_49 = clamp (specularTerm_35, 0.0, 100.0);
  specularTerm_35 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (((tmpvar_8 + 
    (tmpvar_49 * tmpvar_9)
  ) * tmpvar_30) * tmpvar_41);
  color_34 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = color_34;
  c_1.w = tmpvar_51.w;
  highp float tmpvar_52;
  tmpvar_52 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_34 * vec3(tmpvar_52));
  mediump vec4 xlat_varoutput_53;
  xlat_varoutput_53.xyz = c_1.xyz;
  xlat_varoutput_53.w = 1.0;
  gl_FragData[0] = xlat_varoutput_53;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  highp vec4 shadowVals_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = (vec_16 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_19.xyz, 0.0);
  tmpvar_20 = tmpvar_21;
  shadowVals_17.x = dot (tmpvar_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 0.0;
  tmpvar_22.xyz = (vec_16 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_22.xyz, 0.0);
  tmpvar_23 = tmpvar_24;
  shadowVals_17.y = dot (tmpvar_23, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = (vec_16 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_25.xyz, 0.0);
  tmpvar_26 = tmpvar_27;
  shadowVals_17.z = dot (tmpvar_26, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_28;
  tmpvar_28.w = 0.0;
  tmpvar_28.xyz = (vec_16 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_29;
  lowp vec4 tmpvar_30;
  tmpvar_30 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_28.xyz, 0.0);
  tmpvar_29 = tmpvar_30;
  shadowVals_17.w = dot (tmpvar_29, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_17, vec4(mydist_18));
  mediump vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  mediump float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  mediump float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  mediump float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  mediump float tmpvar_38;
  tmpvar_38 = dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25));
  shadow_2 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_39;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = c_4;
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = tmpvar_40.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = (vec_18 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_21.xyz, 0.0);
  tmpvar_22 = tmpvar_23;
  shadowVals_19.x = dot (tmpvar_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 0.0;
  tmpvar_24.xyz = (vec_18 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_24.xyz, 0.0);
  tmpvar_25 = tmpvar_26;
  shadowVals_19.y = dot (tmpvar_25, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_27;
  tmpvar_27.w = 0.0;
  tmpvar_27.xyz = (vec_18 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
  tmpvar_28 = tmpvar_29;
  shadowVals_19.z = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (vec_18 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
  tmpvar_31 = tmpvar_32;
  shadowVals_19.w = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_19, vec4(mydist_20));
  mediump vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  mediump float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  mediump vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = clamp ((dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_13, tmpvar_13))).w * textureCube (_LightTexture0, tmpvar_13).w) * shadow_3);
  atten_2 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42.x = xlv_TEXCOORD2.w;
  tmpvar_42.y = xlv_TEXCOORD2_1.w;
  tmpvar_42.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_43;
  lightDir_43 = tmpvar_42;
  mediump float atten_44;
  atten_44 = atten_2;
  mediump vec3 tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_45 = _LightColor0.xyz;
  highp vec3 n_47;
  n_47 = lightDir_43;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(n_47);
  tmpvar_46 = tmpvar_48;
  tmpvar_45 = (tmpvar_45 * atten_44);
  mediump vec3 color_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (tmpvar_46 - tmpvar_11);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, tmpvar_46), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  highp float tmpvar_59;
  highp float smoothness_60;
  smoothness_60 = tmpvar_6;
  tmpvar_59 = (1.0 - smoothness_60);
  perceptualRoughness_53 = tmpvar_59;
  highp float tmpvar_61;
  highp float perceptualRoughness_62;
  perceptualRoughness_62 = perceptualRoughness_53;
  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
  roughness_52 = tmpvar_61;
  mediump float tmpvar_63;
  tmpvar_63 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_63;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (tmpvar_46, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_64;
  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_8 + 
    (tmpvar_64 * tmpvar_9)
  ) * tmpvar_45) * tmpvar_56);
  color_49 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = color_49;
  c_1.w = tmpvar_66.w;
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_49 * vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  highp vec3 tmpvar_19;
  tmpvar_19 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  lightDir_4 = tmpvar_20;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  highp vec3 tmpvar_13;
  tmpvar_13 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec3 vec_18;
  vec_18 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  highp vec4 shadowVals_19;
  highp float mydist_20;
  mydist_20 = ((sqrt(
    dot (vec_18, vec_18)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = (vec_18 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_21.xyz, 0.0);
  tmpvar_22 = tmpvar_23;
  shadowVals_19.x = dot (tmpvar_22, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 0.0;
  tmpvar_24.xyz = (vec_18 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_24.xyz, 0.0);
  tmpvar_25 = tmpvar_26;
  shadowVals_19.y = dot (tmpvar_25, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_27;
  tmpvar_27.w = 0.0;
  tmpvar_27.xyz = (vec_18 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 tmpvar_28;
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_27.xyz, 0.0);
  tmpvar_28 = tmpvar_29;
  shadowVals_19.z = dot (tmpvar_28, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (vec_18 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = impl_low_textureCubeLodEXT (_ShadowMapTexture, tmpvar_30.xyz, 0.0);
  tmpvar_31 = tmpvar_32;
  shadowVals_19.w = dot (tmpvar_31, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  bvec4 tmpvar_33;
  tmpvar_33 = lessThan (shadowVals_19, vec4(mydist_20));
  mediump vec4 tmpvar_34;
  tmpvar_34 = _LightShadowData.xxxx;
  mediump float tmpvar_35;
  if (tmpvar_33.x) {
    tmpvar_35 = tmpvar_34.x;
  } else {
    tmpvar_35 = 1.0;
  };
  mediump float tmpvar_36;
  if (tmpvar_33.y) {
    tmpvar_36 = tmpvar_34.y;
  } else {
    tmpvar_36 = 1.0;
  };
  mediump float tmpvar_37;
  if (tmpvar_33.z) {
    tmpvar_37 = tmpvar_34.z;
  } else {
    tmpvar_37 = 1.0;
  };
  mediump float tmpvar_38;
  if (tmpvar_33.w) {
    tmpvar_38 = tmpvar_34.w;
  } else {
    tmpvar_38 = 1.0;
  };
  mediump vec4 tmpvar_39;
  tmpvar_39.x = tmpvar_35;
  tmpvar_39.y = tmpvar_36;
  tmpvar_39.z = tmpvar_37;
  tmpvar_39.w = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = clamp ((dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)) + tmpvar_16), 0.0, 1.0);
  shadow_3 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = ((texture2D (_LightTextureB0, vec2(dot (tmpvar_13, tmpvar_13))).w * textureCube (_LightTexture0, tmpvar_13).w) * shadow_3);
  atten_2 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42.x = xlv_TEXCOORD2.w;
  tmpvar_42.y = xlv_TEXCOORD2_1.w;
  tmpvar_42.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_43;
  lightDir_43 = tmpvar_42;
  mediump float atten_44;
  atten_44 = atten_2;
  mediump vec3 tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_45 = _LightColor0.xyz;
  highp vec3 n_47;
  n_47 = lightDir_43;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(n_47);
  tmpvar_46 = tmpvar_48;
  tmpvar_45 = (tmpvar_45 * atten_44);
  mediump vec3 color_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (tmpvar_46 - tmpvar_11);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, tmpvar_46), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  highp float tmpvar_59;
  highp float smoothness_60;
  smoothness_60 = tmpvar_6;
  tmpvar_59 = (1.0 - smoothness_60);
  perceptualRoughness_53 = tmpvar_59;
  highp float tmpvar_61;
  highp float perceptualRoughness_62;
  perceptualRoughness_62 = perceptualRoughness_53;
  tmpvar_61 = (perceptualRoughness_62 * perceptualRoughness_62);
  roughness_52 = tmpvar_61;
  mediump float tmpvar_63;
  tmpvar_63 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_63;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (tmpvar_46, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_64;
  tmpvar_64 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (((tmpvar_8 + 
    (tmpvar_64 * tmpvar_9)
  ) * tmpvar_45) * tmpvar_56);
  color_49 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = color_49;
  c_1.w = tmpvar_66.w;
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_49 * vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "SHADOWCASTER"
  LOD 300
  Tags { "LIGHTMODE" = "SHADOWCASTER" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 195972
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
""
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 300
  Tags { "LIGHTMODE" = "DEFERRED" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
  GpuProgramID 201409
Program "vp" {
SubProgram "gles " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_6;
  tmpvar_6 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  mediump float occ_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (occ_9 * _OcclusionStrength));
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  worldViewDir_13 = -(tmpvar_8);
  mediump vec3 Normal_14;
  Normal_14 = tmpvar_7;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_3;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec3 I_18;
  I_18 = -(worldViewDir_13);
  mediump vec3 tmpvar_19;
  tmpvar_19 = (I_18 - (2.0 * (
    dot (Normal_14, I_18)
   * Normal_14)));
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_12;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = tmpvar_19;
  tmpvar_21.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_22;
  tmpvar_22 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_19, tmpvar_21.w);
  mediump vec4 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  highp vec3 viewDir_24;
  viewDir_24 = -(tmpvar_8);
  mediump vec2 rlPow4AndFresnelTerm_25;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_7, viewDir_24), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.x = (viewDir_24 - (2.0 * (
    dot (tmpvar_7, viewDir_24)
   * tmpvar_7))).y;
  tmpvar_28.y = (1.0 - tmpvar_26);
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  rlPow4AndFresnelTerm_25 = tmpvar_29;
  mediump vec4 outGBuffer2_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = (tmpvar_4 * tmpvar_6);
  tmpvar_31.w = tmpvar_11;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_5;
  tmpvar_32.w = tmpvar_3;
  highp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = ((tmpvar_7 * 0.5) + 0.5);
  outGBuffer2_30 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = exp2(-((
    (((hdr_20.x * (
      (hdr_20.w * (tmpvar_23.w - 1.0))
     + 1.0)) * tmpvar_23.xyz) * tmpvar_11)
   * 
    mix (tmpvar_5, vec3(clamp ((mg_2.y + (1.0 - tmpvar_6)), 0.0, 1.0)), rlPow4AndFresnelTerm_25.yyy)
  )));
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = tmpvar_32;
  gl_FragData[2] = outGBuffer2_30;
  gl_FragData[3] = tmpvar_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_6;
  tmpvar_6 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  mediump float occ_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (occ_9 * _OcclusionStrength));
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  worldViewDir_13 = -(tmpvar_8);
  mediump vec3 Normal_14;
  Normal_14 = tmpvar_7;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_3;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec3 I_18;
  I_18 = -(worldViewDir_13);
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_18 - (2.0 * (
    dot (Normal_14, I_18)
   * Normal_14)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_19 = (((hdr_21.x * 
    ((hdr_21.w * (tmpvar_24.w - 1.0)) + 1.0)
  ) * tmpvar_24.xyz) * tmpvar_11);
  mediump vec3 color_25;
  mediump float surfaceReduction_26;
  mediump float roughness_27;
  mediump float perceptualRoughness_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_7, -(tmpvar_8)), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp float tmpvar_31;
  highp float smoothness_32;
  smoothness_32 = tmpvar_3;
  tmpvar_31 = (1.0 - smoothness_32);
  perceptualRoughness_28 = tmpvar_31;
  highp float tmpvar_33;
  highp float perceptualRoughness_34;
  perceptualRoughness_34 = perceptualRoughness_28;
  tmpvar_33 = (perceptualRoughness_34 * perceptualRoughness_34);
  roughness_27 = tmpvar_33;
  surfaceReduction_26 = (1.0 - ((roughness_27 * perceptualRoughness_28) * 0.28));
  mediump float x_35;
  x_35 = (1.0 - tmpvar_29);
  mediump vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_5, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_6)
  ), 0.0, 1.0)), vec3(((x_35 * x_35) * (x_35 * x_35))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((surfaceReduction_26 * tmpvar_19) * tmpvar_36);
  color_25 = tmpvar_37;
  mediump vec4 outGBuffer2_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = (tmpvar_4 * tmpvar_6);
  tmpvar_39.w = tmpvar_11;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_3;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = ((tmpvar_7 * 0.5) + 0.5);
  outGBuffer2_38 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = exp2(-(color_25));
  gl_FragData[0] = tmpvar_39;
  gl_FragData[1] = tmpvar_40;
  gl_FragData[2] = outGBuffer2_38;
  gl_FragData[3] = tmpvar_42;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_6;
  tmpvar_6 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  mediump float occ_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_9 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 - _OcclusionStrength) + (occ_9 * _OcclusionStrength));
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  worldViewDir_13 = -(tmpvar_8);
  mediump vec3 Normal_14;
  Normal_14 = tmpvar_7;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_3;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec3 I_18;
  I_18 = -(worldViewDir_13);
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_18 - (2.0 * (
    dot (Normal_14, I_18)
   * Normal_14)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_19 = (((hdr_21.x * 
    ((hdr_21.w * (tmpvar_24.w - 1.0)) + 1.0)
  ) * tmpvar_24.xyz) * tmpvar_11);
  mediump vec3 color_25;
  mediump float surfaceReduction_26;
  mediump float roughness_27;
  mediump float perceptualRoughness_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_7, -(tmpvar_8)), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp float tmpvar_31;
  highp float smoothness_32;
  smoothness_32 = tmpvar_3;
  tmpvar_31 = (1.0 - smoothness_32);
  perceptualRoughness_28 = tmpvar_31;
  highp float tmpvar_33;
  highp float perceptualRoughness_34;
  perceptualRoughness_34 = perceptualRoughness_28;
  tmpvar_33 = (perceptualRoughness_34 * perceptualRoughness_34);
  roughness_27 = tmpvar_33;
  surfaceReduction_26 = (1.0 - ((roughness_27 * perceptualRoughness_28) * 0.28));
  mediump float x_35;
  x_35 = (1.0 - tmpvar_29);
  mediump vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_5, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_6)
  ), 0.0, 1.0)), vec3(((x_35 * x_35) * (x_35 * x_35))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((surfaceReduction_26 * tmpvar_19) * tmpvar_36);
  color_25 = tmpvar_37;
  mediump vec4 outGBuffer2_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = (tmpvar_4 * tmpvar_6);
  tmpvar_39.w = tmpvar_11;
  mediump vec4 tmpvar_40;
  tmpvar_40.xyz = tmpvar_5;
  tmpvar_40.w = tmpvar_3;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = ((tmpvar_7 * 0.5) + 0.5);
  outGBuffer2_38 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = exp2(-(color_25));
  gl_FragData[0] = tmpvar_39;
  gl_FragData[1] = tmpvar_40;
  gl_FragData[2] = outGBuffer2_38;
  gl_FragData[3] = tmpvar_42;
}


#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump float occ_11;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 - _OcclusionStrength) + (occ_11 * _OcclusionStrength));
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_9;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_21;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_22);
  x_23.y = dot (unity_SHAg, tmpvar_22);
  x_23.z = dot (unity_SHAb, tmpvar_22);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_14;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_24;
  tmpvar_26.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_24, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  highp vec3 viewDir_29;
  viewDir_29 = -(tmpvar_10);
  mediump vec2 rlPow4AndFresnelTerm_30;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_9, viewDir_29), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33.x = (viewDir_29 - (2.0 * (
    dot (tmpvar_9, viewDir_29)
   * tmpvar_9))).y;
  tmpvar_33.y = (1.0 - tmpvar_31);
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * tmpvar_33) * (tmpvar_33 * tmpvar_33));
  rlPow4AndFresnelTerm_30 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (((
    (max (((1.055 * 
      pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_23)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_13)
   * tmpvar_6) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * tmpvar_13)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_30.yyy)
  )) + (tmpvar_35.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_6;
  tmpvar_37.w = tmpvar_13;
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = tmpvar_7;
  tmpvar_38.w = tmpvar_4;
  highp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_9 * 0.5) + 0.5);
  outGBuffer2_36 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_37;
  gl_FragData[1] = tmpvar_38;
  gl_FragData[2] = outGBuffer2_36;
  gl_FragData[3] = tmpvar_40;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump float occ_11;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 - _OcclusionStrength) + (occ_11 * _OcclusionStrength));
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_9;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x_25;
  x_25.x = dot (unity_SHAr, tmpvar_24);
  x_25.y = dot (unity_SHAg, tmpvar_24);
  x_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_22 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_25)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_13);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_14;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_26;
  tmpvar_28.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_26, tmpvar_28.w);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_23 = (((hdr_27.x * 
    ((hdr_27.w * (tmpvar_30.w - 1.0)) + 1.0)
  ) * tmpvar_30.xyz) * tmpvar_13);
  mediump vec3 color_31;
  mediump float surfaceReduction_32;
  mediump float roughness_33;
  mediump float perceptualRoughness_34;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, -(tmpvar_10)), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_4;
  tmpvar_37 = (1.0 - smoothness_38);
  perceptualRoughness_34 = tmpvar_37;
  highp float tmpvar_39;
  highp float perceptualRoughness_40;
  perceptualRoughness_40 = perceptualRoughness_34;
  tmpvar_39 = (perceptualRoughness_40 * perceptualRoughness_40);
  roughness_33 = tmpvar_39;
  surfaceReduction_32 = (1.0 - ((roughness_33 * perceptualRoughness_34) * 0.28));
  mediump float x_41;
  x_41 = (1.0 - tmpvar_35);
  mediump vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_41 * x_41) * (x_41 * x_41))));
  highp vec3 tmpvar_43;
  tmpvar_43 = ((tmpvar_22 * tmpvar_6) + ((surfaceReduction_32 * tmpvar_23) * tmpvar_42));
  color_31 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (color_31 + (tmpvar_44.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_13;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = tmpvar_7;
  tmpvar_47.w = tmpvar_4;
  highp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = ((tmpvar_9 * 0.5) + 0.5);
  outGBuffer2_45 = tmpvar_48;
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_46;
  gl_FragData[1] = tmpvar_47;
  gl_FragData[2] = outGBuffer2_45;
  gl_FragData[3] = tmpvar_49;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  mediump float occ_11;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_11 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 - _OcclusionStrength) + (occ_11 * _OcclusionStrength));
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_15;
  worldViewDir_15 = -(tmpvar_10);
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_15);
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_9;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x_25;
  x_25.x = dot (unity_SHAr, tmpvar_24);
  x_25.y = dot (unity_SHAg, tmpvar_24);
  x_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_22 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_25)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_13);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_27;
  hdr_27 = tmpvar_14;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_26;
  tmpvar_28.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_29;
  tmpvar_29 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_26, tmpvar_28.w);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  tmpvar_23 = (((hdr_27.x * 
    ((hdr_27.w * (tmpvar_30.w - 1.0)) + 1.0)
  ) * tmpvar_30.xyz) * tmpvar_13);
  mediump vec3 color_31;
  mediump float surfaceReduction_32;
  mediump float roughness_33;
  mediump float perceptualRoughness_34;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, -(tmpvar_10)), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_4;
  tmpvar_37 = (1.0 - smoothness_38);
  perceptualRoughness_34 = tmpvar_37;
  highp float tmpvar_39;
  highp float perceptualRoughness_40;
  perceptualRoughness_40 = perceptualRoughness_34;
  tmpvar_39 = (perceptualRoughness_40 * perceptualRoughness_40);
  roughness_33 = tmpvar_39;
  surfaceReduction_32 = (1.0 - ((roughness_33 * perceptualRoughness_34) * 0.28));
  mediump float x_41;
  x_41 = (1.0 - tmpvar_35);
  mediump vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_7, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_8)
  ), 0.0, 1.0)), vec3(((x_41 * x_41) * (x_41 * x_41))));
  highp vec3 tmpvar_43;
  tmpvar_43 = ((tmpvar_22 * tmpvar_6) + ((surfaceReduction_32 * tmpvar_23) * tmpvar_42));
  color_31 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (color_31 + (tmpvar_44.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_13;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = tmpvar_7;
  tmpvar_47.w = tmpvar_4;
  highp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = ((tmpvar_9 * 0.5) + 0.5);
  outGBuffer2_45 = tmpvar_48;
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_46;
  gl_FragData[1] = tmpvar_47;
  gl_FragData[2] = outGBuffer2_45;
  gl_FragData[3] = tmpvar_49;
}


#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_13;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_23;
  tmpvar_25.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_23, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  highp vec3 viewDir_28;
  viewDir_28 = -(tmpvar_9);
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, viewDir_28), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = (viewDir_28 - (2.0 * (
    dot (tmpvar_8, viewDir_28)
   * tmpvar_8))).y;
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_29 = tmpvar_33;
  mediump vec4 outGBuffer2_34;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = tmpvar_5;
  tmpvar_35.w = tmpvar_12;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = tmpvar_6;
  tmpvar_36.w = tmpvar_3;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_34 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = exp2(-((
    ((max ((
      (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_22)), vec3(0.4166667, 0.4166667, 0.4166667)))
     - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12) * tmpvar_5)
   + 
    ((((hdr_24.x * 
      ((hdr_24.w * (tmpvar_27.w - 1.0)) + 1.0)
    ) * tmpvar_27.xyz) * tmpvar_12) * mix (tmpvar_6, vec3(clamp ((mg_2.y + 
      (1.0 - tmpvar_7)
    ), 0.0, 1.0)), rlPow4AndFresnelTerm_29.yyy))
  )));
  gl_FragData[0] = tmpvar_35;
  gl_FragData[1] = tmpvar_36;
  gl_FragData[2] = outGBuffer2_34;
  gl_FragData[3] = tmpvar_38;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  mediump vec4 outGBuffer2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_5;
  tmpvar_44.w = tmpvar_12;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_6;
  tmpvar_45.w = tmpvar_3;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_43 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = exp2(-(color_30));
  gl_FragData[0] = tmpvar_44;
  gl_FragData[1] = tmpvar_45;
  gl_FragData[2] = outGBuffer2_43;
  gl_FragData[3] = tmpvar_47;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  mediump vec4 outGBuffer2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_5;
  tmpvar_44.w = tmpvar_12;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_6;
  tmpvar_45.w = tmpvar_3;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_43 = tmpvar_46;
  mediump vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = exp2(-(color_30));
  gl_FragData[0] = tmpvar_44;
  gl_FragData[1] = tmpvar_45;
  gl_FragData[2] = outGBuffer2_43;
  gl_FragData[3] = tmpvar_47;
}


#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_13;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_23;
  tmpvar_25.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_23, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  highp vec3 viewDir_28;
  viewDir_28 = -(tmpvar_9);
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, viewDir_28), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = (viewDir_28 - (2.0 * (
    dot (tmpvar_8, viewDir_28)
   * tmpvar_8))).y;
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_29 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  mediump vec4 outGBuffer2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = tmpvar_5;
  tmpvar_36.w = tmpvar_12;
  mediump vec4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_6;
  tmpvar_37.w = tmpvar_3;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = (((
    (max (((1.055 * 
      pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_22)), vec3(0.4166667, 0.4166667, 0.4166667))
    ) - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12)
   * tmpvar_5) + (
    (((hdr_24.x * (
      (hdr_24.w * (tmpvar_27.w - 1.0))
     + 1.0)) * tmpvar_27.xyz) * tmpvar_12)
   * 
    mix (tmpvar_6, vec3(clamp ((mg_2.y + (1.0 - tmpvar_7)), 0.0, 1.0)), rlPow4AndFresnelTerm_29.yyy)
  )) + (tmpvar_34.xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_36;
  gl_FragData[1] = tmpvar_37;
  gl_FragData[2] = outGBuffer2_35;
  gl_FragData[3] = tmpvar_39;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  mediump vec4 outGBuffer2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_5;
  tmpvar_45.w = tmpvar_12;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_3;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_44 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = (color_30 + (tmpvar_43.xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = outGBuffer2_44;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  mediump vec4 outGBuffer2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_5;
  tmpvar_45.w = tmpvar_12;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_3;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_44 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = (color_30 + (tmpvar_43.xyz * _EmissionColor.xyz));
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = outGBuffer2_44;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_20;
  mediump vec3 x_22;
  x_22.x = dot (unity_SHAr, tmpvar_21);
  x_22.y = dot (unity_SHAg, tmpvar_21);
  x_22.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_13;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_23;
  tmpvar_25.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_23, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  highp vec3 viewDir_28;
  viewDir_28 = -(tmpvar_9);
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, viewDir_28), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = (viewDir_28 - (2.0 * (
    dot (tmpvar_8, viewDir_28)
   * tmpvar_8))).y;
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_29 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = (((
    max (((1.055 * pow (
      max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_22))
    , vec3(0.4166667, 0.4166667, 0.4166667))) - 0.055), vec3(0.0, 0.0, 0.0))
   * tmpvar_12) * tmpvar_5) + ((
    ((hdr_24.x * ((hdr_24.w * 
      (tmpvar_27.w - 1.0)
    ) + 1.0)) * tmpvar_27.xyz)
   * tmpvar_12) * mix (tmpvar_6, vec3(
    clamp ((mg_2.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_29.yyy)));
  mediump vec4 outGBuffer2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = tmpvar_5;
  tmpvar_36.w = tmpvar_12;
  mediump vec4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_6;
  tmpvar_37.w = tmpvar_3;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = tmpvar_34.xyz;
  gl_FragData[0] = tmpvar_36;
  gl_FragData[1] = tmpvar_37;
  gl_FragData[2] = outGBuffer2_35;
  gl_FragData[3] = tmpvar_39;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_30;
  mediump vec4 outGBuffer2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_5;
  tmpvar_45.w = tmpvar_12;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_3;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_44 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = tmpvar_43.xyz;
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = outGBuffer2_44;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  tmpvar_8.w = 0.0;
  mediump vec3 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x1_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_20.xyzz * normal_20.yzzx);
  x1_21.x = dot (unity_SHBr, tmpvar_22);
  x1_21.y = dot (unity_SHBg, tmpvar_22);
  x1_21.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = (x1_21 + (unity_SHC.xyz * (
    (normal_20.x * normal_20.x)
   - 
    (normal_20.y * normal_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_5 = (tmpvar_4 * tmpvar_7);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_3;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_8;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x_24;
  x_24.x = dot (unity_SHAr, tmpvar_23);
  x_24.y = dot (unity_SHAg, tmpvar_23);
  x_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_21 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_24)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * tmpvar_12);
  mediump vec3 tmpvar_25;
  tmpvar_25 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_26;
  hdr_26 = tmpvar_13;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_28;
  tmpvar_28 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_25, tmpvar_27.w);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  tmpvar_22 = (((hdr_26.x * 
    ((hdr_26.w * (tmpvar_29.w - 1.0)) + 1.0)
  ) * tmpvar_29.xyz) * tmpvar_12);
  mediump vec3 color_30;
  mediump float surfaceReduction_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_3;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_33 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_33;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_32 = tmpvar_38;
  surfaceReduction_31 = (1.0 - ((roughness_32 * perceptualRoughness_33) * 0.28));
  mediump float x_40;
  x_40 = (1.0 - tmpvar_34);
  mediump vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_6, vec3(clamp ((mg_2.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_40 * x_40) * (x_40 * x_40))));
  highp vec3 tmpvar_42;
  tmpvar_42 = ((tmpvar_21 * tmpvar_5) + ((surfaceReduction_31 * tmpvar_22) * tmpvar_41));
  color_30 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_30;
  mediump vec4 outGBuffer2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = tmpvar_5;
  tmpvar_45.w = tmpvar_12;
  mediump vec4 tmpvar_46;
  tmpvar_46.xyz = tmpvar_6;
  tmpvar_46.w = tmpvar_3;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_44 = tmpvar_47;
  mediump vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = tmpvar_43.xyz;
  gl_FragData[0] = tmpvar_45;
  gl_FragData[1] = tmpvar_46;
  gl_FragData[2] = outGBuffer2_44;
  gl_FragData[3] = tmpvar_48;
}


#endif
"
}
SubProgram "gles " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_13;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  highp vec3 viewDir_25;
  viewDir_25 = -(tmpvar_9);
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, viewDir_25), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  highp vec2 tmpvar_29;
  tmpvar_29.x = (viewDir_25 - (2.0 * (
    dot (tmpvar_8, viewDir_25)
   * tmpvar_8))).y;
  tmpvar_29.y = (1.0 - tmpvar_27);
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29 * tmpvar_29) * (tmpvar_29 * tmpvar_29));
  rlPow4AndFresnelTerm_26 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_12) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)) + (tmpvar_31.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = (tmpvar_5 * tmpvar_7);
  tmpvar_33.w = tmpvar_12;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = tmpvar_6;
  tmpvar_34.w = tmpvar_4;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_32 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_33;
  gl_FragData[1] = tmpvar_34;
  gl_FragData[2] = outGBuffer2_32;
  gl_FragData[3] = tmpvar_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  tmpvar_20 = (((hdr_22.x * 
    ((hdr_22.w * (tmpvar_25.w - 1.0)) + 1.0)
  ) * tmpvar_25.xyz) * tmpvar_12);
  mediump vec3 color_26;
  mediump float surfaceReduction_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_4;
  tmpvar_32 = (1.0 - smoothness_33);
  perceptualRoughness_29 = tmpvar_32;
  highp float tmpvar_34;
  highp float perceptualRoughness_35;
  perceptualRoughness_35 = perceptualRoughness_29;
  tmpvar_34 = (perceptualRoughness_35 * perceptualRoughness_35);
  roughness_28 = tmpvar_34;
  surfaceReduction_27 = (1.0 - ((roughness_28 * perceptualRoughness_29) * 0.28));
  mediump float x_36;
  x_36 = (1.0 - tmpvar_30);
  mediump vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_6, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_36 * x_36) * (x_36 * x_36))));
  highp vec3 tmpvar_38;
  tmpvar_38 = ((surfaceReduction_27 * tmpvar_20) * tmpvar_37);
  color_26 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (color_26 + (tmpvar_39.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41.xyz = (tmpvar_5 * tmpvar_7);
  tmpvar_41.w = tmpvar_12;
  mediump vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_40 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = outGBuffer2_40;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 emissiveColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD1);
  mediump float occ_10;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_10 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 - _OcclusionStrength) + (occ_10 * _OcclusionStrength));
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  worldViewDir_14 = -(tmpvar_9);
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_14);
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  tmpvar_20 = (((hdr_22.x * 
    ((hdr_22.w * (tmpvar_25.w - 1.0)) + 1.0)
  ) * tmpvar_25.xyz) * tmpvar_12);
  mediump vec3 color_26;
  mediump float surfaceReduction_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_8, -(tmpvar_9)), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_4;
  tmpvar_32 = (1.0 - smoothness_33);
  perceptualRoughness_29 = tmpvar_32;
  highp float tmpvar_34;
  highp float perceptualRoughness_35;
  perceptualRoughness_35 = perceptualRoughness_29;
  tmpvar_34 = (perceptualRoughness_35 * perceptualRoughness_35);
  roughness_28 = tmpvar_34;
  surfaceReduction_27 = (1.0 - ((roughness_28 * perceptualRoughness_29) * 0.28));
  mediump float x_36;
  x_36 = (1.0 - tmpvar_30);
  mediump vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_6, vec3(clamp ((mg_3.y + 
    (1.0 - tmpvar_7)
  ), 0.0, 1.0)), vec3(((x_36 * x_36) * (x_36 * x_36))));
  highp vec3 tmpvar_38;
  tmpvar_38 = ((surfaceReduction_27 * tmpvar_20) * tmpvar_37);
  color_26 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  emissiveColor_1 = (color_26 + (tmpvar_39.xyz * _EmissionColor.xyz));
  emissiveColor_1 = exp2(-(emissiveColor_1));
  mediump vec4 outGBuffer2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41.xyz = (tmpvar_5 * tmpvar_7);
  tmpvar_41.w = tmpvar_12;
  mediump vec4 tmpvar_42;
  tmpvar_42.xyz = tmpvar_6;
  tmpvar_42.w = tmpvar_4;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = ((tmpvar_8 * 0.5) + 0.5);
  outGBuffer2_40 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = emissiveColor_1;
  gl_FragData[0] = tmpvar_41;
  gl_FragData[1] = tmpvar_42;
  gl_FragData[2] = outGBuffer2_40;
  gl_FragData[3] = tmpvar_44;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "_EMISSION" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
""
}
}
}
 Pass {
  Name "META"
  LOD 300
  Tags { "LIGHTMODE" = "META" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 287608
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
""
}
}
}
}
SubShader {
 LOD 150
 Tags { "PerformanceChecks" = "False" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 150
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 378374
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_9 = tmpvar_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump float tmpvar_14;
  highp float tmpvar_15;
  highp float smoothness_16;
  smoothness_16 = tmpvar_5;
  tmpvar_15 = (1.0 - smoothness_16);
  tmpvar_14 = tmpvar_15;
  mediump vec4 hdr_17;
  hdr_17 = tmpvar_13;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_18.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  lowp vec4 tmpvar_19;
  tmpvar_19 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_18.w);
  mediump vec4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_5;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    ((hdr_17.x * ((hdr_17.w * 
      (tmpvar_20.w - 1.0)
    ) + 1.0)) * tmpvar_20.xyz)
   * tmpvar_11) * mix (tmpvar_7, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_22 * tmpvar_7)
  ) * (tmpvar_8 * tmpvar_9)));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_28.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_5;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_5;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((
    (xlv_TEXCOORD2.xyz * tmpvar_12)
   * tmpvar_7) + (
    (((hdr_18.x * (
      (hdr_18.w * (tmpvar_21.w - 1.0))
     + 1.0)) * tmpvar_21.xyz) * tmpvar_12)
   * 
    mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_7 + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  realtimeShadowAttenuation_2 = tmpvar_12;
  mediump float occ_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_16 = tmpvar_17;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_6;
  tmpvar_20 = (1.0 - smoothness_21);
  tmpvar_19 = tmpvar_20;
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_18;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_23.w = ((tmpvar_19 * (1.7 - 
    (0.7 * tmpvar_19)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((
    ((hdr_22.x * ((hdr_22.w * 
      (tmpvar_25.w - 1.0)
    ) + 1.0)) * tmpvar_25.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_16 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_27 * tmpvar_8)
  ) * (
    (tmpvar_9 * realtimeShadowAttenuation_2)
   * tmpvar_10)));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_2 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_19;
  occlusion_19 = ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength));
  highp vec4 tmpvar_20;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_6;
  tmpvar_22 = (1.0 - smoothness_23);
  tmpvar_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_20;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_25.w = ((tmpvar_21 * (1.7 - 
    (0.7 * tmpvar_21)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  mediump float tmpvar_28;
  tmpvar_28 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_6;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_19)
   * tmpvar_8) + (
    (((hdr_24.x * (
      (hdr_24.w * (tmpvar_27.w - 1.0))
     + 1.0)) * tmpvar_27.xyz) * occlusion_19)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_29 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_2)
   * tmpvar_11)));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_9 = tmpvar_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump float tmpvar_14;
  highp float tmpvar_15;
  highp float smoothness_16;
  smoothness_16 = tmpvar_5;
  tmpvar_15 = (1.0 - smoothness_16);
  tmpvar_14 = tmpvar_15;
  mediump vec4 hdr_17;
  hdr_17 = tmpvar_13;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_18.w = ((tmpvar_14 * (1.7 - 
    (0.7 * tmpvar_14)
  )) * 6.0);
  lowp vec4 tmpvar_19;
  tmpvar_19 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_18.w);
  mediump vec4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump float tmpvar_21;
  tmpvar_21 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_5;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((
    ((hdr_17.x * ((hdr_17.w * 
      (tmpvar_20.w - 1.0)
    ) + 1.0)) * tmpvar_20.xyz)
   * tmpvar_11) * mix (tmpvar_7, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_22 * tmpvar_7)
  ) * (tmpvar_8 * tmpvar_9)));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  c_1.xyz = color_25;
  mediump vec4 xlat_varoutput_39;
  xlat_varoutput_39.xyz = c_1.xyz;
  xlat_varoutput_39.w = 1.0;
  gl_FragData[0] = xlat_varoutput_39;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_28.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  highp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_2 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_5;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_5;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = (((
    (xlv_TEXCOORD2.xyz * tmpvar_12)
   * tmpvar_7) + (
    (((hdr_18.x * (
      (hdr_18.w * (tmpvar_21.w - 1.0))
     + 1.0)) * tmpvar_21.xyz) * tmpvar_12)
   * 
    mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_7 + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  c_1.xyz = color_26;
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  lowp float tmpvar_12;
  highp float lightShadowDataX_13;
  mediump float tmpvar_14;
  tmpvar_14 = _LightShadowData.x;
  lightShadowDataX_13 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_13);
  tmpvar_12 = tmpvar_15;
  realtimeShadowAttenuation_2 = tmpvar_12;
  mediump float occ_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_16 = tmpvar_17;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18 = unity_SpecCube0_HDR;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_6;
  tmpvar_20 = (1.0 - smoothness_21);
  tmpvar_19 = tmpvar_20;
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_18;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_23.w = ((tmpvar_19 * (1.7 - 
    (0.7 * tmpvar_19)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump float tmpvar_26;
  tmpvar_26 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = (((
    ((hdr_22.x * ((hdr_22.w * 
      (tmpvar_25.w - 1.0)
    ) + 1.0)) * tmpvar_25.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_16 * _OcclusionStrength))
  ) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_27 * tmpvar_8)
  ) * (
    (tmpvar_9 * realtimeShadowAttenuation_2)
   * tmpvar_10)));
  mediump vec4 xlat_varoutput_32;
  xlat_varoutput_32.xyz = tmpvar_31.xyz;
  xlat_varoutput_32.w = 1.0;
  gl_FragData[0] = xlat_varoutput_32;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  c_1.xyz = color_43;
  mediump vec4 xlat_varoutput_66;
  xlat_varoutput_66.xyz = c_1.xyz;
  xlat_varoutput_66.w = 1.0;
  gl_FragData[0] = xlat_varoutput_66;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float rl_1;
  mediump float realtimeShadowAttenuation_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_2 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_1 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_19;
  occlusion_19 = ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength));
  highp vec4 tmpvar_20;
  tmpvar_20 = unity_SpecCube0_HDR;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_6;
  tmpvar_22 = (1.0 - smoothness_23);
  tmpvar_21 = tmpvar_22;
  mediump vec4 hdr_24;
  hdr_24 = tmpvar_20;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_25.w = ((tmpvar_21 * (1.7 - 
    (0.7 * tmpvar_21)
  )) * 6.0);
  lowp vec4 tmpvar_26;
  tmpvar_26 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_25.w);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  mediump float tmpvar_28;
  tmpvar_28 = ((rl_1 * rl_1) * (rl_1 * rl_1));
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_6;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((
    (xlv_TEXCOORD2.xyz * occlusion_19)
   * tmpvar_8) + (
    (((hdr_24.x * (
      (hdr_24.w * (tmpvar_27.w - 1.0))
     + 1.0)) * tmpvar_27.xyz) * occlusion_19)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_29 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_2)
   * tmpvar_11)));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  c_1.xyz = color_48;
  mediump vec4 xlat_varoutput_71;
  xlat_varoutput_71.xyz = c_1.xyz;
  xlat_varoutput_71.w = 1.0;
  gl_FragData[0] = xlat_varoutput_71;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_1;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_25, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_25, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_28.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_41));
  mediump vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = c_1.xyz;
  xlat_varoutput_42.w = 1.0;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_41));
  mediump vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = c_1.xyz;
  xlat_varoutput_42.w = 1.0;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_26, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 res_22;
  mediump vec3 x_23;
  x_23.x = dot (unity_SHAr, tmpvar_21);
  x_23.y = dot (unity_SHAg, tmpvar_21);
  x_23.z = dot (unity_SHAb, tmpvar_21);
  mediump vec3 x1_24;
  mediump vec4 tmpvar_25;
  tmpvar_25 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_24.x = dot (unity_SHBr, tmpvar_25);
  x1_24.y = dot (unity_SHBg, tmpvar_25);
  x1_24.z = dot (unity_SHBb, tmpvar_25);
  res_22 = (x_23 + (x1_24 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_26;
  tmpvar_26 = max (((1.055 * 
    pow (max (res_22, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_22 = tmpvar_26;
  ambientOrLightmapUV_20.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_26);
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_26, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = c_1;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_4;
  mediump vec3 res_20;
  mediump vec3 x_21;
  x_21.x = dot (unity_SHAr, tmpvar_19);
  x_21.y = dot (unity_SHAg, tmpvar_19);
  x_21.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  res_20 = (x_21 + (x1_22 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_24;
  tmpvar_24 = max (((1.055 * 
    pow (max (res_20, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_20 = tmpvar_24;
  ambientOrLightmapUV_18.xyz = max (vec3(0.0, 0.0, 0.0), tmpvar_24);
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_25;
  x_25 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_25 * x_25) * (x_25 * x_25));
  mediump float tmpvar_26;
  tmpvar_26 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_27;
  tmpvar_27 = clamp ((_Glossiness + tmpvar_26), 0.0, 1.0);
  tmpvar_6.w = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_28;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = c_1;
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  mediump vec3 x1_22;
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_22.x = dot (unity_SHBr, tmpvar_23);
  x1_22.y = dot (unity_SHBg, tmpvar_23);
  x1_22.z = dot (unity_SHBb, tmpvar_23);
  ambientOrLightmapUV_21.xyz = (x1_22 + (unity_SHC.xyz * (
    (normalWorld_20.x * normalWorld_20.x)
   - 
    (normalWorld_20.y * normalWorld_20.y)
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_1;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_25, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  highp float tmpvar_39;
  tmpvar_39 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_25, vec3(tmpvar_39));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = c_1.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_28.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = c_1;
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_41));
  mediump vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = c_1.xyz;
  xlat_varoutput_42.w = 1.0;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_26 + (tmpvar_40.xyz * _EmissionColor.xyz));
  highp float tmpvar_41;
  tmpvar_41 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_41));
  mediump vec4 xlat_varoutput_42;
  xlat_varoutput_42.xyz = c_1.xyz;
  xlat_varoutput_42.w = 1.0;
  gl_FragData[0] = xlat_varoutput_42;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_13 = tmpvar_14.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_6;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec4 hdr_19;
  hdr_19 = tmpvar_15;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_20.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_21;
  tmpvar_21 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_20.w);
  mediump vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump float tmpvar_23;
  tmpvar_23 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_6;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * tmpvar_13)
   * tmpvar_8) + (
    (((hdr_19.x * (
      (hdr_19.w * (tmpvar_22.w - 1.0))
     + 1.0)) * tmpvar_22.xyz) * tmpvar_13)
   * 
    mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_8 + 
    (specular_24 * tmpvar_9)
  ) * (tmpvar_10 * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_26, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_18;
  mediump vec4 ambientOrLightmapUV_20;
  ambientOrLightmapUV_20.w = 0.0;
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = normalWorld_19;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_35.w));
  ambientOrLightmapUV_20.xyz = col_27;
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalWorld_19;
  mediump vec3 res_37;
  mediump vec3 x_38;
  x_38.x = dot (unity_SHAr, tmpvar_36);
  x_38.y = dot (unity_SHAg, tmpvar_36);
  x_38.z = dot (unity_SHAb, tmpvar_36);
  mediump vec3 x1_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normalWorld_19.xyzz * normalWorld_19.yzzx);
  x1_39.x = dot (unity_SHBr, tmpvar_40);
  x1_39.y = dot (unity_SHBg, tmpvar_40);
  x1_39.z = dot (unity_SHBb, tmpvar_40);
  res_37 = (x_38 + (x1_39 + (unity_SHC.xyz * 
    ((normalWorld_19.x * normalWorld_19.x) - (normalWorld_19.y * normalWorld_19.y))
  )));
  mediump vec3 tmpvar_41;
  tmpvar_41 = max (((1.055 * 
    pow (max (res_37, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_37 = tmpvar_41;
  ambientOrLightmapUV_20.xyz = (ambientOrLightmapUV_20.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_41));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_20;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_8;
  tmpvar_8 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_6 = (tmpvar_5 * tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec4 tmpvar_13;
  tmpvar_13 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  worldViewDir_14 = tmpvar_15;
  mediump vec3 Normal_16;
  Normal_16 = tmpvar_9;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_4;
  tmpvar_18 = (1.0 - smoothness_19);
  tmpvar_17 = tmpvar_18;
  mediump vec3 I_20;
  I_20 = -(worldViewDir_14);
  mediump vec3 tmpvar_21;
  tmpvar_21 = (I_20 - (2.0 * (
    dot (Normal_16, I_20)
   * Normal_16)));
  mediump vec4 hdr_22;
  hdr_22 = tmpvar_13;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = tmpvar_21;
  tmpvar_23.w = ((tmpvar_17 * (1.7 - 
    (0.7 * tmpvar_17)
  )) * 6.0);
  lowp vec4 tmpvar_24;
  tmpvar_24 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_21, tmpvar_23.w);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec3 color_26;
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_9, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_9, tmpvar_15), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_9, tmpvar_15) * tmpvar_9)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  color_26 = ((tmpvar_6 + (specular_35 * tmpvar_7)) * (tmpvar_10 * tmpvar_28));
  color_26 = (color_26 + ((
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6) + (
    (((hdr_22.x * (
      (hdr_22.w * (tmpvar_25.w - 1.0))
     + 1.0)) * tmpvar_25.xyz) * tmpvar_11)
   * 
    mix (tmpvar_7, vec3(clamp ((mg_3.y + (1.0 - tmpvar_8)), 0.0, 1.0)), rlPow4AndFresnelTerm_27.yyy)
  )));
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = color_26;
  c_1.w = tmpvar_39.w;
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_26, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_32.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = c_1;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_43 + (tmpvar_66.xyz * _EmissionColor.xyz));
  highp float tmpvar_67;
  tmpvar_67 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_67));
  mediump vec4 xlat_varoutput_68;
  xlat_varoutput_68.xyz = c_1.xyz;
  xlat_varoutput_68.w = 1.0;
  gl_FragData[0] = xlat_varoutput_68;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  lowp float tmpvar_13;
  highp float lightShadowDataX_14;
  mediump float tmpvar_15;
  tmpvar_15 = _LightShadowData.x;
  lightShadowDataX_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_14);
  tmpvar_13 = tmpvar_16;
  realtimeShadowAttenuation_3 = tmpvar_13;
  mediump float occ_17;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_17 = tmpvar_18;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19 = unity_SpecCube0_HDR;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  highp float smoothness_22;
  smoothness_22 = tmpvar_7;
  tmpvar_21 = (1.0 - smoothness_22);
  tmpvar_20 = tmpvar_21;
  mediump vec4 hdr_23;
  hdr_23 = tmpvar_19;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_24.w = ((tmpvar_20 * (1.7 - 
    (0.7 * tmpvar_20)
  )) * 6.0);
  lowp vec4 tmpvar_25;
  tmpvar_25 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_24.w);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  mediump float tmpvar_27;
  tmpvar_27 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_28;
  highp float smoothness_29;
  smoothness_29 = tmpvar_7;
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_27;
  tmpvar_30.y = (1.0 - smoothness_29);
  highp float tmpvar_31;
  tmpvar_31 = (texture2D (unity_NHxRoughness, tmpvar_30).w * 16.0);
  specular_28 = tmpvar_31;
  c_1 = (((
    ((hdr_23.x * ((hdr_23.w * 
      (tmpvar_26.w - 1.0)
    ) + 1.0)) * tmpvar_26.xyz)
   * 
    ((1.0 - _OcclusionStrength) + (occ_17 * _OcclusionStrength))
  ) * mix (tmpvar_9, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_28 * tmpvar_9)
  ) * (
    (tmpvar_10 * realtimeShadowAttenuation_3)
   * tmpvar_11)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = c_1;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = tmpvar_32.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_17 * tmpvar_18));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  highp vec4 tmpvar_28;
  tmpvar_28 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_29;
  worldViewDir_29 = -(tmpvar_11);
  mediump vec3 Normal_30;
  Normal_30 = tmpvar_10;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  highp float smoothness_33;
  smoothness_33 = tmpvar_5;
  tmpvar_32 = (1.0 - smoothness_33);
  tmpvar_31 = tmpvar_32;
  mediump vec3 I_34;
  I_34 = -(worldViewDir_29);
  mediump vec3 tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_35 = (tmpvar_12 * atten_27);
  mediump vec3 tmpvar_37;
  tmpvar_37 = (I_34 - (2.0 * (
    dot (Normal_30, I_34)
   * Normal_30)));
  mediump vec4 hdr_38;
  hdr_38 = tmpvar_28;
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = tmpvar_37;
  tmpvar_39.w = ((tmpvar_31 * (1.7 - 
    (0.7 * tmpvar_31)
  )) * 6.0);
  lowp vec4 tmpvar_40;
  tmpvar_40 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_37, tmpvar_39.w);
  mediump vec4 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  tmpvar_36 = (((hdr_38.x * 
    ((hdr_38.w * (tmpvar_41.w - 1.0)) + 1.0)
  ) * tmpvar_41.xyz) * ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength)));
  highp vec3 viewDir_42;
  viewDir_42 = -(tmpvar_11);
  mediump vec3 color_43;
  mediump float surfaceReduction_44;
  highp float specularTerm_45;
  highp float a2_46;
  mediump float roughness_47;
  mediump float perceptualRoughness_48;
  highp vec3 tmpvar_49;
  highp vec3 inVec_50;
  inVec_50 = (_WorldSpaceLightPos0.xyz + viewDir_42);
  tmpvar_49 = (inVec_50 * inversesqrt(max (0.001, 
    dot (inVec_50, inVec_50)
  )));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (dot (tmpvar_10, tmpvar_49), 0.0, 1.0);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (tmpvar_10, viewDir_42), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  highp float tmpvar_56;
  highp float smoothness_57;
  smoothness_57 = tmpvar_5;
  tmpvar_56 = (1.0 - smoothness_57);
  perceptualRoughness_48 = tmpvar_56;
  highp float tmpvar_58;
  highp float perceptualRoughness_59;
  perceptualRoughness_59 = perceptualRoughness_48;
  tmpvar_58 = (perceptualRoughness_59 * perceptualRoughness_59);
  roughness_47 = tmpvar_58;
  mediump float tmpvar_60;
  tmpvar_60 = (roughness_47 * roughness_47);
  a2_46 = tmpvar_60;
  specularTerm_45 = ((roughness_47 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_49), 0.0, 1.0)) * (1.5 + roughness_47))
   * 
    (((tmpvar_53 * tmpvar_53) * (a2_46 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_61;
  tmpvar_61 = clamp (specularTerm_45, 0.0, 100.0);
  specularTerm_45 = tmpvar_61;
  surfaceReduction_44 = (1.0 - ((roughness_47 * perceptualRoughness_48) * 0.28));
  mediump float x_62;
  x_62 = (1.0 - tmpvar_54);
  mediump vec3 tmpvar_63;
  tmpvar_63 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_62 * x_62) * (x_62 * x_62))));
  highp vec3 tmpvar_64;
  tmpvar_64 = (((
    (tmpvar_7 + (tmpvar_61 * tmpvar_8))
   * tmpvar_35) * tmpvar_51) + ((surfaceReduction_44 * tmpvar_36) * tmpvar_63));
  color_43 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = color_43;
  c_1.w = tmpvar_65.w;
  highp float tmpvar_66;
  tmpvar_66 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_43, vec3(tmpvar_66));
  mediump vec4 xlat_varoutput_67;
  xlat_varoutput_67.xyz = c_1.xyz;
  xlat_varoutput_67.w = 1.0;
  gl_FragData[0] = xlat_varoutput_67;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_34.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = c_1;
  mediump vec4 xlat_varoutput_36;
  xlat_varoutput_36.xyz = tmpvar_35.xyz;
  xlat_varoutput_36.w = 1.0;
  gl_FragData[0] = xlat_varoutput_36;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_48 + (tmpvar_71.xyz * _EmissionColor.xyz));
  highp float tmpvar_72;
  tmpvar_72 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_72));
  mediump vec4 xlat_varoutput_73;
  xlat_varoutput_73.xyz = c_1.xyz;
  xlat_varoutput_73.w = 1.0;
  gl_FragData[0] = xlat_varoutput_73;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_WorldToShadow[4];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  mediump vec4 ambientOrLightmapUV_18;
  ambientOrLightmapUV_18.w = 0.0;
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = normalWorld_4;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (lengthSq_27, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_27 = tmpvar_31;
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(tmpvar_31)));
  ndotl_26 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (tmpvar_31 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_33.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_33.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_33.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_33.w));
  ambientOrLightmapUV_18.xyz = col_25;
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = normalWorld_4;
  mediump vec3 res_35;
  mediump vec3 x_36;
  x_36.x = dot (unity_SHAr, tmpvar_34);
  x_36.y = dot (unity_SHAg, tmpvar_34);
  x_36.z = dot (unity_SHAb, tmpvar_34);
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_4.xyzz * normalWorld_4.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  res_35 = (x_36 + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_4.x * normalWorld_4.x) - (normalWorld_4.y * normalWorld_4.y))
  )));
  mediump vec3 tmpvar_39;
  tmpvar_39 = max (((1.055 * 
    pow (max (res_35, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_35 = tmpvar_39;
  ambientOrLightmapUV_18.xyz = (ambientOrLightmapUV_18.xyz + max (vec3(0.0, 0.0, 0.0), tmpvar_39));
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_40;
  x_40 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_40 * x_40) * (x_40 * x_40));
  mediump float tmpvar_41;
  tmpvar_41 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_42;
  tmpvar_42 = clamp ((_Glossiness + tmpvar_41), 0.0, 1.0);
  tmpvar_6.w = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_43;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = ambientOrLightmapUV_18;
  xlv_TEXCOORD3 = (unity_WorldToShadow[0] * (unity_ObjectToWorld * _glesVertex));
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  mediump float realtimeShadowAttenuation_3;
  highp vec3 tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  tmpvar_4 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = _LightColor0.xyz;
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (dot (tmpvar_4, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  lowp float tmpvar_14;
  highp float lightShadowDataX_15;
  mediump float tmpvar_16;
  tmpvar_16 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2D (_ShadowMapTexture, xlv_TEXCOORD3.xy).x > xlv_TEXCOORD3.z)), lightShadowDataX_15);
  tmpvar_14 = tmpvar_17;
  realtimeShadowAttenuation_3 = tmpvar_14;
  mediump float occ_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_18 = tmpvar_19;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  mediump float occlusion_20;
  occlusion_20 = ((1.0 - _OcclusionStrength) + (occ_18 * _OcclusionStrength));
  highp vec4 tmpvar_21;
  tmpvar_21 = unity_SpecCube0_HDR;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_7;
  tmpvar_23 = (1.0 - smoothness_24);
  tmpvar_22 = tmpvar_23;
  mediump vec4 hdr_25;
  hdr_25 = tmpvar_21;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_26.w = ((tmpvar_22 * (1.7 - 
    (0.7 * tmpvar_22)
  )) * 6.0);
  lowp vec4 tmpvar_27;
  tmpvar_27 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_26.w);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump float tmpvar_29;
  tmpvar_29 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_30;
  highp float smoothness_31;
  smoothness_31 = tmpvar_7;
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_29;
  tmpvar_32.y = (1.0 - smoothness_31);
  highp float tmpvar_33;
  tmpvar_33 = (texture2D (unity_NHxRoughness, tmpvar_32).w * 16.0);
  specular_30 = tmpvar_33;
  c_1 = (((
    (xlv_TEXCOORD2.xyz * occlusion_20)
   * tmpvar_9) + (
    (((hdr_25.x * (
      (hdr_25.w * (tmpvar_28.w - 1.0))
     + 1.0)) * tmpvar_28.xyz) * occlusion_20)
   * 
    mix (tmpvar_10, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)
  )) + ((tmpvar_9 + 
    (specular_30 * tmpvar_10)
  ) * (
    (tmpvar_11 * realtimeShadowAttenuation_3)
   * tmpvar_12)));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = c_1;
  mediump vec4 xlat_varoutput_35;
  xlat_varoutput_35.xyz = tmpvar_34.xyz;
  xlat_varoutput_35.w = 1.0;
  gl_FragData[0] = xlat_varoutput_35;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_9 = tmpvar_10.xyz;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  tmpvar_15 = n_16;
  tmpvar_4 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((norm_17 * tmpvar_18));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_19;
  mediump vec4 ambientOrLightmapUV_21;
  ambientOrLightmapUV_21.w = 0.0;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 normal_27;
  normal_27 = normalWorld_20;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * normal_27.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * normal_27.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * normal_27.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_26)
  ))));
  col_28 = (lightColor0_22 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_23 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_24 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_25 * tmpvar_36.w));
  ambientOrLightmapUV_21.xyz = col_28;
  mediump vec3 x1_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = (normalWorld_20.xyzz * normalWorld_20.yzzx);
  x1_37.x = dot (unity_SHBr, tmpvar_38);
  x1_37.y = dot (unity_SHBg, tmpvar_38);
  x1_37.z = dot (unity_SHBb, tmpvar_38);
  ambientOrLightmapUV_21.xyz = ((ambientOrLightmapUV_21.xyz * (
    (ambientOrLightmapUV_21.xyz * ((ambientOrLightmapUV_21.xyz * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_37 + (unity_SHC.xyz * 
    ((normalWorld_20.x * normalWorld_20.x) - (normalWorld_20.y * normalWorld_20.y))
  )));
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = ambientOrLightmapUV_21;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump float _OcclusionStrength;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  mediump float tmpvar_9;
  tmpvar_9 = (0.7790837 - (_Metallic * 0.7790837));
  tmpvar_7 = (tmpvar_6 * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD1);
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  mediump float realtimeShadowAttenuation_13;
  highp vec4 v_14;
  v_14.x = unity_MatrixV[0].z;
  v_14.y = unity_MatrixV[1].z;
  v_14.z = unity_MatrixV[2].z;
  v_14.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD8 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD8), v_14.xyz), sqrt(dot (tmpvar_15, tmpvar_15)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_16 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD8;
  lowp float tmpvar_19;
  highp vec4 shadowCoord_20;
  shadowCoord_20 = (unity_WorldToShadow[0] * tmpvar_18);
  highp float lightShadowDataX_21;
  mediump float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((texture2D (_ShadowMapTexture, shadowCoord_20.xy).x > shadowCoord_20.z)), lightShadowDataX_21);
  tmpvar_19 = tmpvar_23;
  realtimeShadowAttenuation_13 = tmpvar_19;
  mediump float tmpvar_24;
  tmpvar_24 = clamp ((realtimeShadowAttenuation_13 + tmpvar_16), 0.0, 1.0);
  atten_2 = tmpvar_24;
  mediump float occ_25;
  lowp float tmpvar_26;
  tmpvar_26 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy).y;
  occ_25 = tmpvar_26;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump float occlusion_28;
  occlusion_28 = ((1.0 - _OcclusionStrength) + (occ_25 * _OcclusionStrength));
  highp vec4 tmpvar_29;
  tmpvar_29 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_30;
  worldViewDir_30 = -(tmpvar_11);
  mediump vec3 Normal_31;
  Normal_31 = tmpvar_10;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  highp float smoothness_34;
  smoothness_34 = tmpvar_5;
  tmpvar_33 = (1.0 - smoothness_34);
  tmpvar_32 = tmpvar_33;
  mediump vec3 I_35;
  I_35 = -(worldViewDir_30);
  mediump vec3 normalWorld_36;
  normalWorld_36 = tmpvar_10;
  mediump vec3 tmpvar_37;
  mediump vec3 tmpvar_38;
  mediump vec3 tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = normalWorld_36;
  mediump vec3 x_41;
  x_41.x = dot (unity_SHAr, tmpvar_40);
  x_41.y = dot (unity_SHAg, tmpvar_40);
  x_41.z = dot (unity_SHAb, tmpvar_40);
  tmpvar_37 = (tmpvar_12 * atten_27);
  tmpvar_38 = (max ((
    (1.055 * pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD5.xyz + x_41)), vec3(0.4166667, 0.4166667, 0.4166667)))
   - 0.055), vec3(0.0, 0.0, 0.0)) * occlusion_28);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (I_35 - (2.0 * (
    dot (Normal_31, I_35)
   * Normal_31)));
  mediump vec4 hdr_43;
  hdr_43 = tmpvar_29;
  mediump vec4 tmpvar_44;
  tmpvar_44.xyz = tmpvar_42;
  tmpvar_44.w = ((tmpvar_32 * (1.7 - 
    (0.7 * tmpvar_32)
  )) * 6.0);
  lowp vec4 tmpvar_45;
  tmpvar_45 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_42, tmpvar_44.w);
  mediump vec4 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  tmpvar_39 = (((hdr_43.x * 
    ((hdr_43.w * (tmpvar_46.w - 1.0)) + 1.0)
  ) * tmpvar_46.xyz) * occlusion_28);
  highp vec3 viewDir_47;
  viewDir_47 = -(tmpvar_11);
  mediump vec3 color_48;
  mediump float surfaceReduction_49;
  highp float specularTerm_50;
  highp float a2_51;
  mediump float roughness_52;
  mediump float perceptualRoughness_53;
  highp vec3 tmpvar_54;
  highp vec3 inVec_55;
  inVec_55 = (_WorldSpaceLightPos0.xyz + viewDir_47);
  tmpvar_54 = (inVec_55 * inversesqrt(max (0.001, 
    dot (inVec_55, inVec_55)
  )));
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (tmpvar_10, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (dot (tmpvar_10, tmpvar_54), 0.0, 1.0);
  mediump float tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (tmpvar_10, viewDir_47), 0.0, 1.0);
  tmpvar_59 = tmpvar_60;
  highp float tmpvar_61;
  highp float smoothness_62;
  smoothness_62 = tmpvar_5;
  tmpvar_61 = (1.0 - smoothness_62);
  perceptualRoughness_53 = tmpvar_61;
  highp float tmpvar_63;
  highp float perceptualRoughness_64;
  perceptualRoughness_64 = perceptualRoughness_53;
  tmpvar_63 = (perceptualRoughness_64 * perceptualRoughness_64);
  roughness_52 = tmpvar_63;
  mediump float tmpvar_65;
  tmpvar_65 = (roughness_52 * roughness_52);
  a2_51 = tmpvar_65;
  specularTerm_50 = ((roughness_52 / (
    (max (0.32, clamp (dot (_WorldSpaceLightPos0.xyz, tmpvar_54), 0.0, 1.0)) * (1.5 + roughness_52))
   * 
    (((tmpvar_58 * tmpvar_58) * (a2_51 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_66;
  tmpvar_66 = clamp (specularTerm_50, 0.0, 100.0);
  specularTerm_50 = tmpvar_66;
  surfaceReduction_49 = (1.0 - ((roughness_52 * perceptualRoughness_53) * 0.28));
  mediump float x_67;
  x_67 = (1.0 - tmpvar_59);
  mediump vec3 tmpvar_68;
  tmpvar_68 = mix (tmpvar_8, vec3(clamp ((mg_4.y + 
    (1.0 - tmpvar_9)
  ), 0.0, 1.0)), vec3(((x_67 * x_67) * (x_67 * x_67))));
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    ((tmpvar_7 + (tmpvar_66 * tmpvar_8)) * tmpvar_37)
   * tmpvar_56) + (tmpvar_38 * tmpvar_7)) + ((surfaceReduction_49 * tmpvar_39) * tmpvar_68));
  color_48 = tmpvar_69;
  mediump vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = color_48;
  c_1.w = tmpvar_70.w;
  highp float tmpvar_71;
  tmpvar_71 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, color_48, vec3(tmpvar_71));
  mediump vec4 xlat_varoutput_72;
  xlat_varoutput_72.xyz = c_1.xyz;
  xlat_varoutput_72.w = 1.0;
  gl_FragData[0] = xlat_varoutput_72;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_8.xyz = normalWorld_4;
  tmpvar_6.xyz = eyeVec_5;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  mediump float x_18;
  x_18 = (1.0 - clamp (dot (normalWorld_4, 
    -(eyeVec_5)
  ), 0.0, 1.0));
  tmpvar_8.w = ((x_18 * x_18) * (x_18 * x_18));
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (0.7790837 - (_Metallic * 0.7790837)));
  highp float tmpvar_20;
  tmpvar_20 = clamp ((_Glossiness + tmpvar_19), 0.0, 1.0);
  tmpvar_6.w = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  mediump float rl_2;
  highp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_3 = xlv_TEXCOORD5.xyz;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_10 = tmpvar_11;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  rl_2 = dot (xlv_TEXCOORD4.yzw, _WorldSpaceLightPos0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  highp float smoothness_17;
  smoothness_17 = tmpvar_6;
  tmpvar_16 = (1.0 - smoothness_17);
  tmpvar_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_14;
  mediump vec4 tmpvar_19;
  tmpvar_19.xyz = xlv_TEXCOORD4.yzw;
  tmpvar_19.w = ((tmpvar_15 * (1.7 - 
    (0.7 * tmpvar_15)
  )) * 6.0);
  lowp vec4 tmpvar_20;
  tmpvar_20 = impl_low_textureCubeLodEXT (unity_SpecCube0, xlv_TEXCOORD4.yzw, tmpvar_19.w);
  mediump vec4 tmpvar_21;
  tmpvar_21 = tmpvar_20;
  mediump float tmpvar_22;
  tmpvar_22 = ((rl_2 * rl_2) * (rl_2 * rl_2));
  mediump float specular_23;
  highp float smoothness_24;
  smoothness_24 = tmpvar_6;
  highp vec2 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = (1.0 - smoothness_24);
  highp float tmpvar_26;
  tmpvar_26 = (texture2D (unity_NHxRoughness, tmpvar_25).w * 16.0);
  specular_23 = tmpvar_26;
  c_1 = (((
    ((hdr_18.x * ((hdr_18.w * 
      (tmpvar_21.w - 1.0)
    ) + 1.0)) * tmpvar_21.xyz)
   * tmpvar_12) * mix (tmpvar_8, xlv_TEXCOORD1.www, xlv_TEXCOORD5.www)) + ((
    (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)))
   + 
    (specular_23 * tmpvar_8)
  ) * (tmpvar_9 * tmpvar_10)));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1 = (c_1 + (tmpvar_27.xyz * _EmissionColor.xyz));
  c_1 = mix (unity_FogColor.xyz, c_1, vec3(clamp (xlv_TEXCOORD4.x, 0.0, 1.0)));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = c_1;
  mediump vec4 xlat_varoutput_29;
  xlat_varoutput_29.xyz = tmpvar_28.xyz;
  xlat_varoutput_29.w = 1.0;
  gl_FragData[0] = xlat_varoutput_29;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_8 = tmpvar_9.xyz;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
	return textureCubeLodEXT(sampler, coord, lod);
#else
	return textureCube(sampler, coord, lod);
#endif
}

uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 unity_FogColor;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  mediump float tmpvar_7;
  tmpvar_7 = (0.7790837 - (_Metallic * 0.7790837));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  mediump float tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_10 = tmpvar_11.y;
  highp vec4 tmpvar_12;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 worldViewDir_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = -(xlv_TEXCOORD1);
  worldViewDir_13 = tmpvar_14;
  mediump vec3 Normal_15;
  Normal_15 = tmpvar_8;
  mediump float tmpvar_16;
  highp float tmpvar_17;
  highp float smoothness_18;
  smoothness_18 = tmpvar_4;
  tmpvar_17 = (1.0 - smoothness_18);
  tmpvar_16 = tmpvar_17;
  mediump vec3 I_19;
  I_19 = -(worldViewDir_13);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (I_19 - (2.0 * (
    dot (Normal_15, I_19)
   * Normal_15)));
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_12;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = ((tmpvar_16 * (1.7 - 
    (0.7 * tmpvar_16)
  )) * 6.0);
  lowp vec4 tmpvar_23;
  tmpvar_23 = impl_low_textureCubeLodEXT (unity_SpecCube0, tmpvar_20, tmpvar_22.w);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  mediump vec3 color_25;
  mediump vec2 rlPow4AndFresnelTerm_26;
  mediump float tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = clamp (dot (tmpvar_8, _WorldSpaceLightPos0.xyz), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump float tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = clamp (dot (tmpvar_8, tmpvar_14), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = dot ((tmpvar_14 - (2.0 * 
    (dot (tmpvar_8, tmpvar_14) * tmpvar_8)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_31.y = (1.0 - tmpvar_29);
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31 * tmpvar_31) * (tmpvar_31 * tmpvar_31));
  rlPow4AndFresnelTerm_26 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = rlPow4AndFresnelTerm_26.x;
  mediump float specular_34;
  highp float smoothness_35;
  smoothness_35 = tmpvar_4;
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_33;
  tmpvar_36.y = (1.0 - smoothness_35);
  highp float tmpvar_37;
  tmpvar_37 = (texture2D (unity_NHxRoughness, tmpvar_36).w * 16.0);
  specular_34 = tmpvar_37;
  color_25 = (((tmpvar_5 * tmpvar_7) + (specular_34 * tmpvar_6)) * (tmpvar_9 * tmpvar_27));
  color_25 = (color_25 + ((
    ((hdr_21.x * ((hdr_21.w * 
      (tmpvar_24.w - 1.0)
    ) + 1.0)) * tmpvar_24.xyz)
   * tmpvar_10) * mix (tmpvar_6, vec3(
    clamp ((mg_3.y + (1.0 - tmpvar_7)), 0.0, 1.0)
  ), rlPow4AndFresnelTerm_26.yyy)));
  mediump vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = color_25;
  c_1.w = tmpvar_38.w;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  c_1.xyz = (color_25 + (tmpvar_39.xyz * _EmissionColor.xyz));
  highp float tmpvar_40;
  tmpvar_40 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = mix (unity_FogColor.xyz, c_1.xyz, vec3(tmpvar_40));
  mediump vec4 xlat_varoutput_41;
  xlat_varoutput_41.xyz = c_1.xyz;
  xlat_varoutput_41.w = 1.0;
  gl_FragData[0] = xlat_varoutput_41;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "_EMISSION" }
""
}
}
}
 Pass {
  Name "FORWARD_DELTA"
  LOD 150
  Tags { "LIGHTMODE" = "FORWARDADD" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZWrite Off
  GpuProgramID 453023
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * tmpvar_6) * (tmpvar_6 * tmpvar_6));
  mediump float specular_8;
  highp float smoothness_9;
  smoothness_9 = tmpvar_4;
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_7;
  tmpvar_10.y = (1.0 - smoothness_9);
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (unity_NHxRoughness, tmpvar_10).w * 16.0);
  specular_8 = tmpvar_11;
  c_1 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_8 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * _LightColor0.xyz);
  c_1 = (c_1 * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0));
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = c_1;
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_7;
  lightDir_7 = tmpvar_6;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  highp vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_5, lightDir_7), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_5, viewDir_9), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_5, viewDir_9) * tmpvar_5)
  )), lightDir_7);
  tmpvar_15.y = (1.0 - tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15));
  rlPow4AndFresnelTerm_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = rlPow4AndFresnelTerm_10.x;
  mediump float specular_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_3;
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_17;
  tmpvar_20.y = (1.0 - smoothness_19);
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (unity_NHxRoughness, tmpvar_20).w * 16.0);
  specular_18 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((tmpvar_4 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_18 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
  )) * (tmpvar_8 * tmpvar_11));
  mediump vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = 1.0;
  gl_FragData[0] = xlat_varoutput_23;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  mediump float tmpvar_3;
  tmpvar_3 = mg_2.y;
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_1.xyz);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_7;
  lightDir_7 = tmpvar_6;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  highp vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (tmpvar_5, lightDir_7), 0.0, 1.0);
  tmpvar_11 = tmpvar_12;
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_5, viewDir_9), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_5, viewDir_9) * tmpvar_5)
  )), lightDir_7);
  tmpvar_15.y = (1.0 - tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16 = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15));
  rlPow4AndFresnelTerm_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = rlPow4AndFresnelTerm_10.x;
  mediump float specular_18;
  highp float smoothness_19;
  smoothness_19 = tmpvar_3;
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_17;
  tmpvar_20.y = (1.0 - smoothness_19);
  highp float tmpvar_21;
  tmpvar_21 = (texture2D (unity_NHxRoughness, tmpvar_20).w * 16.0);
  specular_18 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = (((tmpvar_4 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_18 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
  )) * (tmpvar_8 * tmpvar_11));
  mediump vec4 xlat_varoutput_23;
  xlat_varoutput_23.xyz = tmpvar_22.xyz;
  xlat_varoutput_23.w = 1.0;
  gl_FragData[0] = xlat_varoutput_23;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_15 = tmpvar_16.w;
  lowp float tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_17 = tmpvar_18.w;
  highp float tmpvar_19;
  tmpvar_19 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_15) * tmpvar_17);
  atten_1 = tmpvar_19;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_3;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8);
  lowp float tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_9 = tmpvar_10.w;
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_11 = tmpvar_12.w;
  highp float tmpvar_13;
  tmpvar_13 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_9) * tmpvar_11);
  atten_1 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = xlv_TEXCOORD2.w;
  tmpvar_14.y = xlv_TEXCOORD2_1.w;
  tmpvar_14.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_15;
  lightDir_15 = tmpvar_14;
  mediump float atten_16;
  atten_16 = atten_1;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_17 = _LightColor0.xyz;
  highp vec3 n_19;
  n_19 = lightDir_15;
  tmpvar_18 = n_19;
  tmpvar_17 = (tmpvar_17 * atten_16);
  highp vec3 viewDir_20;
  viewDir_20 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_7, tmpvar_18), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_7, viewDir_20), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.x = dot ((viewDir_20 - (2.0 * 
    (dot (tmpvar_7, viewDir_20) * tmpvar_7)
  )), tmpvar_18);
  tmpvar_26.y = (1.0 - tmpvar_24);
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * tmpvar_26) * (tmpvar_26 * tmpvar_26));
  rlPow4AndFresnelTerm_21 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = rlPow4AndFresnelTerm_21.x;
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_29 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_17 * tmpvar_22));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8);
  lowp float tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_9 = tmpvar_10.w;
  lowp float tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_11 = tmpvar_12.w;
  highp float tmpvar_13;
  tmpvar_13 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_9) * tmpvar_11);
  atten_1 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = xlv_TEXCOORD2.w;
  tmpvar_14.y = xlv_TEXCOORD2_1.w;
  tmpvar_14.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_15;
  lightDir_15 = tmpvar_14;
  mediump float atten_16;
  atten_16 = atten_1;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_17 = _LightColor0.xyz;
  highp vec3 n_19;
  n_19 = lightDir_15;
  tmpvar_18 = n_19;
  tmpvar_17 = (tmpvar_17 * atten_16);
  highp vec3 viewDir_20;
  viewDir_20 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_7, tmpvar_18), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_7, viewDir_20), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  highp vec2 tmpvar_26;
  tmpvar_26.x = dot ((viewDir_20 - (2.0 * 
    (dot (tmpvar_7, viewDir_20) * tmpvar_7)
  )), tmpvar_18);
  tmpvar_26.y = (1.0 - tmpvar_24);
  highp vec2 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * tmpvar_26) * (tmpvar_26 * tmpvar_26));
  rlPow4AndFresnelTerm_21 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = rlPow4AndFresnelTerm_21.x;
  mediump float specular_29;
  highp float smoothness_30;
  smoothness_30 = tmpvar_5;
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_28;
  tmpvar_31.y = (1.0 - smoothness_30);
  highp float tmpvar_32;
  tmpvar_32 = (texture2D (unity_NHxRoughness, tmpvar_31).w * 16.0);
  specular_29 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_29 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_17 * tmpvar_22));
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = tmpvar_33.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  lightCoord_2 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_1;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = _LightColor0.xyz;
  highp vec3 n_15;
  n_15 = lightDir_11;
  tmpvar_14 = n_15;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_16;
  viewDir_16 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_17;
  mediump float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_7, tmpvar_14), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_7, viewDir_16), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec2 tmpvar_22;
  tmpvar_22.x = dot ((viewDir_16 - (2.0 * 
    (dot (tmpvar_7, viewDir_16) * tmpvar_7)
  )), tmpvar_14);
  tmpvar_22.y = (1.0 - tmpvar_20);
  highp vec2 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * tmpvar_22) * (tmpvar_22 * tmpvar_22));
  rlPow4AndFresnelTerm_17 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = rlPow4AndFresnelTerm_17.x;
  mediump float specular_25;
  highp float smoothness_26;
  smoothness_26 = tmpvar_5;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = (1.0 - smoothness_26);
  highp float tmpvar_28;
  tmpvar_28 = (texture2D (unity_NHxRoughness, tmpvar_27).w * 16.0);
  specular_25 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_25 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_18));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = tmpvar_29.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_13).xy).w;
  atten_1 = tmpvar_14;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = c_2;
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = xlv_TEXCOORD5;
  highp float tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_7).xy).w;
  atten_1 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_10;
  lightDir_10 = tmpvar_9;
  mediump float atten_11;
  atten_11 = atten_1;
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * atten_11);
  highp vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_14;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_6, lightDir_10), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_6, viewDir_13), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_6, viewDir_13) * tmpvar_6)
  )), lightDir_10);
  tmpvar_19.y = (1.0 - tmpvar_17);
  highp vec2 tmpvar_20;
  tmpvar_20 = ((tmpvar_19 * tmpvar_19) * (tmpvar_19 * tmpvar_19));
  rlPow4AndFresnelTerm_14 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = rlPow4AndFresnelTerm_14.x;
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_4;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_22 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * (tmpvar_12 * tmpvar_15));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = xlv_TEXCOORD5;
  highp float tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_7).xy).w;
  atten_1 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = xlv_TEXCOORD2.w;
  tmpvar_9.y = xlv_TEXCOORD2_1.w;
  tmpvar_9.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_10;
  lightDir_10 = tmpvar_9;
  mediump float atten_11;
  atten_11 = atten_1;
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * atten_11);
  highp vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_14;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_6, lightDir_10), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_6, viewDir_13), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_6, viewDir_13) * tmpvar_6)
  )), lightDir_10);
  tmpvar_19.y = (1.0 - tmpvar_17);
  highp vec2 tmpvar_20;
  tmpvar_20 = ((tmpvar_19 * tmpvar_19) * (tmpvar_19 * tmpvar_19));
  rlPow4AndFresnelTerm_14 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = rlPow4AndFresnelTerm_14.x;
  mediump float specular_22;
  highp float smoothness_23;
  smoothness_23 = tmpvar_4;
  highp vec2 tmpvar_24;
  tmpvar_24.x = tmpvar_21;
  tmpvar_24.y = (1.0 - smoothness_23);
  highp float tmpvar_25;
  tmpvar_25 = (texture2D (unity_NHxRoughness, tmpvar_24).w * 16.0);
  specular_22 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_22 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * (tmpvar_12 * tmpvar_15));
  mediump vec4 xlat_varoutput_27;
  xlat_varoutput_27.xyz = tmpvar_26.xyz;
  xlat_varoutput_27.w = 1.0;
  gl_FragData[0] = xlat_varoutput_27;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, tmpvar_18);
  mediump float tmpvar_21;
  if ((tmpvar_20.x < (tmpvar_18.z / tmpvar_18.w))) {
    tmpvar_21 = _LightShadowData.x;
  } else {
    tmpvar_21 = 1.0;
  };
  tmpvar_19 = tmpvar_21;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_22 = tmpvar_23.w;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_24 = tmpvar_25.w;
  highp float tmpvar_26;
  tmpvar_26 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_22) * tmpvar_24) * shadow_2);
  atten_1 = tmpvar_26;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_4;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_12;
  realtimeShadowAttenuation_12 = 1.0;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_WorldToShadow[0] * tmpvar_13);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_ShadowMapTexture, tmpvar_14);
  mediump float tmpvar_17;
  if ((tmpvar_16.x < (tmpvar_14.z / tmpvar_14.w))) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  tmpvar_15 = tmpvar_17;
  realtimeShadowAttenuation_12 = tmpvar_15;
  shadow_2 = realtimeShadowAttenuation_12;
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_18) * tmpvar_20) * shadow_2);
  atten_1 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23.x = xlv_TEXCOORD2.w;
  tmpvar_23.y = xlv_TEXCOORD2_1.w;
  tmpvar_23.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_24;
  lightDir_24 = tmpvar_23;
  mediump float atten_25;
  atten_25 = atten_1;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_26 = _LightColor0.xyz;
  highp vec3 n_28;
  n_28 = lightDir_24;
  tmpvar_27 = n_28;
  tmpvar_26 = (tmpvar_26 * atten_25);
  highp vec3 viewDir_29;
  viewDir_29 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_30;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_10, tmpvar_27), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_10, viewDir_29), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35.x = dot ((viewDir_29 - (2.0 * 
    (dot (tmpvar_10, viewDir_29) * tmpvar_10)
  )), tmpvar_27);
  tmpvar_35.y = (1.0 - tmpvar_33);
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35 * tmpvar_35) * (tmpvar_35 * tmpvar_35));
  rlPow4AndFresnelTerm_30 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = rlPow4AndFresnelTerm_30.x;
  mediump float specular_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_6;
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_37;
  tmpvar_40.y = (1.0 - smoothness_39);
  highp float tmpvar_41;
  tmpvar_41 = (texture2D (unity_NHxRoughness, tmpvar_40).w * 16.0);
  specular_38 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_8 + (specular_38 * tmpvar_9)) * (tmpvar_26 * tmpvar_31));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11);
  mediump float realtimeShadowAttenuation_12;
  realtimeShadowAttenuation_12 = 1.0;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_WorldToShadow[0] * tmpvar_13);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_ShadowMapTexture, tmpvar_14);
  mediump float tmpvar_17;
  if ((tmpvar_16.x < (tmpvar_14.z / tmpvar_14.w))) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  tmpvar_15 = tmpvar_17;
  realtimeShadowAttenuation_12 = tmpvar_15;
  shadow_2 = realtimeShadowAttenuation_12;
  lowp float tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_18 = tmpvar_19.w;
  lowp float tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_20 = tmpvar_21.w;
  highp float tmpvar_22;
  tmpvar_22 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_18) * tmpvar_20) * shadow_2);
  atten_1 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23.x = xlv_TEXCOORD2.w;
  tmpvar_23.y = xlv_TEXCOORD2_1.w;
  tmpvar_23.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_24;
  lightDir_24 = tmpvar_23;
  mediump float atten_25;
  atten_25 = atten_1;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_26 = _LightColor0.xyz;
  highp vec3 n_28;
  n_28 = lightDir_24;
  tmpvar_27 = n_28;
  tmpvar_26 = (tmpvar_26 * atten_25);
  highp vec3 viewDir_29;
  viewDir_29 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_30;
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (dot (tmpvar_10, tmpvar_27), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_10, viewDir_29), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35.x = dot ((viewDir_29 - (2.0 * 
    (dot (tmpvar_10, viewDir_29) * tmpvar_10)
  )), tmpvar_27);
  tmpvar_35.y = (1.0 - tmpvar_33);
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35 * tmpvar_35) * (tmpvar_35 * tmpvar_35));
  rlPow4AndFresnelTerm_30 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = rlPow4AndFresnelTerm_30.x;
  mediump float specular_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_6;
  highp vec2 tmpvar_40;
  tmpvar_40.x = tmpvar_37;
  tmpvar_40.y = (1.0 - smoothness_39);
  highp float tmpvar_41;
  tmpvar_41 = (texture2D (unity_NHxRoughness, tmpvar_40).w * 16.0);
  specular_38 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = ((tmpvar_8 + (specular_38 * tmpvar_9)) * (tmpvar_26 * tmpvar_31));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_13 = tmpvar_15;
  atten_1 = realtimeShadowAttenuation_13;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_2;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_9 = tmpvar_15;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_1;
  mediump vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_24 = (tmpvar_24 * atten_23);
  mediump vec3 color_25;
  highp float specularTerm_26;
  highp float a2_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_22 - normalize(xlv_TEXCOORD1));
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_8, lightDir_22), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_8, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  tmpvar_35 = (1.0 - smoothness_36);
  perceptualRoughness_29 = tmpvar_35;
  highp float tmpvar_37;
  highp float perceptualRoughness_38;
  perceptualRoughness_38 = perceptualRoughness_29;
  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
  roughness_28 = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = (roughness_28 * roughness_28);
  a2_27 = tmpvar_39;
  specularTerm_26 = ((roughness_28 / (
    (max (0.32, clamp (dot (lightDir_22, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
   * 
    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_40;
  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
  specularTerm_26 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (((tmpvar_6 + 
    (tmpvar_40 * tmpvar_7)
  ) * tmpvar_24) * tmpvar_32);
  color_25 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = color_25;
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic));
  tmpvar_6 = (tmpvar_5 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_9;
  highp vec4 v_10;
  v_10.x = unity_MatrixV[0].z;
  v_10.y = unity_MatrixV[1].z;
  v_10.z = unity_MatrixV[2].z;
  v_10.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_10.xyz), sqrt(dot (tmpvar_11, tmpvar_11)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_12 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_9 = tmpvar_15;
  mediump float tmpvar_20;
  tmpvar_20 = clamp ((realtimeShadowAttenuation_9 + tmpvar_12), 0.0, 1.0);
  atten_1 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_1;
  mediump vec3 tmpvar_24;
  tmpvar_24 = _LightColor0.xyz;
  tmpvar_24 = (tmpvar_24 * atten_23);
  mediump vec3 color_25;
  highp float specularTerm_26;
  highp float a2_27;
  mediump float roughness_28;
  mediump float perceptualRoughness_29;
  highp vec3 tmpvar_30;
  highp vec3 inVec_31;
  inVec_31 = (lightDir_22 - normalize(xlv_TEXCOORD1));
  tmpvar_30 = (inVec_31 * inversesqrt(max (0.001, 
    dot (inVec_31, inVec_31)
  )));
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_8, lightDir_22), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_8, tmpvar_30), 0.0, 1.0);
  highp float tmpvar_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_4;
  tmpvar_35 = (1.0 - smoothness_36);
  perceptualRoughness_29 = tmpvar_35;
  highp float tmpvar_37;
  highp float perceptualRoughness_38;
  perceptualRoughness_38 = perceptualRoughness_29;
  tmpvar_37 = (perceptualRoughness_38 * perceptualRoughness_38);
  roughness_28 = tmpvar_37;
  mediump float tmpvar_39;
  tmpvar_39 = (roughness_28 * roughness_28);
  a2_27 = tmpvar_39;
  specularTerm_26 = ((roughness_28 / (
    (max (0.32, clamp (dot (lightDir_22, tmpvar_30), 0.0, 1.0)) * (1.5 + roughness_28))
   * 
    (((tmpvar_34 * tmpvar_34) * (a2_27 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_40;
  tmpvar_40 = clamp (specularTerm_26, 0.0, 100.0);
  specularTerm_26 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (((tmpvar_6 + 
    (tmpvar_40 * tmpvar_7)
  ) * tmpvar_24) * tmpvar_32);
  color_25 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = color_25;
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = tmpvar_42.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_15 = tmpvar_17;
  shadow_2 = realtimeShadowAttenuation_15;
  highp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_14).xy).w * shadow_2);
  atten_1 = tmpvar_22;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = c_3;
  mediump vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_11 = tmpvar_17;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_1;
  mediump vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_27 = (tmpvar_27 * atten_26);
  mediump vec3 color_28;
  highp float specularTerm_29;
  highp float a2_30;
  mediump float roughness_31;
  mediump float perceptualRoughness_32;
  highp vec3 tmpvar_33;
  highp vec3 inVec_34;
  inVec_34 = (lightDir_25 - normalize(xlv_TEXCOORD1));
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, lightDir_25), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  perceptualRoughness_32 = tmpvar_38;
  highp float tmpvar_40;
  highp float perceptualRoughness_41;
  perceptualRoughness_41 = perceptualRoughness_32;
  tmpvar_40 = (perceptualRoughness_41 * perceptualRoughness_41);
  roughness_31 = tmpvar_40;
  mediump float tmpvar_42;
  tmpvar_42 = (roughness_31 * roughness_31);
  a2_30 = tmpvar_42;
  specularTerm_29 = ((roughness_31 / (
    (max (0.32, clamp (dot (lightDir_25, tmpvar_33), 0.0, 1.0)) * (1.5 + roughness_31))
   * 
    (((tmpvar_37 * tmpvar_37) * (a2_30 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_43;
  tmpvar_43 = clamp (specularTerm_29, 0.0, 100.0);
  specularTerm_29 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (((tmpvar_7 + 
    (tmpvar_43 * tmpvar_8)
  ) * tmpvar_27) * tmpvar_35);
  color_28 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = color_28;
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_11;
  highp vec4 v_12;
  v_12.x = unity_MatrixV[0].z;
  v_12.y = unity_MatrixV[1].z;
  v_12.z = unity_MatrixV[2].z;
  v_12.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_12.xyz), sqrt(dot (tmpvar_13, tmpvar_13)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_14 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_11 = tmpvar_17;
  mediump float tmpvar_22;
  tmpvar_22 = clamp ((realtimeShadowAttenuation_11 + tmpvar_14), 0.0, 1.0);
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_10).xy).w * shadow_2);
  atten_1 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_1;
  mediump vec3 tmpvar_27;
  tmpvar_27 = _LightColor0.xyz;
  tmpvar_27 = (tmpvar_27 * atten_26);
  mediump vec3 color_28;
  highp float specularTerm_29;
  highp float a2_30;
  mediump float roughness_31;
  mediump float perceptualRoughness_32;
  highp vec3 tmpvar_33;
  highp vec3 inVec_34;
  inVec_34 = (lightDir_25 - normalize(xlv_TEXCOORD1));
  tmpvar_33 = (inVec_34 * inversesqrt(max (0.001, 
    dot (inVec_34, inVec_34)
  )));
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_9, lightDir_25), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_9, tmpvar_33), 0.0, 1.0);
  highp float tmpvar_38;
  highp float smoothness_39;
  smoothness_39 = tmpvar_5;
  tmpvar_38 = (1.0 - smoothness_39);
  perceptualRoughness_32 = tmpvar_38;
  highp float tmpvar_40;
  highp float perceptualRoughness_41;
  perceptualRoughness_41 = perceptualRoughness_32;
  tmpvar_40 = (perceptualRoughness_41 * perceptualRoughness_41);
  roughness_31 = tmpvar_40;
  mediump float tmpvar_42;
  tmpvar_42 = (roughness_31 * roughness_31);
  a2_30 = tmpvar_42;
  specularTerm_29 = ((roughness_31 / (
    (max (0.32, clamp (dot (lightDir_25, tmpvar_33), 0.0, 1.0)) * (1.5 + roughness_31))
   * 
    (((tmpvar_37 * tmpvar_37) * (a2_30 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_43;
  tmpvar_43 = clamp (specularTerm_29, 0.0, 100.0);
  specularTerm_29 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (((tmpvar_7 + 
    (tmpvar_43 * tmpvar_8)
  ) * tmpvar_27) * tmpvar_35);
  color_28 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = color_28;
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = tmpvar_45.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_11).xyz;
  highp vec3 vec_12;
  vec_12 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_13;
  highp float mydist_14;
  mydist_14 = ((sqrt(
    dot (vec_12, vec_12)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureCube (_ShadowMapTexture, vec_12);
  highp vec4 vals_16;
  vals_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = dot (vals_16, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_13 = tmpvar_17;
  mediump float tmpvar_18;
  if ((shadowVal_13 < mydist_14)) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  shadow_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20.x = xlv_TEXCOORD2.w;
  tmpvar_20.y = xlv_TEXCOORD2_1.w;
  tmpvar_20.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_21;
  lightDir_21 = tmpvar_20;
  mediump float atten_22;
  atten_22 = atten_1;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_23 = _LightColor0.xyz;
  highp vec3 n_25;
  n_25 = lightDir_21;
  tmpvar_24 = n_25;
  tmpvar_23 = (tmpvar_23 * atten_22);
  highp vec3 viewDir_26;
  viewDir_26 = -(xlv_TEXCOORD1);
  mediump vec2 rlPow4AndFresnelTerm_27;
  mediump float tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = clamp (dot (tmpvar_10, tmpvar_24), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_10, viewDir_26), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32.x = dot ((viewDir_26 - (2.0 * 
    (dot (tmpvar_10, viewDir_26) * tmpvar_10)
  )), tmpvar_24);
  tmpvar_32.y = (1.0 - tmpvar_30);
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32 * tmpvar_32) * (tmpvar_32 * tmpvar_32));
  rlPow4AndFresnelTerm_27 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = rlPow4AndFresnelTerm_27.x;
  mediump float specular_35;
  highp float smoothness_36;
  smoothness_36 = tmpvar_6;
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_34;
  tmpvar_37.y = (1.0 - smoothness_36);
  highp float tmpvar_38;
  tmpvar_38 = (texture2D (unity_NHxRoughness, tmpvar_37).w * 16.0);
  specular_35 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = ((tmpvar_8 + (specular_35 * tmpvar_9)) * (tmpvar_23 * tmpvar_28));
  mediump vec4 xlat_varoutput_40;
  xlat_varoutput_40.xyz = tmpvar_39.xyz;
  xlat_varoutput_40.w = 1.0;
  gl_FragData[0] = xlat_varoutput_40;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(dot (lightCoord_2, lightCoord_2))).w;
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w;
  atten_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_2;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = _LightColor0.xyz;
  highp vec3 n_16;
  n_16 = lightDir_12;
  tmpvar_15 = n_16;
  tmpvar_14 = (tmpvar_14 * atten_13);
  highp vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec3 color_18;
  mediump vec2 rlPow4AndFresnelTerm_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_15), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, viewDir_17), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_8, viewDir_17) * tmpvar_8)
  )), tmpvar_15);
  tmpvar_24.y = (1.0 - tmpvar_22);
  highp vec2 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * tmpvar_24) * (tmpvar_24 * tmpvar_24));
  rlPow4AndFresnelTerm_19 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = rlPow4AndFresnelTerm_19.x;
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  color_18 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_27 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_14 * tmpvar_20));
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = color_18;
  c_1.w = tmpvar_31.w;
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_18 * vec3(tmpvar_32));
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w;
  atten_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_2;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = _LightColor0.xyz;
  highp vec3 n_16;
  n_16 = lightDir_12;
  tmpvar_15 = n_16;
  tmpvar_14 = (tmpvar_14 * atten_13);
  highp vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec3 color_18;
  mediump vec2 rlPow4AndFresnelTerm_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_15), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, viewDir_17), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_8, viewDir_17) * tmpvar_8)
  )), tmpvar_15);
  tmpvar_24.y = (1.0 - tmpvar_22);
  highp vec2 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * tmpvar_24) * (tmpvar_24 * tmpvar_24));
  rlPow4AndFresnelTerm_19 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = rlPow4AndFresnelTerm_19.x;
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  color_18 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_27 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_14 * tmpvar_20));
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = color_18;
  c_1.w = tmpvar_31.w;
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_18 * vec3(tmpvar_32));
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_18;
  tmpvar_18 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  mediump float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * tmpvar_6) * (tmpvar_6 * tmpvar_6));
  mediump float specular_8;
  highp float smoothness_9;
  smoothness_9 = tmpvar_4;
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_7;
  tmpvar_10.y = (1.0 - smoothness_9);
  highp float tmpvar_11;
  tmpvar_11 = (texture2D (unity_NHxRoughness, tmpvar_10).w * 16.0);
  specular_8 = tmpvar_11;
  c_1 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_8 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * _LightColor0.xyz);
  c_1 = (c_1 * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0));
  c_1 = (c_1 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = c_1;
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_8;
  lightDir_8 = tmpvar_7;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  highp vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec3 color_11;
  mediump vec2 rlPow4AndFresnelTerm_12;
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_6, lightDir_8), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_6, viewDir_10), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_6, viewDir_10) * tmpvar_6)
  )), lightDir_8);
  tmpvar_17.y = (1.0 - tmpvar_15);
  highp vec2 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (tmpvar_17 * tmpvar_17));
  rlPow4AndFresnelTerm_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = rlPow4AndFresnelTerm_12.x;
  mediump float specular_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_4;
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = (1.0 - smoothness_21);
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (unity_NHxRoughness, tmpvar_22).w * 16.0);
  specular_20 = tmpvar_23;
  color_11 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_20 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * (tmpvar_9 * tmpvar_13));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = color_11;
  c_1.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_11 * vec3(tmpvar_25));
  mediump vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = 1.0;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_3;
  mg_3.x = _Metallic;
  mg_3.y = _Glossiness;
  mediump float tmpvar_4;
  tmpvar_4 = mg_3.y;
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_2.xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7.x = xlv_TEXCOORD2.w;
  tmpvar_7.y = xlv_TEXCOORD2_1.w;
  tmpvar_7.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_8;
  lightDir_8 = tmpvar_7;
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  highp vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec3 color_11;
  mediump vec2 rlPow4AndFresnelTerm_12;
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_6, lightDir_8), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_6, viewDir_10), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_6, viewDir_10) * tmpvar_6)
  )), lightDir_8);
  tmpvar_17.y = (1.0 - tmpvar_15);
  highp vec2 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (tmpvar_17 * tmpvar_17));
  rlPow4AndFresnelTerm_12 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = rlPow4AndFresnelTerm_12.x;
  mediump float specular_20;
  highp float smoothness_21;
  smoothness_21 = tmpvar_4;
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_19;
  tmpvar_22.y = (1.0 - smoothness_21);
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (unity_NHxRoughness, tmpvar_22).w * 16.0);
  specular_20 = tmpvar_23;
  color_11 = (((tmpvar_5 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_20 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_5, vec3(_Metallic))
  )) * (tmpvar_9 * tmpvar_13));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = color_11;
  c_1.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_11 * vec3(tmpvar_25));
  mediump vec4 xlat_varoutput_26;
  xlat_varoutput_26.xyz = c_1.xyz;
  xlat_varoutput_26.w = 1.0;
  gl_FragData[0] = xlat_varoutput_26;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec4 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14);
  lowp float tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, ((lightCoord_2.xy / lightCoord_2.w) + 0.5));
  tmpvar_15 = tmpvar_16.w;
  lowp float tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(dot (lightCoord_2.xyz, lightCoord_2.xyz)));
  tmpvar_17 = tmpvar_18.w;
  highp float tmpvar_19;
  tmpvar_19 = ((float(
    (lightCoord_2.z > 0.0)
  ) * tmpvar_15) * tmpvar_17);
  atten_1 = tmpvar_19;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_3;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9);
  lowp float tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_10 = tmpvar_11.w;
  lowp float tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_12 = tmpvar_13.w;
  highp float tmpvar_14;
  tmpvar_14 = ((float(
    (lightCoord_3.z > 0.0)
  ) * tmpvar_10) * tmpvar_12);
  atten_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_16;
  lightDir_16 = tmpvar_15;
  mediump float atten_17;
  atten_17 = atten_2;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = _LightColor0.xyz;
  highp vec3 n_20;
  n_20 = lightDir_16;
  tmpvar_19 = n_20;
  tmpvar_18 = (tmpvar_18 * atten_17);
  highp vec3 viewDir_21;
  viewDir_21 = -(xlv_TEXCOORD1);
  mediump vec3 color_22;
  mediump vec2 rlPow4AndFresnelTerm_23;
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_8, tmpvar_19), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_8, viewDir_21), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.x = dot ((viewDir_21 - (2.0 * 
    (dot (tmpvar_8, viewDir_21) * tmpvar_8)
  )), tmpvar_19);
  tmpvar_28.y = (1.0 - tmpvar_26);
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  rlPow4AndFresnelTerm_23 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = rlPow4AndFresnelTerm_23.x;
  mediump float specular_31;
  highp float smoothness_32;
  smoothness_32 = tmpvar_6;
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_30;
  tmpvar_33.y = (1.0 - smoothness_32);
  highp float tmpvar_34;
  tmpvar_34 = (texture2D (unity_NHxRoughness, tmpvar_33).w * 16.0);
  specular_31 = tmpvar_34;
  color_22 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_31 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_18 * tmpvar_24));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = color_22;
  c_1.w = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_22 * vec3(tmpvar_36));
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = c_1.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec4 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9);
  lowp float tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_10 = tmpvar_11.w;
  lowp float tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_12 = tmpvar_13.w;
  highp float tmpvar_14;
  tmpvar_14 = ((float(
    (lightCoord_3.z > 0.0)
  ) * tmpvar_10) * tmpvar_12);
  atten_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = xlv_TEXCOORD2.w;
  tmpvar_15.y = xlv_TEXCOORD2_1.w;
  tmpvar_15.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_16;
  lightDir_16 = tmpvar_15;
  mediump float atten_17;
  atten_17 = atten_2;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_18 = _LightColor0.xyz;
  highp vec3 n_20;
  n_20 = lightDir_16;
  tmpvar_19 = n_20;
  tmpvar_18 = (tmpvar_18 * atten_17);
  highp vec3 viewDir_21;
  viewDir_21 = -(xlv_TEXCOORD1);
  mediump vec3 color_22;
  mediump vec2 rlPow4AndFresnelTerm_23;
  mediump float tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_8, tmpvar_19), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  mediump float tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = clamp (dot (tmpvar_8, viewDir_21), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp vec2 tmpvar_28;
  tmpvar_28.x = dot ((viewDir_21 - (2.0 * 
    (dot (tmpvar_8, viewDir_21) * tmpvar_8)
  )), tmpvar_19);
  tmpvar_28.y = (1.0 - tmpvar_26);
  highp vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  rlPow4AndFresnelTerm_23 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = rlPow4AndFresnelTerm_23.x;
  mediump float specular_31;
  highp float smoothness_32;
  smoothness_32 = tmpvar_6;
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_30;
  tmpvar_33.y = (1.0 - smoothness_32);
  highp float tmpvar_34;
  tmpvar_34 = (texture2D (unity_NHxRoughness, tmpvar_33).w * 16.0);
  specular_31 = tmpvar_34;
  color_22 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_31 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_18 * tmpvar_24));
  mediump vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = color_22;
  c_1.w = tmpvar_35.w;
  highp float tmpvar_36;
  tmpvar_36 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_22 * vec3(tmpvar_36));
  mediump vec4 xlat_varoutput_37;
  xlat_varoutput_37.xyz = c_1.xyz;
  xlat_varoutput_37.w = 1.0;
  gl_FragData[0] = xlat_varoutput_37;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = lightDir_6;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(n_15);
  tmpvar_14 = tmpvar_16;
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_17;
  highp vec3 norm_18;
  norm_18 = tmpvar_1;
  highp mat3 tmpvar_19;
  tmpvar_19[0] = unity_WorldToObject[0].xyz;
  tmpvar_19[1] = unity_WorldToObject[1].xyz;
  tmpvar_19[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((norm_18 * tmpvar_19));
  normalWorld_4 = tmpvar_20;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_21;
  tmpvar_21 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_21;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  highp vec3 lightCoord_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lightCoord_2 = (unity_WorldToLight * tmpvar_14).xyz;
  highp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_2, lightCoord_2))).w * textureCube (_LightTexture0, lightCoord_2).w);
  atten_1 = tmpvar_15;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = c_3;
  mediump vec4 xlat_varoutput_17;
  xlat_varoutput_17.xyz = tmpvar_16.xyz;
  xlat_varoutput_17.w = 1.0;
  gl_FragData[0] = xlat_varoutput_17;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w);
  atten_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_2;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = _LightColor0.xyz;
  highp vec3 n_16;
  n_16 = lightDir_12;
  tmpvar_15 = n_16;
  tmpvar_14 = (tmpvar_14 * atten_13);
  highp vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec3 color_18;
  mediump vec2 rlPow4AndFresnelTerm_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_15), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, viewDir_17), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_8, viewDir_17) * tmpvar_8)
  )), tmpvar_15);
  tmpvar_24.y = (1.0 - tmpvar_22);
  highp vec2 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * tmpvar_24) * (tmpvar_24 * tmpvar_24));
  rlPow4AndFresnelTerm_19 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = rlPow4AndFresnelTerm_19.x;
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  color_18 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_27 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_14 * tmpvar_20));
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = color_18;
  c_1.w = tmpvar_31.w;
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_18 * vec3(tmpvar_32));
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  tmpvar_14 = tmpvar_15;
  tmpvar_5 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_16 * tmpvar_17));
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_18 = tmpvar_19;
  lightDir_4 = tmpvar_18;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  highp vec3 lightCoord_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD5;
  lightCoord_3 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = (texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w);
  atten_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = xlv_TEXCOORD2.w;
  tmpvar_11.y = xlv_TEXCOORD2_1.w;
  tmpvar_11.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_12;
  lightDir_12 = tmpvar_11;
  mediump float atten_13;
  atten_13 = atten_2;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = _LightColor0.xyz;
  highp vec3 n_16;
  n_16 = lightDir_12;
  tmpvar_15 = n_16;
  tmpvar_14 = (tmpvar_14 * atten_13);
  highp vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec3 color_18;
  mediump vec2 rlPow4AndFresnelTerm_19;
  mediump float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp (dot (tmpvar_8, tmpvar_15), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump float tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = clamp (dot (tmpvar_8, viewDir_17), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  highp vec2 tmpvar_24;
  tmpvar_24.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_8, viewDir_17) * tmpvar_8)
  )), tmpvar_15);
  tmpvar_24.y = (1.0 - tmpvar_22);
  highp vec2 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * tmpvar_24) * (tmpvar_24 * tmpvar_24));
  rlPow4AndFresnelTerm_19 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = rlPow4AndFresnelTerm_19.x;
  mediump float specular_27;
  highp float smoothness_28;
  smoothness_28 = tmpvar_6;
  highp vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_26;
  tmpvar_29.y = (1.0 - smoothness_28);
  highp float tmpvar_30;
  tmpvar_30 = (texture2D (unity_NHxRoughness, tmpvar_29).w * 16.0);
  specular_27 = tmpvar_30;
  color_18 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_27 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * (tmpvar_14 * tmpvar_20));
  mediump vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = color_18;
  c_1.w = tmpvar_31.w;
  highp float tmpvar_32;
  tmpvar_32 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_18 * vec3(tmpvar_32));
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_13;
  tmpvar_13 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_14;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((norm_15 * tmpvar_16));
  normalWorld_4 = tmpvar_17;
  tmpvar_7.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_18;
  tmpvar_18 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_7.x = tmpvar_18;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_8.xyz;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_13).xy).w;
  atten_1 = tmpvar_14;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_2 = (c_2 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = c_2;
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  highp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_8).xy).w;
  atten_2 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_2;
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec3 color_15;
  mediump vec2 rlPow4AndFresnelTerm_16;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_7, lightDir_11), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), lightDir_11);
  tmpvar_21.y = (1.0 - tmpvar_19);
  highp vec2 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (tmpvar_21 * tmpvar_21));
  rlPow4AndFresnelTerm_16 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = rlPow4AndFresnelTerm_16.x;
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  color_15 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_24 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_17));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = color_15;
  c_1.w = tmpvar_28.w;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_15 * vec3(tmpvar_29));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = c_1.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((tmpvar_8.xyz - _WorldSpaceCameraPos));
  tmpvar_13 = tmpvar_14;
  tmpvar_4 = tmpvar_13;
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = unity_WorldToObject[0].xyz;
  tmpvar_16[1] = unity_WorldToObject[1].xyz;
  tmpvar_16[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_15 * tmpvar_16));
  highp vec3 tmpvar_17;
  tmpvar_17 = (_WorldSpaceLightPos0.xyz - (tmpvar_8.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_17.x;
  tmpvar_6.w = tmpvar_17.y;
  tmpvar_7.w = tmpvar_17.z;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8.xyz;
  xlv_TEXCOORD7 = ((tmpvar_9.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD5;
  highp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_8).xy).w;
  atten_2 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = xlv_TEXCOORD2.w;
  tmpvar_10.y = xlv_TEXCOORD2_1.w;
  tmpvar_10.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_11;
  lightDir_11 = tmpvar_10;
  mediump float atten_12;
  atten_12 = atten_2;
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * atten_12);
  highp vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec3 color_15;
  mediump vec2 rlPow4AndFresnelTerm_16;
  mediump float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_7, lightDir_11), 0.0, 1.0);
  tmpvar_17 = tmpvar_18;
  mediump float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_7, viewDir_14), 0.0, 1.0);
  tmpvar_19 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_7, viewDir_14) * tmpvar_7)
  )), lightDir_11);
  tmpvar_21.y = (1.0 - tmpvar_19);
  highp vec2 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (tmpvar_21 * tmpvar_21));
  rlPow4AndFresnelTerm_16 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = rlPow4AndFresnelTerm_16.x;
  mediump float specular_24;
  highp float smoothness_25;
  smoothness_25 = tmpvar_5;
  highp vec2 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = (1.0 - smoothness_25);
  highp float tmpvar_27;
  tmpvar_27 = (texture2D (unity_NHxRoughness, tmpvar_26).w * 16.0);
  specular_24 = tmpvar_27;
  color_15 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_24 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * (tmpvar_13 * tmpvar_17));
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = color_15;
  c_1.w = tmpvar_28.w;
  highp float tmpvar_29;
  tmpvar_29 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_15 * vec3(tmpvar_29));
  mediump vec4 xlat_varoutput_30;
  xlat_varoutput_30.xyz = c_1.xyz;
  xlat_varoutput_30.w = 1.0;
  gl_FragData[0] = xlat_varoutput_30;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec4 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15);
  mediump float realtimeShadowAttenuation_16;
  realtimeShadowAttenuation_16 = 1.0;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_WorldToShadow[0] * tmpvar_17);
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, tmpvar_18);
  mediump float tmpvar_21;
  if ((tmpvar_20.x < (tmpvar_18.z / tmpvar_18.w))) {
    tmpvar_21 = _LightShadowData.x;
  } else {
    tmpvar_21 = 1.0;
  };
  tmpvar_19 = tmpvar_21;
  realtimeShadowAttenuation_16 = tmpvar_19;
  shadow_2 = realtimeShadowAttenuation_16;
  lowp float tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((lightCoord_3.xy / lightCoord_3.w) + 0.5));
  tmpvar_22 = tmpvar_23.w;
  lowp float tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (lightCoord_3.xyz, lightCoord_3.xyz)));
  tmpvar_24 = tmpvar_25.w;
  highp float tmpvar_26;
  tmpvar_26 = (((
    float((lightCoord_3.z > 0.0))
   * tmpvar_22) * tmpvar_24) * shadow_2);
  atten_1 = tmpvar_26;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = c_4;
  mediump vec4 xlat_varoutput_28;
  xlat_varoutput_28.xyz = tmpvar_27.xyz;
  xlat_varoutput_28.w = 1.0;
  gl_FragData[0] = xlat_varoutput_28;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec4 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_13;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_WorldToShadow[0] * tmpvar_14);
  lowp float tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, tmpvar_15);
  mediump float tmpvar_18;
  if ((tmpvar_17.x < (tmpvar_15.z / tmpvar_15.w))) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  tmpvar_16 = tmpvar_18;
  realtimeShadowAttenuation_13 = tmpvar_16;
  shadow_3 = realtimeShadowAttenuation_13;
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((lightCoord_4.xy / lightCoord_4.w) + 0.5));
  tmpvar_19 = tmpvar_20.w;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (lightCoord_4.xyz, lightCoord_4.xyz)));
  tmpvar_21 = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = (((
    float((lightCoord_4.z > 0.0))
   * tmpvar_19) * tmpvar_21) * shadow_3);
  atten_2 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_2;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = _LightColor0.xyz;
  highp vec3 n_29;
  n_29 = lightDir_25;
  tmpvar_28 = n_29;
  tmpvar_27 = (tmpvar_27 * atten_26);
  highp vec3 viewDir_30;
  viewDir_30 = -(xlv_TEXCOORD1);
  mediump vec3 color_31;
  mediump vec2 rlPow4AndFresnelTerm_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_11, tmpvar_28), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_11, viewDir_30), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37.x = dot ((viewDir_30 - (2.0 * 
    (dot (tmpvar_11, viewDir_30) * tmpvar_11)
  )), tmpvar_28);
  tmpvar_37.y = (1.0 - tmpvar_35);
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37 * tmpvar_37) * (tmpvar_37 * tmpvar_37));
  rlPow4AndFresnelTerm_32 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = rlPow4AndFresnelTerm_32.x;
  mediump float specular_40;
  highp float smoothness_41;
  smoothness_41 = tmpvar_7;
  highp vec2 tmpvar_42;
  tmpvar_42.x = tmpvar_39;
  tmpvar_42.y = (1.0 - smoothness_41);
  highp float tmpvar_43;
  tmpvar_43 = (texture2D (unity_NHxRoughness, tmpvar_42).w * 16.0);
  specular_40 = tmpvar_43;
  color_31 = ((tmpvar_9 + (specular_40 * tmpvar_10)) * (tmpvar_27 * tmpvar_33));
  mediump vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = color_31;
  c_1.w = tmpvar_44.w;
  highp float tmpvar_45;
  tmpvar_45 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_31 * vec3(tmpvar_45));
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = c_1.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform highp sampler2D _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec4 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12);
  mediump float realtimeShadowAttenuation_13;
  realtimeShadowAttenuation_13 = 1.0;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD5;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_WorldToShadow[0] * tmpvar_14);
  lowp float tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, tmpvar_15);
  mediump float tmpvar_18;
  if ((tmpvar_17.x < (tmpvar_15.z / tmpvar_15.w))) {
    tmpvar_18 = _LightShadowData.x;
  } else {
    tmpvar_18 = 1.0;
  };
  tmpvar_16 = tmpvar_18;
  realtimeShadowAttenuation_13 = tmpvar_16;
  shadow_3 = realtimeShadowAttenuation_13;
  lowp float tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, ((lightCoord_4.xy / lightCoord_4.w) + 0.5));
  tmpvar_19 = tmpvar_20.w;
  lowp float tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (lightCoord_4.xyz, lightCoord_4.xyz)));
  tmpvar_21 = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = (((
    float((lightCoord_4.z > 0.0))
   * tmpvar_19) * tmpvar_21) * shadow_3);
  atten_2 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24.x = xlv_TEXCOORD2.w;
  tmpvar_24.y = xlv_TEXCOORD2_1.w;
  tmpvar_24.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_25;
  lightDir_25 = tmpvar_24;
  mediump float atten_26;
  atten_26 = atten_2;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_27 = _LightColor0.xyz;
  highp vec3 n_29;
  n_29 = lightDir_25;
  tmpvar_28 = n_29;
  tmpvar_27 = (tmpvar_27 * atten_26);
  highp vec3 viewDir_30;
  viewDir_30 = -(xlv_TEXCOORD1);
  mediump vec3 color_31;
  mediump vec2 rlPow4AndFresnelTerm_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_11, tmpvar_28), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (dot (tmpvar_11, viewDir_30), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37.x = dot ((viewDir_30 - (2.0 * 
    (dot (tmpvar_11, viewDir_30) * tmpvar_11)
  )), tmpvar_28);
  tmpvar_37.y = (1.0 - tmpvar_35);
  highp vec2 tmpvar_38;
  tmpvar_38 = ((tmpvar_37 * tmpvar_37) * (tmpvar_37 * tmpvar_37));
  rlPow4AndFresnelTerm_32 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = rlPow4AndFresnelTerm_32.x;
  mediump float specular_40;
  highp float smoothness_41;
  smoothness_41 = tmpvar_7;
  highp vec2 tmpvar_42;
  tmpvar_42.x = tmpvar_39;
  tmpvar_42.y = (1.0 - smoothness_41);
  highp float tmpvar_43;
  tmpvar_43 = (texture2D (unity_NHxRoughness, tmpvar_42).w * 16.0);
  specular_40 = tmpvar_43;
  color_31 = ((tmpvar_9 + (specular_40 * tmpvar_10)) * (tmpvar_27 * tmpvar_33));
  mediump vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = color_31;
  c_1.w = tmpvar_44.w;
  highp float tmpvar_45;
  tmpvar_45 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_31 * vec3(tmpvar_45));
  mediump vec4 xlat_varoutput_46;
  xlat_varoutput_46.xyz = c_1.xyz;
  xlat_varoutput_46.w = 1.0;
  gl_FragData[0] = xlat_varoutput_46;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_19;
  tmpvar_19 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_19;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  mediump vec3 c_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_8;
  tmpvar_8 = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7));
  mediump float specular_9;
  highp float smoothness_10;
  smoothness_10 = tmpvar_5;
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_8;
  tmpvar_11.y = (1.0 - smoothness_10);
  highp float tmpvar_12;
  tmpvar_12 = (texture2D (unity_NHxRoughness, tmpvar_11).w * 16.0);
  specular_9 = tmpvar_12;
  c_2 = (((tmpvar_6 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_9 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic))
  )) * _LightColor0.xyz);
  mediump float realtimeShadowAttenuation_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_15;
  highp vec4 shadowCoord_16;
  shadowCoord_16 = (unity_WorldToShadow[0] * tmpvar_14);
  highp float lightShadowDataX_17;
  mediump float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2D (_ShadowMapTexture, shadowCoord_16.xy).x > shadowCoord_16.z)), lightShadowDataX_17);
  tmpvar_15 = tmpvar_19;
  realtimeShadowAttenuation_13 = tmpvar_15;
  atten_1 = realtimeShadowAttenuation_13;
  c_2 = (c_2 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_2 = (c_2 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = c_2;
  mediump vec4 xlat_varoutput_21;
  xlat_varoutput_21.xyz = tmpvar_20.xyz;
  xlat_varoutput_21.w = 1.0;
  gl_FragData[0] = xlat_varoutput_21;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_16;
  highp vec4 shadowCoord_17;
  shadowCoord_17 = (unity_WorldToShadow[0] * tmpvar_15);
  highp float lightShadowDataX_18;
  mediump float tmpvar_19;
  tmpvar_19 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2D (_ShadowMapTexture, shadowCoord_17.xy).x > shadowCoord_17.z)), lightShadowDataX_18);
  tmpvar_16 = tmpvar_20;
  realtimeShadowAttenuation_10 = tmpvar_16;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22.x = xlv_TEXCOORD2.w;
  tmpvar_22.y = xlv_TEXCOORD2_1.w;
  tmpvar_22.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_23;
  lightDir_23 = tmpvar_22;
  mediump float atten_24;
  atten_24 = atten_2;
  mediump vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_25 = (tmpvar_25 * atten_24);
  mediump vec3 color_26;
  highp float specularTerm_27;
  highp float a2_28;
  mediump float roughness_29;
  mediump float perceptualRoughness_30;
  highp vec3 tmpvar_31;
  highp vec3 inVec_32;
  inVec_32 = (lightDir_23 - normalize(xlv_TEXCOORD1));
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, lightDir_23), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_9, tmpvar_31), 0.0, 1.0);
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_5;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_30 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_30;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_29 = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = (roughness_29 * roughness_29);
  a2_28 = tmpvar_40;
  specularTerm_27 = ((roughness_29 / (
    (max (0.32, clamp (dot (lightDir_23, tmpvar_31), 0.0, 1.0)) * (1.5 + roughness_29))
   * 
    (((tmpvar_35 * tmpvar_35) * (a2_28 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_41;
  tmpvar_41 = clamp (specularTerm_27, 0.0, 100.0);
  specularTerm_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (((tmpvar_7 + 
    (tmpvar_41 * tmpvar_8)
  ) * tmpvar_25) * tmpvar_33);
  color_26 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_26;
  c_1.w = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_26 * vec3(tmpvar_44));
  mediump vec4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = c_1.xyz;
  xlat_varoutput_45.w = 1.0;
  gl_FragData[0] = xlat_varoutput_45;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_4;
  mg_4.x = _Metallic;
  mg_4.y = _Glossiness;
  mediump float tmpvar_5;
  tmpvar_5 = mg_4.y;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_6, vec3(_Metallic));
  tmpvar_7 = (tmpvar_6 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2_2.xyz);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_16;
  highp vec4 shadowCoord_17;
  shadowCoord_17 = (unity_WorldToShadow[0] * tmpvar_15);
  highp float lightShadowDataX_18;
  mediump float tmpvar_19;
  tmpvar_19 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2D (_ShadowMapTexture, shadowCoord_17.xy).x > shadowCoord_17.z)), lightShadowDataX_18);
  tmpvar_16 = tmpvar_20;
  realtimeShadowAttenuation_10 = tmpvar_16;
  mediump float tmpvar_21;
  tmpvar_21 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22.x = xlv_TEXCOORD2.w;
  tmpvar_22.y = xlv_TEXCOORD2_1.w;
  tmpvar_22.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_23;
  lightDir_23 = tmpvar_22;
  mediump float atten_24;
  atten_24 = atten_2;
  mediump vec3 tmpvar_25;
  tmpvar_25 = _LightColor0.xyz;
  tmpvar_25 = (tmpvar_25 * atten_24);
  mediump vec3 color_26;
  highp float specularTerm_27;
  highp float a2_28;
  mediump float roughness_29;
  mediump float perceptualRoughness_30;
  highp vec3 tmpvar_31;
  highp vec3 inVec_32;
  inVec_32 = (lightDir_23 - normalize(xlv_TEXCOORD1));
  tmpvar_31 = (inVec_32 * inversesqrt(max (0.001, 
    dot (inVec_32, inVec_32)
  )));
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (dot (tmpvar_9, lightDir_23), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (dot (tmpvar_9, tmpvar_31), 0.0, 1.0);
  highp float tmpvar_36;
  highp float smoothness_37;
  smoothness_37 = tmpvar_5;
  tmpvar_36 = (1.0 - smoothness_37);
  perceptualRoughness_30 = tmpvar_36;
  highp float tmpvar_38;
  highp float perceptualRoughness_39;
  perceptualRoughness_39 = perceptualRoughness_30;
  tmpvar_38 = (perceptualRoughness_39 * perceptualRoughness_39);
  roughness_29 = tmpvar_38;
  mediump float tmpvar_40;
  tmpvar_40 = (roughness_29 * roughness_29);
  a2_28 = tmpvar_40;
  specularTerm_27 = ((roughness_29 / (
    (max (0.32, clamp (dot (lightDir_23, tmpvar_31), 0.0, 1.0)) * (1.5 + roughness_29))
   * 
    (((tmpvar_35 * tmpvar_35) * (a2_28 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_41;
  tmpvar_41 = clamp (specularTerm_27, 0.0, 100.0);
  specularTerm_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (((tmpvar_7 + 
    (tmpvar_41 * tmpvar_8)
  ) * tmpvar_25) * tmpvar_33);
  color_26 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = color_26;
  c_1.w = tmpvar_43.w;
  highp float tmpvar_44;
  tmpvar_44 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_26 * vec3(tmpvar_44));
  mediump vec4 xlat_varoutput_45;
  xlat_varoutput_45.xyz = c_1.xyz;
  xlat_varoutput_45.w = 1.0;
  gl_FragData[0] = xlat_varoutput_45;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_15;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((norm_16 * tmpvar_17));
  normalWorld_4 = tmpvar_18;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_19;
  tmpvar_19 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_19;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = lightDir_6;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  mediump vec3 c_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_9;
  tmpvar_9 = ((tmpvar_8 * tmpvar_8) * (tmpvar_8 * tmpvar_8));
  mediump float specular_10;
  highp float smoothness_11;
  smoothness_11 = tmpvar_6;
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_9;
  tmpvar_12.y = (1.0 - smoothness_11);
  highp float tmpvar_13;
  tmpvar_13 = (texture2D (unity_NHxRoughness, tmpvar_12).w * 16.0);
  specular_10 = tmpvar_13;
  c_3 = (((tmpvar_7 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_10 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  mediump float realtimeShadowAttenuation_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  lowp float tmpvar_17;
  highp vec4 shadowCoord_18;
  shadowCoord_18 = (unity_WorldToShadow[0] * tmpvar_16);
  highp float lightShadowDataX_19;
  mediump float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2D (_ShadowMapTexture, shadowCoord_18.xy).x > shadowCoord_18.z)), lightShadowDataX_19);
  tmpvar_17 = tmpvar_21;
  realtimeShadowAttenuation_15 = tmpvar_17;
  shadow_2 = realtimeShadowAttenuation_15;
  highp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_14).xy).w * shadow_2);
  atten_1 = tmpvar_22;
  c_3 = (c_3 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_3 = (c_3 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = c_3;
  mediump vec4 xlat_varoutput_24;
  xlat_varoutput_24.xyz = tmpvar_23.xyz;
  xlat_varoutput_24.w = 1.0;
  gl_FragData[0] = xlat_varoutput_24;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_12;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_18;
  highp vec4 shadowCoord_19;
  shadowCoord_19 = (unity_WorldToShadow[0] * tmpvar_17);
  highp float lightShadowDataX_20;
  mediump float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2D (_ShadowMapTexture, shadowCoord_19.xy).x > shadowCoord_19.z)), lightShadowDataX_20);
  tmpvar_18 = tmpvar_22;
  realtimeShadowAttenuation_12 = tmpvar_18;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_12 + tmpvar_15), 0.0, 1.0);
  shadow_3 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_11).xy).w * shadow_3);
  atten_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.x = xlv_TEXCOORD2.w;
  tmpvar_25.y = xlv_TEXCOORD2_1.w;
  tmpvar_25.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_26;
  lightDir_26 = tmpvar_25;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_28 = (tmpvar_28 * atten_27);
  mediump vec3 color_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (lightDir_26 - normalize(xlv_TEXCOORD1));
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_10, lightDir_26), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  highp float tmpvar_39;
  highp float smoothness_40;
  smoothness_40 = tmpvar_6;
  tmpvar_39 = (1.0 - smoothness_40);
  perceptualRoughness_33 = tmpvar_39;
  highp float tmpvar_41;
  highp float perceptualRoughness_42;
  perceptualRoughness_42 = perceptualRoughness_33;
  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
  roughness_32 = tmpvar_41;
  mediump float tmpvar_43;
  tmpvar_43 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_43;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (lightDir_26, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_44;
  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (((tmpvar_8 + 
    (tmpvar_44 * tmpvar_9)
  ) * tmpvar_28) * tmpvar_36);
  color_29 = tmpvar_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = color_29;
  c_1.w = tmpvar_46.w;
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_29 * vec3(tmpvar_47));
  mediump vec4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = c_1.xyz;
  xlat_varoutput_48.w = 1.0;
  gl_FragData[0] = xlat_varoutput_48;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_14;
  highp vec3 n_15;
  n_15 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  tmpvar_14 = n_15;
  tmpvar_4 = tmpvar_14;
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_WorldToObject[0].xyz;
  tmpvar_17[1] = unity_WorldToObject[1].xyz;
  tmpvar_17[2] = unity_WorldToObject[2].xyz;
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = normalize((norm_16 * tmpvar_17));
  highp vec3 tmpvar_18;
  tmpvar_18 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  tmpvar_5.w = tmpvar_18.x;
  tmpvar_6.w = tmpvar_18.y;
  tmpvar_7.w = tmpvar_18.z;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9.xyz;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_5;
  mg_5.x = _Metallic;
  mg_5.y = _Glossiness;
  mediump float tmpvar_6;
  tmpvar_6 = mg_5.y;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_7, vec3(_Metallic));
  tmpvar_8 = (tmpvar_7 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD5;
  mediump float realtimeShadowAttenuation_12;
  highp vec4 v_13;
  v_13.x = unity_MatrixV[0].z;
  v_13.y = unity_MatrixV[1].z;
  v_13.z = unity_MatrixV[2].z;
  v_13.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD5), v_13.xyz), sqrt(dot (tmpvar_14, tmpvar_14)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_15 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD5;
  lowp float tmpvar_18;
  highp vec4 shadowCoord_19;
  shadowCoord_19 = (unity_WorldToShadow[0] * tmpvar_17);
  highp float lightShadowDataX_20;
  mediump float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2D (_ShadowMapTexture, shadowCoord_19.xy).x > shadowCoord_19.z)), lightShadowDataX_20);
  tmpvar_18 = tmpvar_22;
  realtimeShadowAttenuation_12 = tmpvar_18;
  mediump float tmpvar_23;
  tmpvar_23 = clamp ((realtimeShadowAttenuation_12 + tmpvar_15), 0.0, 1.0);
  shadow_3 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, (unity_WorldToLight * tmpvar_11).xy).w * shadow_3);
  atten_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25.x = xlv_TEXCOORD2.w;
  tmpvar_25.y = xlv_TEXCOORD2_1.w;
  tmpvar_25.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_26;
  lightDir_26 = tmpvar_25;
  mediump float atten_27;
  atten_27 = atten_2;
  mediump vec3 tmpvar_28;
  tmpvar_28 = _LightColor0.xyz;
  tmpvar_28 = (tmpvar_28 * atten_27);
  mediump vec3 color_29;
  highp float specularTerm_30;
  highp float a2_31;
  mediump float roughness_32;
  mediump float perceptualRoughness_33;
  highp vec3 tmpvar_34;
  highp vec3 inVec_35;
  inVec_35 = (lightDir_26 - normalize(xlv_TEXCOORD1));
  tmpvar_34 = (inVec_35 * inversesqrt(max (0.001, 
    dot (inVec_35, inVec_35)
  )));
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (dot (tmpvar_10, lightDir_26), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (dot (tmpvar_10, tmpvar_34), 0.0, 1.0);
  highp float tmpvar_39;
  highp float smoothness_40;
  smoothness_40 = tmpvar_6;
  tmpvar_39 = (1.0 - smoothness_40);
  perceptualRoughness_33 = tmpvar_39;
  highp float tmpvar_41;
  highp float perceptualRoughness_42;
  perceptualRoughness_42 = perceptualRoughness_33;
  tmpvar_41 = (perceptualRoughness_42 * perceptualRoughness_42);
  roughness_32 = tmpvar_41;
  mediump float tmpvar_43;
  tmpvar_43 = (roughness_32 * roughness_32);
  a2_31 = tmpvar_43;
  specularTerm_30 = ((roughness_32 / (
    (max (0.32, clamp (dot (lightDir_26, tmpvar_34), 0.0, 1.0)) * (1.5 + roughness_32))
   * 
    (((tmpvar_38 * tmpvar_38) * (a2_31 - 1.0)) + 1.00001)
  )) - 0.0001);
  highp float tmpvar_44;
  tmpvar_44 = clamp (specularTerm_30, 0.0, 100.0);
  specularTerm_30 = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (((tmpvar_8 + 
    (tmpvar_44 * tmpvar_9)
  ) * tmpvar_28) * tmpvar_36);
  color_29 = tmpvar_45;
  mediump vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = color_29;
  c_1.w = tmpvar_46.w;
  highp float tmpvar_47;
  tmpvar_47 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_29 * vec3(tmpvar_47));
  mediump vec4 xlat_varoutput_48;
  xlat_varoutput_48.xyz = c_1.xyz;
  xlat_varoutput_48.w = 1.0;
  gl_FragData[0] = xlat_varoutput_48;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTexture0, vec2(dot (lightCoord_3, lightCoord_3))).w * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec3 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec3 vec_13;
  vec_13 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (vec_13, vec_13)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, vec_13);
  highp vec4 vals_17;
  vals_17 = tmpvar_16;
  highp float tmpvar_18;
  tmpvar_18 = dot (vals_17, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_14 = tmpvar_18;
  mediump float tmpvar_19;
  if ((shadowVal_14 < mydist_15)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  shadow_3 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).w * shadow_3);
  atten_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = _LightColor0.xyz;
  highp vec3 n_26;
  n_26 = lightDir_22;
  tmpvar_25 = n_26;
  tmpvar_24 = (tmpvar_24 * atten_23);
  highp vec3 viewDir_27;
  viewDir_27 = -(xlv_TEXCOORD1);
  mediump vec3 color_28;
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_11, tmpvar_25), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_11, viewDir_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.x = dot ((viewDir_27 - (2.0 * 
    (dot (tmpvar_11, viewDir_27) * tmpvar_11)
  )), tmpvar_25);
  tmpvar_34.y = (1.0 - tmpvar_32);
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  rlPow4AndFresnelTerm_29 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
  mediump float specular_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_7;
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_36;
  tmpvar_39.y = (1.0 - smoothness_38);
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).w * 16.0);
  specular_37 = tmpvar_40;
  color_28 = ((tmpvar_9 + (specular_37 * tmpvar_10)) * (tmpvar_24 * tmpvar_30));
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_28;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_28 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec3 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec3 vec_13;
  vec_13 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (vec_13, vec_13)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, vec_13);
  highp vec4 vals_17;
  vals_17 = tmpvar_16;
  highp float tmpvar_18;
  tmpvar_18 = dot (vals_17, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_14 = tmpvar_18;
  mediump float tmpvar_19;
  if ((shadowVal_14 < mydist_15)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  shadow_3 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, vec2(dot (lightCoord_4, lightCoord_4))).w * shadow_3);
  atten_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = _LightColor0.xyz;
  highp vec3 n_26;
  n_26 = lightDir_22;
  tmpvar_25 = n_26;
  tmpvar_24 = (tmpvar_24 * atten_23);
  highp vec3 viewDir_27;
  viewDir_27 = -(xlv_TEXCOORD1);
  mediump vec3 color_28;
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_11, tmpvar_25), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_11, viewDir_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.x = dot ((viewDir_27 - (2.0 * 
    (dot (tmpvar_11, viewDir_27) * tmpvar_11)
  )), tmpvar_25);
  tmpvar_34.y = (1.0 - tmpvar_32);
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  rlPow4AndFresnelTerm_29 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
  mediump float specular_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_7;
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_36;
  tmpvar_39.y = (1.0 - smoothness_38);
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).w * 16.0);
  specular_37 = tmpvar_40;
  color_28 = ((tmpvar_9 + (specular_37 * tmpvar_10)) * (tmpvar_24 * tmpvar_30));
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_28;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_28 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec3 normalWorld_4;
  mediump vec3 eyeVec_5;
  mediump vec3 lightDir_6;
  highp vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  highp vec3 tmpvar_14;
  tmpvar_14 = (_WorldSpaceLightPos0.xyz - (tmpvar_9.xyz * _WorldSpaceLightPos0.w));
  lightDir_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  highp vec3 n_16;
  n_16 = lightDir_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(n_16);
  tmpvar_15 = tmpvar_17;
  lightDir_6 = tmpvar_15;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_9.xyz - _WorldSpaceCameraPos));
  eyeVec_5 = tmpvar_18;
  highp vec3 norm_19;
  norm_19 = tmpvar_1;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = unity_WorldToObject[0].xyz;
  tmpvar_20[1] = unity_WorldToObject[1].xyz;
  tmpvar_20[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((norm_19 * tmpvar_20));
  normalWorld_4 = tmpvar_21;
  tmpvar_8.yzw = (eyeVec_5 - (2.0 * (
    dot (normalWorld_4, eyeVec_5)
   * normalWorld_4)));
  highp float tmpvar_22;
  tmpvar_22 = ((tmpvar_10.z * unity_FogParams.z) + unity_FogParams.w);
  tmpvar_8.x = tmpvar_22;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_15;
  xlv_TEXCOORD5 = normalWorld_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp float atten_1;
  lowp float shadow_2;
  highp vec3 lightCoord_3;
  mediump vec3 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD3.yzw, xlv_TEXCOORD4);
  mediump float tmpvar_10;
  tmpvar_10 = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9));
  mediump float specular_11;
  highp float smoothness_12;
  smoothness_12 = tmpvar_7;
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_10;
  tmpvar_13.y = (1.0 - smoothness_12);
  highp float tmpvar_14;
  tmpvar_14 = (texture2D (unity_NHxRoughness, tmpvar_13).w * 16.0);
  specular_11 = tmpvar_14;
  c_4 = (((tmpvar_8 * 
    (0.7790837 - (_Metallic * 0.7790837))
  ) + (specular_11 * 
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic))
  )) * _LightColor0.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  lightCoord_3 = (unity_WorldToLight * tmpvar_15).xyz;
  highp vec3 vec_16;
  vec_16 = (xlv_TEXCOORD1 - _LightPositionRange.xyz);
  mediump float shadowVal_17;
  highp float mydist_18;
  mydist_18 = ((sqrt(
    dot (vec_16, vec_16)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureCube (_ShadowMapTexture, vec_16);
  highp vec4 vals_20;
  vals_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = dot (vals_20, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_17 = tmpvar_21;
  mediump float tmpvar_22;
  if ((shadowVal_17 < mydist_18)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  shadow_2 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_3, lightCoord_3))).w * textureCube (_LightTexture0, lightCoord_3).w) * shadow_2);
  atten_1 = tmpvar_23;
  c_4 = (c_4 * (atten_1 * clamp (
    dot (xlv_TEXCOORD5, xlv_TEXCOORD4)
  , 0.0, 1.0)));
  c_4 = (c_4 * vec3(clamp (xlv_TEXCOORD3.x, 0.0, 1.0)));
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = c_4;
  mediump vec4 xlat_varoutput_25;
  xlat_varoutput_25.xyz = tmpvar_24.xyz;
  xlat_varoutput_25.w = 1.0;
  gl_FragData[0] = xlat_varoutput_25;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec3 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec3 vec_13;
  vec_13 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (vec_13, vec_13)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, vec_13);
  highp vec4 vals_17;
  vals_17 = tmpvar_16;
  highp float tmpvar_18;
  tmpvar_18 = dot (vals_17, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_14 = tmpvar_18;
  mediump float tmpvar_19;
  if ((shadowVal_14 < mydist_15)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  shadow_3 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_4, lightCoord_4))).w * textureCube (_LightTexture0, lightCoord_4).w) * shadow_3);
  atten_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = _LightColor0.xyz;
  highp vec3 n_26;
  n_26 = lightDir_22;
  tmpvar_25 = n_26;
  tmpvar_24 = (tmpvar_24 * atten_23);
  highp vec3 viewDir_27;
  viewDir_27 = -(xlv_TEXCOORD1);
  mediump vec3 color_28;
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_11, tmpvar_25), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_11, viewDir_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.x = dot ((viewDir_27 - (2.0 * 
    (dot (tmpvar_11, viewDir_27) * tmpvar_11)
  )), tmpvar_25);
  tmpvar_34.y = (1.0 - tmpvar_32);
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  rlPow4AndFresnelTerm_29 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
  mediump float specular_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_7;
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_36;
  tmpvar_39.y = (1.0 - smoothness_38);
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).w * 16.0);
  specular_37 = tmpvar_40;
  color_28 = ((tmpvar_9 + (specular_37 * tmpvar_10)) * (tmpvar_24 * tmpvar_30));
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_28;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_28 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_FogParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec3 lightDir_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_12));
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_10.xyz - _WorldSpaceCameraPos));
  tmpvar_15 = tmpvar_16;
  tmpvar_5 = tmpvar_15;
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp mat3 tmpvar_18;
  tmpvar_18[0] = unity_WorldToObject[0].xyz;
  tmpvar_18[1] = unity_WorldToObject[1].xyz;
  tmpvar_18[2] = unity_WorldToObject[2].xyz;
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.xyz = normalize((norm_17 * tmpvar_18));
  mediump vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w)));
  tmpvar_19 = tmpvar_20;
  lightDir_4 = tmpvar_19;
  tmpvar_6.w = lightDir_4.x;
  tmpvar_7.w = lightDir_4.y;
  tmpvar_8.w = lightDir_4.z;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD2_1 = tmpvar_7;
  xlv_TEXCOORD2_2 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_10.xyz;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = ((tmpvar_11.z * unity_FogParams.z) + unity_FogParams.w);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightProjectionParams;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D unity_NHxRoughness;
uniform lowp samplerCube _ShadowMapTexture;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform highp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform highp sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD2_1;
varying highp vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD7;
void main ()
{
  mediump vec4 c_1;
  lowp float atten_2;
  lowp float shadow_3;
  highp vec3 lightCoord_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec2 mg_6;
  mg_6.x = _Metallic;
  mg_6.y = _Glossiness;
  mediump float tmpvar_7;
  tmpvar_7 = mg_6.y;
  mediump vec3 tmpvar_8;
  tmpvar_8 = (_Color.xyz * tmpvar_5.xyz);
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_8, vec3(_Metallic));
  tmpvar_9 = (tmpvar_8 * (0.7790837 - (_Metallic * 0.7790837)));
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD2_2.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD5;
  lightCoord_4 = (unity_WorldToLight * tmpvar_12).xyz;
  highp vec3 vec_13;
  vec_13 = (xlv_TEXCOORD5 - _LightPositionRange.xyz);
  mediump float shadowVal_14;
  highp float mydist_15;
  mydist_15 = ((sqrt(
    dot (vec_13, vec_13)
  ) * _LightPositionRange.w) * _LightProjectionParams.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureCube (_ShadowMapTexture, vec_13);
  highp vec4 vals_17;
  vals_17 = tmpvar_16;
  highp float tmpvar_18;
  tmpvar_18 = dot (vals_17, vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  shadowVal_14 = tmpvar_18;
  mediump float tmpvar_19;
  if ((shadowVal_14 < mydist_15)) {
    tmpvar_19 = _LightShadowData.x;
  } else {
    tmpvar_19 = 1.0;
  };
  shadow_3 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = ((texture2D (_LightTextureB0, vec2(dot (lightCoord_4, lightCoord_4))).w * textureCube (_LightTexture0, lightCoord_4).w) * shadow_3);
  atten_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21.x = xlv_TEXCOORD2.w;
  tmpvar_21.y = xlv_TEXCOORD2_1.w;
  tmpvar_21.z = xlv_TEXCOORD2_2.w;
  mediump vec3 lightDir_22;
  lightDir_22 = tmpvar_21;
  mediump float atten_23;
  atten_23 = atten_2;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_24 = _LightColor0.xyz;
  highp vec3 n_26;
  n_26 = lightDir_22;
  tmpvar_25 = n_26;
  tmpvar_24 = (tmpvar_24 * atten_23);
  highp vec3 viewDir_27;
  viewDir_27 = -(xlv_TEXCOORD1);
  mediump vec3 color_28;
  mediump vec2 rlPow4AndFresnelTerm_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (dot (tmpvar_11, tmpvar_25), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (dot (tmpvar_11, viewDir_27), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34.x = dot ((viewDir_27 - (2.0 * 
    (dot (tmpvar_11, viewDir_27) * tmpvar_11)
  )), tmpvar_25);
  tmpvar_34.y = (1.0 - tmpvar_32);
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34 * tmpvar_34) * (tmpvar_34 * tmpvar_34));
  rlPow4AndFresnelTerm_29 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = rlPow4AndFresnelTerm_29.x;
  mediump float specular_37;
  highp float smoothness_38;
  smoothness_38 = tmpvar_7;
  highp vec2 tmpvar_39;
  tmpvar_39.x = tmpvar_36;
  tmpvar_39.y = (1.0 - smoothness_38);
  highp float tmpvar_40;
  tmpvar_40 = (texture2D (unity_NHxRoughness, tmpvar_39).w * 16.0);
  specular_37 = tmpvar_40;
  color_28 = ((tmpvar_9 + (specular_37 * tmpvar_10)) * (tmpvar_24 * tmpvar_30));
  mediump vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = color_28;
  c_1.w = tmpvar_41.w;
  highp float tmpvar_42;
  tmpvar_42 = clamp (xlv_TEXCOORD7, 0.0, 1.0);
  c_1.xyz = (color_28 * vec3(tmpvar_42));
  mediump vec4 xlat_varoutput_43;
  xlat_varoutput_43.xyz = c_1.xyz;
  xlat_varoutput_43.w = 1.0;
  gl_FragData[0] = xlat_varoutput_43;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
""
}
}
}
 Pass {
  Name "SHADOWCASTER"
  LOD 150
  Tags { "LIGHTMODE" = "SHADOWCASTER" "PerformanceChecks" = "False" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 518401
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 wPos_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (unity_ObjectToWorld * _glesVertex);
  wPos_2 = tmpvar_3;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp mat3 tmpvar_4;
    tmpvar_4[0] = unity_WorldToObject[0].xyz;
    tmpvar_4[1] = unity_WorldToObject[1].xyz;
    tmpvar_4[2] = unity_WorldToObject[2].xyz;
    highp vec3 tmpvar_5;
    tmpvar_5 = normalize((_glesNormal * tmpvar_4));
    highp float tmpvar_6;
    tmpvar_6 = dot (tmpvar_5, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_3.xyz * _WorldSpaceLightPos0.w)
    )));
    wPos_2.xyz = (tmpvar_3.xyz - (tmpvar_5 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_6 * tmpvar_6)))
    )));
  };
  tmpvar_1 = (unity_MatrixVP * wPos_2);
  highp vec4 clipPos_7;
  clipPos_7.xyw = tmpvar_1.xyw;
  clipPos_7.z = (tmpvar_1.z + clamp ((unity_LightShadowBias.x / tmpvar_1.w), 0.0, 1.0));
  clipPos_7.z = mix (clipPos_7.z, max (clipPos_7.z, -(tmpvar_1.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_7;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((unity_ObjectToWorld * _glesVertex).xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LightShadowBias;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec4 enc_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) + unity_LightShadowBias.x) * _LightPositionRange.w)
  , 0.999)));
  enc_2 = (tmpvar_3 - (tmpvar_3.yzww * 0.003921569));
  tmpvar_1 = enc_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_DEPTH" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SHADOWS_CUBE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SHADOWS_CUBE" }
""
}
}
}
 Pass {
  Name "META"
  LOD 150
  Tags { "LIGHTMODE" = "META" "PerformanceChecks" = "False" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 569850
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec4 res_6;
  res_6 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xyz = res_5;
    res_6.w = tmpvar_7.w;
    highp vec3 tmpvar_8;
    tmpvar_8 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_6.xyz = tmpvar_8;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_9;
    if (bool(unity_UseLinearSpace)) {
      emission_9 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_9 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = emission_9;
    res_6 = tmpvar_10;
  };
  tmpvar_1 = res_6;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform bvec4 unity_MetaVertexControl;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord1.xy;
  highp vec4 vertex_3;
  vertex_3 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_3.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_4;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_3.z = tmpvar_4;
  };
  if (unity_MetaVertexControl.y) {
    vertex_3.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_5;
    if ((vertex_3.z > 0.0)) {
      tmpvar_5 = 0.0001;
    } else {
      tmpvar_5 = 0.0;
    };
    vertex_3.z = tmpvar_5;
  };
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertex_3.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 texcoord_8;
  texcoord_8.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_9;
  if ((_UVSec == 0.0)) {
    tmpvar_9 = tmpvar_1;
  } else {
    tmpvar_9 = tmpvar_2;
  };
  texcoord_8.zw = ((tmpvar_9 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  xlv_TEXCOORD0 = texcoord_8;
  gl_Position = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform highp float _Glossiness;
uniform mediump vec4 _EmissionColor;
uniform sampler2D _EmissionMap;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec2 mg_2;
  mg_2.x = _Metallic;
  mg_2.y = _Glossiness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 res_5;
  res_5 = ((tmpvar_4 * (0.7790837 - 
    (_Metallic * 0.7790837)
  )) + ((
    mix (vec3(0.2209163, 0.2209163, 0.2209163), tmpvar_4, vec3(_Metallic))
   * 
    ((1.0 - mg_2.y) * (1.0 - mg_2.y))
  ) * 0.5));
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_EmissionMap, xlv_TEXCOORD0.xy);
  tmpvar_6 = (tmpvar_7.xyz * _EmissionColor.xyz);
  mediump vec4 res_8;
  res_8 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_9;
    tmpvar_9.w = 1.0;
    tmpvar_9.xyz = res_5;
    res_8.w = tmpvar_9.w;
    highp vec3 tmpvar_10;
    tmpvar_10 = clamp (pow (res_5, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_8.xyz = tmpvar_10;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_11;
    if (bool(unity_UseLinearSpace)) {
      emission_11 = tmpvar_6;
    } else {
      emission_11 = (tmpvar_6 * ((tmpvar_6 * 
        ((tmpvar_6 * 0.305306) + 0.6821711)
      ) + 0.01252288));
    };
    mediump vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = emission_11;
    res_8 = tmpvar_12;
  };
  tmpvar_1 = res_8;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_EMISSION" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_EMISSION" }
""
}
}
}
}
Fallback "VertexLit"
CustomEditor "StandardShaderGUI"
}